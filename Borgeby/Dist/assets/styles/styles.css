@charset "UTF-8";
/* ‘ */
/* ’ */
/* “ */
/* ” */
/* — */
/* – */
/* | */
/*   */
/* ✖ */
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * 1. Remove gaps in links underline in iOS 8+ and Safari 8+.
 * 2. Remove the gray background on active links in IE 10.
 */
a {
  -webkit-text-decoration-skip: objects;
  /* 1 */
  background-color: transparent;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 * 2. Remove the bottom border in Firefox 39-.
 */
abbr[title] {
  text-decoration: underline;
  /* 1 */
  text-decoration: underline dotted;
  /* 1 */
  border-bottom: none;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  margin: .67em 0;
  font-size: 2em; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  color: #000;
  background-color: #ff0; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline; }

sub {
  bottom: -.25em; }

sup {
  top: -.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * 1. Remove the margin in Firefox and Safari.
 * 2. Change font properties to `inherit` in all browsers (opinionated).
 */
button,
input,
select,
textarea {
  margin: 0;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  padding: 0;
  border-style: none; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  margin: 0 2px;
  padding: .35em .625em .75em;
  border: 1px solid #c0c0c0; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  display: table;
  /* 1 */
  box-sizing: border-box;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
  color: inherit;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: .54; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * As well as using normalize.css, it is often advantageous to remove all margins from certain elements.
 */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
dl,
dd,
ol,
ul,
form,
fieldset,
legend,
figure,
table,
th,
td,
caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

html {
  box-sizing: border-box; }

*, *::before, *::after {
  box-sizing: inherit; }

/**
 * Set custom outline color for all elements
 */
* {
  outline-color: #169bd5; }

/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * http://csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
dl,
blockquote,
p,
address,
hr,
table,
fieldset,
figure,
pre {
  margin-bottom: 1em; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul,
ol,
dd {
  margin-left: 2em; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
button,
input[type="button"] {
  touch-action: manipulation;
  /* [1] */ }

code,
kbd,
samp,
pre {
  font-family: Inconsolata, Monaco, Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
  font-style: normal;
  border-radius: 0.125em; }

code,
kbd {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
  padding: 0.125em 0.25em; }

code {
  color: #169bd5;
  background-color: #dedede; }

kbd {
  color: white;
  background-color: #3d3d3d; }

pre {
  padding: 0.5em;
  overflow: auto;
  color: #3d3d3d;
  white-space: pre;
  word-wrap: normal;
  background-color: #dedede; }
  pre code,
  pre kbd {
    padding: 0; }

samp {
  color: #3d3d3d;
  background-color: white; }

var {
  color: #3d3d3d;
  background-color: white; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
input,
select,
textarea,
label {
  touch-action: manipulation;
  /* [1] */ }

input[type=text],
input[type=password],
input[type=select],
input[type=color],
input[type=date],
input[type=datetime],
input[type=email],
input[type=month],
input[type=number],
input[type=range],
input[type=search],
input[type=tel],
input[type=time],
input[type=url],
input[type=week],
textarea,
select {
  display: block;
  width: 100%;
  padding: 0.25em;
  margin-bottom: 0.5em;
  color: #3d3d3d;
  background-color: white;
  border: 0.0625em solid #dedede;
  border-radius: 0.125em;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s; }
  input[type=text]:focus,
  input[type=password]:focus,
  input[type=select]:focus,
  input[type=color]:focus,
  input[type=date]:focus,
  input[type=datetime]:focus,
  input[type=email]:focus,
  input[type=month]:focus,
  input[type=number]:focus,
  input[type=range]:focus,
  input[type=search]:focus,
  input[type=tel]:focus,
  input[type=time]:focus,
  input[type=url]:focus,
  input[type=week]:focus,
  textarea:focus,
  select:focus {
    border-color: #dedede; }

input[type=checkbox],
input[type=radio] {
  margin-bottom: 0.5em;
  margin-right: 0.25em; }

label {
  display: inline-block;
  margin-bottom: 0.25em; }

fieldset {
  padding-top: 0.25em;
  padding-left: 0.5em;
  border-color: #dedede;
  border-radius: 0.125em; }

h1 {
  font-size: 26px;
  font-size: 1.625rem;
  line-height: 1.84615; }

h2 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

h3 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

h4 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
a {
  color: #169bd5;
  touch-action: manipulation;
  /* [1] */ }
  a:hover, a:focus, a:active {
    color: #1278a4; }

/**
 * 1. Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0;
  /* [1] */ }

/**
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
  /* [1] */
  max-width: 100%;
  min-height: 100%;
  /* [3] */
  overflow-x: hidden;
  overflow-y: scroll;
  /* [2] */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  color: black;
  -ms-text-size-adjust: 100%;
  /* [4] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */
  background-color: #efeeec; }

q {
  font-style: italic;
  quotes: "“" "”"; }
  q::before {
    content: open-quote; }
  q::after {
    content: close-quote; }

blockquote {
  position: relative;
  margin: 2em 1em;
  padding: 1em 4em;
  font-style: italic;
  background: white;
  border-left: 0.5em solid #dedede;
  quotes: "“" "”"; }
  blockquote p::before {
    font-size: 72px;
    font-size: 4.5rem;
    line-height: 1;
    position: absolute;
    top: 0;
    left: 0.25em;
    font-weight: normal;
    color: #dedede;
    content: open-quote; }
  blockquote p::after {
    content: no-close-quote; }
  blockquote p:last-of-type {
    margin-bottom: 0; }
  blockquote small,
  blockquote footer {
    color: #3d3d3d; }
    blockquote small::before,
    blockquote footer::before {
      content: "—" " "; }

em {
  font-style: italic; }

small {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

mark {
  background-color: #ffffad; }

figure figcaption {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
  font-style: italic; }

hr {
  margin-top: 2em;
  margin-bottom: 2em;
  border: none;
  border-bottom: 0.0625em solid #dedede; }

dl dt {
  font-weight: bold; }

dl dd {
  margin-left: 1em; }
  dl dd::before {
    content: "–" " "; }

/**
 * Block object
 */
.block {
  display: block;
  background-color: white; }

/**
 * 1. Eliminate whitespace around images.
 */
.block__img {
  margin-bottom: 1em;
  vertical-align: middle;
  /* [1] */
  /**
         * No space between the image and the text content.
         */ }
  .block--flush > .block__img {
    margin-bottom: 0; }

/**
 * Text-content.
 */
.block__body {
  display: block; }

/**
 * Box object
 *
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.box {
  display: block;
  /* [1] */
  padding: 1em;
  background-color: white; }
  .box > :last-child {
    margin-bottom: 0; }

/**
     * Flush (i.e. no padding) box.
     */
.box--flush {
  padding: 0; }

/**
     * Full width box box.
     */
.box--full {
  width: 100%; }

/**
     * Large box.
     */
.box--large {
  padding: 2em; }

/**
     * Center-aligned blocks.
     */
.box--center {
  text-align: center; }

/**
     * Bordered blocks.
     */
.box--border {
  border: 1px solid black; }

/**
 * Button object
 *
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn {
  display: inline-block;
  /* [1] */
  padding: 0.5em 2em;
  /* [7] */
  margin: 0;
  /* [4] */
  overflow: visible;
  /* [6] */
  color: white;
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  text-decoration: none;
  /* [4] */
  background-color: #169bd5;
  vertical-align: middle;
  /* [2] */
  cursor: pointer;
  /* [5] */
  border: none;
  /* [4] */
  border-radius: 0.125em; }
  .btn:hover, .btn:focus, .btn:active {
    color: white;
    text-decoration: underline; }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner {
  padding: 0;
  border: 0; }

/**
     * Full-width buttons.
     */
.btn--full {
  width: 100%; }

/**
     * Secondary button
     */
.btn--secondary, .btn--secondary:hover, .btn--secondary:focus, .btn--secondary:active {
  color: black;
  background-color: #dedede;
  border-color: #dedede; }

.dialog[aria-hidden="true"] {
  display: none; }

.dialog__overlay {
  z-index: 2000;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background-color: rgba(43, 46, 56, 0.9); }

.dialog__content {
  z-index: 2010;
  position: fixed;
  top: 50%;
  left: 50%;
  width: 60%;
  padding: 1em;
  background-color: white;
  border-radius: 0.125em;
  transform: translate(-50%, -50%); }

.dialog__close {
  font-size: 22px;
  font-size: 1.375rem;
  position: absolute;
  top: 0.5em;
  right: 0.5em;
  font-weight: bold;
  text-align: center;
  background-color: transparent;
  border: 0;
  transition: .15s;
  cursor: pointer; }

/**
     * Flush (i.e. no padding) dialog.
     */
.dialog--flush .dialog__content {
  padding: 0; }

/**
     * Large dialog.
     */
.dialog--large .dialog__content {
  padding: 2em; }

/**
     * Narrow dialog.
     */
.dialog--narrow .dialog__content {
  width: 40%; }

/**
     * Wide dialog.
     */
.dialog--wide .dialog__content {
  width: 80%; }

/**
 * Flag object
 *
 * 1. Allows us to control vertical alignments
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.flag {
  display: table;
  /* [1] */
  width: 100%;
  /* [2] */ }

/**
 * 1. Default to aligning content to their middles.
 */
.flag__img,
.flag__body {
  display: table-cell;
  vertical-align: middle;
  /* [1] */ }

/**
 * Flag images have a space between them and the body of the object.
 */
.flag__img {
  padding-right: 1em; }
  .flag__img > img {
    display: block;
    max-width: none; }

/**
 * 1. Forces the `.flag__body` to take up all remaining space.
 */
.flag__body {
  width: 100%;
  /* [1] */ }
  .flag__body,
  .flag__body > :last-child {
    margin-bottom: 0; }

/**
 * Form object
 */
.form {
  padding: 1em;
  background-color: #dedede; }

/**
 * Heading 1 corresponding class
 */
.alpha {
  font-size: 26px;
  font-size: 1.625rem;
  line-height: 1.84615; }

/**
 * Heading 2 corresponding class
 */
.beta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }

/**
 * Heading 3 corresponding class
 */
.gamma {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/**
 * Heading 4 corresponding class
 */
.delta {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }

/**
 * Heading 5 corresponding class
 */
.epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }

/**
 * Heading 6 corresponding class
 */
.zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * Begin a layout group.
 * 1. Remove whitespace between child element.
 */
.layout {
  margin: 0;
  padding: 0;
  margin-left: -1rem;
  font-size: 0;
  /* [1] */
  list-style: none; }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Restore font-size from 0 to `$base-font-size`.
 */
.layout__item {
  font-size: 16px;
  font-size: 1rem;
  /* [5] */
  display: inline-block;
  /* [1] */
  width: 100%;
  /* [4] */
  padding-left: 1rem;
  /* [2] */
  margin-bottom: 1rem;
  vertical-align: top;
  /* [3] */ }

/**
     * Layouts with small gutters.
     */
.layout--small {
  margin-left: -0.5rem; }
  .layout--small > .layout__item {
    padding-left: 0.5rem;
    margin-bottom: 0.5rem; }

/**
     * Layouts with large gutters.
     */
.layout--large {
  margin-left: -2rem; }
  .layout--large > .layout__item {
    padding-left: 2rem;
    margin-bottom: 2rem; }

/**
     * Cause layout items to fill the vertical space of parent layout
     */
.layout--flex {
  display: flex;
  flex-wrap: wrap; }
  .layout--flex > .layout__item {
    display: flex; }

/**
 * Bare list object
 */
.list-bare {
  margin: 0;
  padding: 0;
  list-style: none; }

/**
 * List-block object
 */
.list-block {
  margin: 0;
  padding: 0;
  list-style: none; }

.list-block__item,
.list-block > li {
  padding: 1em; }

/**
 * List-inline object
 */
.list-inline,
.paging__list,
.main-nav__list {
  margin: 0;
  padding: 0;
  list-style: none; }
  .list-inline > li, .paging__list > li, .main-nav__list > li {
    display: inline-block; }

/**
     * Comma delimited list to semantically mark up lists of tags, etc.
     *
     * N.B. This component requires that you remove the whitespace between LIs.
     *      The simplest (and valid) way to achieve this is by omitting the
     *      closing `</li>` tag.
     */
.list-inline--delimited > li + li::before {
  content: " | "; }

/**
 * List-UI object
 */
.list-ui,
.list-ui__item,
.list-ui > li {
  border: 0 solid #dedede; }

.list-ui {
  margin: 0;
  padding: 0;
  border-top-width: 0.0625em;
  list-style: none; }

.list-ui__item,
.list-ui > li {
  padding: 1em;
  border-bottom-width: 0.0625em; }

/**
 * Media object
 */
.media {
  display: block; }

.media__img {
  float: left;
  max-width: 60%;
  margin-right: 1em; }
  .media__img > img {
    display: block; }

.media__body {
  overflow: hidden;
  display: block; }
  .media__body,
  .media__body > :last-child {
    margin-bottom: 0; }

/**
     * Responsive media objects.
     *
     * There is a very pragmatic, simple implementation of a responsive media
     * object, which simply places the text-content beneath the image-content.
     *
     * We use a `max-width` media query because:
     *
     * a) it is the least verbose method in terms of amount of code required.
     * b) the media object’s default state is image-next-to-text, so its stacked
     *    state is the exception, rather than the rule.
     */
@media screen and (max-width: 768px) {
  .media--responsive {
    /**
             * Rework the spacings on regular media objects.
             */ }
    .media--responsive > .media__img {
      float: none;
      width: 100%;
      max-width: none;
      margin-right: 0;
      margin-bottom: 1em;
      margin-left: 0; } }

/**
 * Pack object
 *
 * 1. Fill all available space.
 * 2. Cause children to be automatically equally sized.
 */
.pack {
  width: 100%;
  /* [1] */
  display: table;
  table-layout: fixed;
  /* [2] */ }

/**
 * Cause children to adopt table-like structure.
 */
.pack__item {
  display: table-cell; }

/**
 * Paging object
 */
.paging {
  padding-top: 2em;
  padding-bottom: 2em; }

.paging__list {
  display: inline-block; }

.paging__link {
  display: block;
  padding: 0.5em 1em; }
  .paging__link.is-active, .paging__link.is-active:hover, .paging__link.is-active:focus, .paging__link.is-active:active {
    color: black; }

/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger: http://en.wikipedia.org/wiki/Lede_(news)
 *
 * 1. Sequences of whitespace will collapse into a single whitespace.
 *    Text will wrap when necessary, and on line breaks. This is a fix to
 *    enable line breaks in long string properties in EPiServer.
 */
.lead {
  font-size: 19.2px;
  font-size: 1.2rem;
  line-height: inherit;
  white-space: pre-line;
  /* [1] */ }

/**
 * The `.preline` class is used to create line breaks in EPiServer string properties.
 *
 * 1. Sequences of whitespace will collapse into a single whitespace.
 *    Text will wrap when necessary, and on line breaks. This is a fix to
 *    enable line breaks in long string properties in EPiServer.
 */
.preline {
  white-space: pre-line;
  /* [1] */ }

/**
 * Table object
 */
.table {
  width: 100%; }

/**
 * Tabs object
 *
 * 1. Reset any residual styles (most likely from lists).
 * 2. Tables for layout!
 * 3. Force all `table-cell` children to have equal widths.
 * 4. Force the object to be the full width of its parent. Combined with [2],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.tabs {
  display: table;
  /* [2] */
  width: 100%;
  /* [4] */
  margin: 0;
  /* [1] */
  padding: 0;
  /* [1] */
  text-align: center;
  table-layout: fixed;
  /* [3] */
  list-style: none;
  /* [1] */ }

.tabs__item {
  display: table-cell;
  /* [2] */ }

.tabs__link {
  display: block; }

/**
 * Wrapper object
 */
.wrapper {
  width: 100%;
  padding: 1em;
  margin-left: auto;
  margin-right: auto; }
  @media screen and (min-width: 48em) {
    .wrapper {
      width: 47em; } }
  @media screen and (min-width: 64em) {
    .wrapper {
      width: 63em; } }
  @media screen and (min-width: 75em) {
    .wrapper {
      width: 74em; } }

/**
 * Cookie information component
 */
.cookie-information {
  display: none;
  width: 100%;
  font-weight: normal;
  color: white;
  background-color: #3d3d3d;
  border-bottom: 0.0625em solid gray; }

.cookie-information__link, .cookie-information__link:hover, .cookie-information__link:focus, .cookie-information__link:active {
  color: white;
  text-decoration: underline;
  font-weight: normal; }

.cookie-information__button {
  display: block;
  width: 100%;
  white-space: nowrap; }
  @media screen and (min-width: 48em) {
    .cookie-information__button {
      display: inline-block;
      width: auto; } }

@media screen and (min-width: 48em) {
  .cookie-information__flag-body {
    padding-left: 4em;
    padding-right: 4em; } }

.cookie-information__flag-img {
  margin-top: 1em; }

.flickity-enabled {
  position: relative; }

.flickity-enabled:focus {
  outline: none; }

.flickity-viewport {
  position: relative;
  height: 100%;
  overflow: hidden; }

.flickity-slider {
  position: absolute;
  width: 100%;
  height: 100%; }

/* draggable */
.flickity-enabled.is-draggable {
  tap-highlight-color: transparent;
  user-select: none; }

.flickity-enabled.is-draggable .flickity-viewport {
  cursor: move;
  cursor: -webkit-grab;
  cursor: grab; }

.flickity-enabled.is-draggable .flickity-viewport.is-pointer-down {
  cursor: -webkit-grabbing;
  cursor: grabbing; }

/* ---- previous/next buttons ---- */
.flickity-prev-next-button {
  position: absolute;
  top: 50%;
  width: 44px;
  height: 44px;
  border: none;
  border-radius: 50%;
  background: white;
  background: rgba(255, 255, 255, 0.75);
  transform: translateY(-50%);
  /* vertically center */
  cursor: pointer; }

.flickity-prev-next-button:hover {
  background: white; }

.flickity-prev-next-button:focus {
  outline: none;
  box-shadow: 0 0 0 5px #09f; }

.flickity-prev-next-button:active {
  filter: alpha(opacity=60);
  /* IE8 */
  opacity: .6; }

.flickity-prev-next-button.previous {
  left: 10px; }

.flickity-prev-next-button.next {
  right: 10px; }

/* right to left */
.flickity-rtl .flickity-prev-next-button.previous {
  left: auto;
  right: 10px; }

.flickity-rtl .flickity-prev-next-button.next {
  right: auto;
  left: 10px; }

.flickity-prev-next-button:disabled {
  filter: alpha(opacity=30);
  /* IE8 */
  opacity: .3;
  cursor: auto; }

.flickity-prev-next-button svg {
  position: absolute;
  left: 20%;
  top: 20%;
  width: 60%;
  height: 60%; }

.flickity-prev-next-button .arrow {
  fill: #333; }

/* color & size if no SVG - IE8 and Android 2.3 */
.flickity-prev-next-button.no-svg {
  color: #333;
  font-size: 26px; }

/* ---- page dots ---- */
.flickity-page-dots {
  position: absolute;
  bottom: -25px;
  width: 100%;
  padding: 0;
  margin: 0;
  text-align: center;
  line-height: 1;
  list-style: none; }

.flickity-rtl .flickity-page-dots {
  direction: rtl; }

.flickity-page-dots .dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin: 0 8px;
  background: #333;
  border-radius: 50%;
  filter: alpha(opacity=25);
  /* IE8 */
  opacity: .25;
  cursor: pointer; }

.flickity-page-dots .dot.is-selected {
  filter: alpha(opacity=100);
  /* IE8 */
  opacity: 1; }

/**
 * Main navigation component
 */
.main-nav {
  color: black; }

.main-nav__logo {
  height: 1.875em; }

.main-nav__list {
  float: right; }

.main-nav__item:not(:first-child) {
  margin-left: 1em; }

.main-nav__link {
  text-decoration: none; }

.main-nav__external-link-icon {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * Page footer component
 */
.page-footer {
  padding: 1em;
  color: white;
  background-color: #efeeec; }

/**
 * Page header component
 */
.page-header {
  background-color: white; }

/**
 * Micro clearfix
 * http://css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix::after,
.box::after,
.media::after {
  clear: both;
  display: table;
  content: ""; }

/**
 * Hide Live Monitor tracking image to remove bottom margin on page
 */
#LiveMonTransparentImage,
body > noscript {
  display: none; }

/**
 * Utility class for hiding elements.
 * Extend the class with Sass to avoid the `.u-hide` class appearing
 * over and over in your markup.
 */

.u-hide {
  display: none !important; }

@media screen and (min-width: 48em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-tablet {
    display: none !important; } }

@media screen and (min-width: 64em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-laptop {
    display: none !important; } }

@media screen and (min-width: 75em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-desktop {
    display: none !important; } }

/**
 * Only display content to screen readers
 * See: http://a11yproject.com/posts/how-to-hide-content/
 */
.sr-only {
  position: absolute;
  width: 0.0625em;
  height: 0.0625em;
  margin: -em(1px);
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-1\/3 {
  width: 33.33333% !important; }

.u-2\/3 {
  width: 66.66667% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

@media screen and (min-width: 48em) {
  .u-1\/1-tablet {
    width: 100% !important; }
  .u-1\/2-tablet {
    width: 50% !important; }
  .u-1\/3-tablet {
    width: 33.33333% !important; }
  .u-2\/3-tablet {
    width: 66.66667% !important; }
  .u-1\/4-tablet {
    width: 25% !important; }
  .u-2\/4-tablet {
    width: 50% !important; }
  .u-3\/4-tablet {
    width: 75% !important; }
  .u-1\/5-tablet {
    width: 20% !important; }
  .u-2\/5-tablet {
    width: 40% !important; }
  .u-3\/5-tablet {
    width: 60% !important; }
  .u-4\/5-tablet {
    width: 80% !important; } }

@media screen and (min-width: 64em) {
  .u-1\/1-laptop {
    width: 100% !important; }
  .u-1\/2-laptop {
    width: 50% !important; }
  .u-1\/3-laptop {
    width: 33.33333% !important; }
  .u-2\/3-laptop {
    width: 66.66667% !important; }
  .u-1\/4-laptop {
    width: 25% !important; }
  .u-2\/4-laptop {
    width: 50% !important; }
  .u-3\/4-laptop {
    width: 75% !important; }
  .u-1\/5-laptop {
    width: 20% !important; }
  .u-2\/5-laptop {
    width: 40% !important; }
  .u-3\/5-laptop {
    width: 60% !important; }
  .u-4\/5-laptop {
    width: 80% !important; } }

@media screen and (min-width: 75em) {
  .u-1\/1-desktop {
    width: 100% !important; }
  .u-1\/2-desktop {
    width: 50% !important; }
  .u-1\/3-desktop {
    width: 33.33333% !important; }
  .u-2\/3-desktop {
    width: 66.66667% !important; }
  .u-1\/4-desktop {
    width: 25% !important; }
  .u-2\/4-desktop {
    width: 50% !important; }
  .u-3\/4-desktop {
    width: 75% !important; }
  .u-1\/5-desktop {
    width: 20% !important; }
  .u-2\/5-desktop {
    width: 40% !important; }
  .u-3\/5-desktop {
    width: 60% !important; }
  .u-4\/5-desktop {
    width: 80% !important; } }

/**
 * Print styles
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css
 * Inlined to avoid the additional HTTP request: h5bp.com/r
 */
@media print {
  *,
  *::before,
  *::after,
  *::first-letter,
  *::first-line {
    color: #000 !important;
    /* Black prints faster: http://www.sanbeiji.com/archives/953 */
    text-shadow: none !important;
    background: transparent !important;
    box-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]::after {
    content: " (" attr(href) ")"; }
  abbr[title]::after {
    content: " (" attr(title) ")"; }
  /**
     * Don't show links that are fragment identifiers,
     * or use the `javascript:` pseudo protocol
     */
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: ""; }
  pre,
  blockquote {
    border: 0.0625em solid #999;
    page-break-inside: avoid; }
  /**
     * Printing Tables:
     * http://css-discuss.incutio.com/wiki/Printing_Tables
     */
  thead {
    display: table-header-group; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; }
  /**
     * Project specific print modifications
     */
  .page-header,
  .page-footer,
  #epi-quickNavigator {
    display: none !important; }
  .collapse__target {
    display: block !important; }
  .collapse__control,
  .collapse__content {
    padding-left: 0;
    padding-right: 0; } }

/*# sourceMappingURL=data:application/json;base64, */
