@charset "UTF-8";
/* ‘ */
/* ’ */
/* “ */
/* ” */
/* — */
/* – */
/* | */
/*   */
/* ✖ */
/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
/*
The `retina-sprite` mixin sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

$icon-home-group: ('icon-home', $icon-home, $icon-home-2x, );

.icon-home {
  @include retina-sprite($icon-home-group);
}
*/
/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
/*
The `retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in SCSS

@include retina-sprites($retina-groups);
*/
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * 1. Remove gaps in links underline in iOS 8+ and Safari 8+.
 * 2. Remove the gray background on active links in IE 10.
 */
a {
  -webkit-text-decoration-skip: objects;
  /* 1 */
  background-color: transparent;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 * 2. Remove the bottom border in Firefox 39-.
 */
abbr[title] {
  text-decoration: underline;
  /* 1 */
  text-decoration: underline dotted;
  /* 1 */
  border-bottom: none;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  margin: .67em 0;
  font-size: 2em; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  color: #000;
  background-color: #ff0; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  position: relative;
  font-size: 75%;
  line-height: 0;
  vertical-align: baseline; }

sub {
  bottom: -.25em; }

sup {
  top: -.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * 1. Remove the margin in Firefox and Safari.
 * 2. Change font properties to `inherit` in all browsers (opinionated).
 */
button,
input,
select,
textarea {
  margin: 0;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  padding: 0;
  border-style: none; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  margin: 0 2px;
  padding: .35em .625em .75em;
  border: 1px solid #c0c0c0; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  display: table;
  /* 1 */
  box-sizing: border-box;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
  color: inherit;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: .54; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * As well as using normalize.css, it is often advantageous to remove all margins from certain elements.
 */
body,
h1,
h2,
h3,
h4,
h5,
h6,
p,
blockquote,
pre,
dl,
dd,
ol,
ul,
form,
fieldset,
legend,
figure,
table,
th,
td,
caption,
hr {
  margin: 0;
  padding: 0; }

/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title],
dfn[title] {
  cursor: help; }

/**
 * Remove underlines from potentially troublesome elements.
 */
u,
ins {
  text-decoration: none; }

/**
 * Apply faux underlines to inserted text via `border-bottom`.
 */
ins {
  border-bottom: 1px solid; }

html {
  box-sizing: border-box; }

*, *::before, *::after {
  box-sizing: inherit; }

/**
 * Set custom outline color for all elements
 */
* {
  outline-color: #991f3d; }

/**
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * http://csswizardry.com/2012/06/single-direction-margin-declarations
 */
h1,
h2,
h3,
h4,
h5,
h6,
ul,
ol,
dl,
blockquote,
p,
address,
hr,
table,
fieldset,
figure,
pre {
  margin-bottom: 1em; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul,
ol,
dd {
  margin-left: 2em; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
button,
input[type="button"] {
  touch-action: manipulation;
  /* [1] */ }

code,
kbd,
samp,
pre {
  font-family: Inconsolata, Monaco, Consolas, "Andale Mono", "Bitstream Vera Sans Mono", "Courier New", Courier, monospace;
  font-style: normal;
  border-radius: 0.125em; }

code,
kbd {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
  padding: 0.125em 0.25em; }

code {
  color: #991f3d;
  background-color: #dedede; }

kbd {
  color: white;
  background-color: #3d3d3d; }

pre {
  padding: 0.5em;
  overflow: auto;
  color: #3d3d3d;
  white-space: pre;
  word-wrap: normal;
  background-color: #dedede; }
  pre code,
  pre kbd {
    padding: 0; }

samp {
  color: #3d3d3d;
  background-color: white; }

var {
  color: #3d3d3d;
  background-color: white; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
input,
select,
textarea,
label {
  touch-action: manipulation;
  /* [1] */ }

input[type=text],
input[type=password],
input[type=select],
input[type=color],
input[type=date],
input[type=datetime],
input[type=email],
input[type=month],
input[type=number],
input[type=range],
input[type=search],
input[type=tel],
input[type=time],
input[type=url],
input[type=week],
textarea,
select {
  display: block;
  width: 100%;
  padding: 0.25em;
  margin-bottom: 0.5em;
  color: #3d3d3d;
  background-color: white;
  border: 0.0625em solid #dedede;
  border-radius: 0.125em;
  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s; }
  input[type=text]:focus,
  input[type=password]:focus,
  input[type=select]:focus,
  input[type=color]:focus,
  input[type=date]:focus,
  input[type=datetime]:focus,
  input[type=email]:focus,
  input[type=month]:focus,
  input[type=number]:focus,
  input[type=range]:focus,
  input[type=search]:focus,
  input[type=tel]:focus,
  input[type=time]:focus,
  input[type=url]:focus,
  input[type=week]:focus,
  textarea:focus,
  select:focus {
    border-color: #dedede; }

input[type=checkbox],
input[type=radio] {
  margin-bottom: 0.5em;
  margin-right: 0.25em; }

label {
  display: inline-block;
  margin-bottom: 0.25em; }

fieldset {
  padding-top: 0.25em;
  padding-left: 0.5em;
  border-color: #dedede;
  border-radius: 0.125em; }

h1 {
  font-size: 26px;
  font-size: 1.625rem;
  line-height: 1.84615; }
  @media screen and (min-width: 48em) {
    h1 {
      font-size: 36px;
      font-size: 2.25rem;
      line-height: 1.33333; } }

h2 {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }
  @media screen and (min-width: 48em) {
    h2 {
      font-size: 22px;
      font-size: 1.375rem;
      line-height: 1.09091; } }

h3 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }
  @media screen and (min-width: 48em) {
    h3 {
      font-size: 20px;
      font-size: 1.25rem;
      line-height: 1.2; } }

h4 {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }
  @media screen and (min-width: 48em) {
    h4 {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333; } }

h5 {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }
  @media screen and (min-width: 48em) {
    h5 {
      font-size: 16px;
      font-size: 1rem;
      line-height: 1.5; } }

h6 {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }
  @media screen and (min-width: 48em) {
    h6 {
      font-size: 14px;
      font-size: 0.875rem;
      line-height: 1.71429; } }

/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  max-width: none; }

/*
 * 1. Prevent touch delay on touch devices (https://adactio.com/journal/10019)
 */
a {
  color: #991f3d;
  touch-action: manipulation;
  /* [1] */ }
  a:hover, a:focus, a:active {
    color: #761930; }

/**
 * 1. Remove extra vertical spacing when nesting lists.
 */
li > ul,
li > ol {
  margin-bottom: 0;
  /* [1] */ }

/**
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in ems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent certain mobile browsers from automatically zooming fonts.
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 */
html {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5;
  /* [1] */
  max-width: 100%;
  min-height: 100%;
  /* [3] */
  overflow-x: hidden;
  overflow-y: scroll;
  /* [2] */
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
  color: black;
  -ms-text-size-adjust: 100%;
  /* [4] */
  -webkit-text-size-adjust: 100%;
  /* [4] */
  -moz-osx-font-smoothing: grayscale;
  /* [5] */
  -webkit-font-smoothing: antialiased;
  /* [5] */
  background-color: white; }

q {
  font-style: italic;
  quotes: "“" "”"; }
  q::before {
    content: open-quote; }
  q::after {
    content: close-quote; }

blockquote {
  position: relative;
  margin: 2em 1em;
  padding: 1em 4em;
  font-style: italic;
  background: white;
  border-left: 0.5em solid #dedede;
  quotes: "“" "”"; }
  blockquote p::before {
    font-size: 72px;
    font-size: 4.5rem;
    line-height: 1;
    position: absolute;
    top: 0;
    left: 0.25em;
    font-weight: normal;
    color: #dedede;
    content: open-quote; }
  blockquote p::after {
    content: no-close-quote; }
  blockquote p:last-of-type {
    margin-bottom: 0; }
  blockquote small,
  blockquote footer {
    color: #3d3d3d; }
    blockquote small::before,
    blockquote footer::before {
      content: "—" " "; }

em {
  font-style: italic; }

small {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

mark {
  background-color: #ffffad; }

figure figcaption {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429;
  font-style: italic; }

hr {
  margin-top: 2em;
  margin-bottom: 2em;
  border: none;
  border-bottom: 0.0625em solid #dedede; }

dl dt {
  font-weight: bold; }

dl dd {
  margin-left: 1em; }
  dl dd::before {
    content: "–" " "; }

/**
 * Block object
 */
.block {
  display: block; }

/**
 * 1. Eliminate whitespace around images.
 */
.block__img {
  margin-bottom: 1em;
  vertical-align: middle;
  /* [1] */ }

/**
 * Text-content.
 */
.block__body {
  display: block; }

/**
 * Box object
 *
 * 1. So we can apply the `.box` class to naturally-inline elements.
 */
.box {
  display: block;
  /* [1] */
  padding: 1em; }
  .box > :last-child {
    margin-bottom: 0; }

/**
 * Button object
 *
 * 1. Allow us to style box model properties.
 * 2. Line different sized buttons up a little nicer.
 * 3. Make buttons inherit font styles (often necessary when styling `input`s as
 *    buttons).
 * 4. Reset/normalize some styles.
 * 5. Force all button-styled elements to appear clickable.
 * 6. Fixes odd inner spacing in IE7.
 * 7. Subtract the border size from the padding value so that buttons do not
 *    grow larger as we add borders.
 */
.btn,
.FormSubmitButton,
.FormResetButton {
  display: inline-block;
  /* [1] */
  padding: 0.5em 2em;
  /* [7] */
  margin: 0;
  /* [4] */
  overflow: visible;
  /* [6] */
  color: white;
  font: inherit;
  /* [3] */
  text-align: center;
  /* [4] */
  text-decoration: none;
  /* [4] */
  background-color: #991f3d;
  vertical-align: middle;
  /* [2] */
  cursor: pointer;
  /* [5] */
  border: none;
  /* [4] */
  border-radius: 0.125em; }
  .btn:hover, .btn:focus, .btn:active,
  .FormSubmitButton:hover,
  .FormResetButton:hover,
  .FormSubmitButton:focus,
  .FormResetButton:focus,
  .FormSubmitButton:active,
  .FormResetButton:active {
    color: white;
    text-decoration: underline; }

/**
 * Fix a Firefox bug whereby `input type="submit"` gains 2px extra padding.
 */
.btn::-moz-focus-inner,
.FormSubmitButton::-moz-focus-inner,
.FormResetButton::-moz-focus-inner {
  padding: 0;
  border: 0; }

/**
     * Full-width buttons.
     */
.btn--full {
  width: 100%; }

/**
 * Flag object
 *
 * 1. Allows us to control vertical alignments
 * 2. Force the object to be the full width of its parent. Combined with [1],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.flag {
  display: table;
  /* [1] */
  width: 100%;
  /* [2] */ }

/**
 * 1. Default to aligning content to their middles.
 */
.flag__img,
.flag__body {
  display: table-cell;
  vertical-align: middle;
  /* [1] */ }

/**
 * Flag images have a space between them and the body of the object.
 */
.flag__img {
  padding-right: 1em; }
  .flag__img > img {
    display: block;
    max-width: none; }

/**
 * 1. Forces the `.flag__body` to take up all remaining space.
 */
.flag__body {
  width: 100%;
  /* [1] */ }
  .flag__body,
  .flag__body > :last-child {
    margin-bottom: 0; }

/**
 * Form object
 */
.form {
  padding: 1em;
  background-color: #dedede; }

/**
 * Heading 1 corresponding class
 */
.alpha {
  font-size: 26px;
  font-size: 1.625rem;
  line-height: 1.84615; }
  @media screen and (min-width: 48em) {
    .alpha {
      font-size: 36px;
      font-size: 2.25rem;
      line-height: 1.33333; } }

/**
 * Heading 2 corresponding class
 */
.beta {
  font-size: 20px;
  font-size: 1.25rem;
  line-height: 1.2; }
  @media screen and (min-width: 48em) {
    .beta {
      font-size: 22px;
      font-size: 1.375rem;
      line-height: 1.09091; } }

/**
 * Heading 3 corresponding class
 */
.gamma {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }
  @media screen and (min-width: 48em) {
    .gamma {
      font-size: 20px;
      font-size: 1.25rem;
      line-height: 1.2; } }

/**
 * Heading 4 corresponding class
 */
.delta {
  font-size: 18px;
  font-size: 1.125rem;
  line-height: 1.33333; }
  @media screen and (min-width: 48em) {
    .delta {
      font-size: 18px;
      font-size: 1.125rem;
      line-height: 1.33333; } }

/**
 * Heading 5 corresponding class
 */
.epsilon {
  font-size: 16px;
  font-size: 1rem;
  line-height: 1.5; }
  @media screen and (min-width: 48em) {
    .epsilon {
      font-size: 16px;
      font-size: 1rem;
      line-height: 1.5; } }

/**
 * Heading 6 corresponding class
 */
.zeta {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }
  @media screen and (min-width: 48em) {
    .zeta {
      font-size: 14px;
      font-size: 0.875rem;
      line-height: 1.71429; } }

/**
 * Begin a layout group.
 * 1. Remove whitespace between child element.
 */
.layout {
  margin: 0;
  padding: 0;
  margin-left: -1rem;
  margin-bottom: 1rem;
  font-size: 0;
  /* [1] */
  list-style: none; }

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Restore font-size from 0 to `$base-font-size`.
 */
.layout__item {
  font-size: 16px;
  font-size: 1rem;
  /* [5] */
  display: inline-block;
  /* [1] */
  width: 100%;
  /* [4] */
  padding-left: 1rem;
  /* [2] */
  vertical-align: top;
  /* [3] */ }

/**
 * Bare list object
 */
.list-bare {
  margin: 0;
  padding: 0;
  list-style: none; }

/**
 * List-block object
 */
.list-block {
  margin: 0;
  padding: 0;
  list-style: none; }

.list-block__item,
.list-block > li {
  padding: 1em; }

/**
 * List-inline object
 */
.list-inline,
.paging__list,
.main-nav__list {
  margin: 0;
  padding: 0;
  list-style: none; }
  .list-inline > li, .paging__list > li, .main-nav__list > li {
    display: inline-block; }

/**
     * Comma delimited list to semantically mark up lists of tags, etc.
     *
     * N.B. This component requires that you remove the whitespace between LIs.
     *      The simplest (and valid) way to achieve this is by omitting the
     *      closing `</li>` tag.
     */
.list-inline--delimited > li + li::before {
  content: " | "; }

/**
 * List-UI object
 */
.list-ui,
.list-ui__item,
.list-ui > li {
  border: 0 solid #dedede; }

.list-ui {
  margin: 0;
  padding: 0;
  border-top-width: 0.0625em;
  list-style: none; }

.list-ui__item,
.list-ui > li {
  padding: 1em;
  border-bottom-width: 0.0625em; }

/**
 * Media object
 */
.media {
  display: block; }

.media__img {
  float: left;
  margin-right: 1em; }
  .media__img > img {
    display: block; }

.media__body {
  overflow: hidden;
  display: block; }
  .media__body,
  .media__body > :last-child {
    margin-bottom: 0; }

/**
 * Pack object
 *
 * 1. Fill all available space.
 * 2. Cause children to be automatically equally sized.
 */
.pack {
  width: 100%;
  /* [1] */
  display: table;
  table-layout: fixed;
  /* [2] */ }

/**
 * Cause children to adopt table-like structure.
 */
.pack__item {
  display: table-cell; }

/**
 * Paging object
 */
.paging {
  padding-top: 2em;
  padding-bottom: 2em; }

.paging__list {
  display: inline-block; }

.paging__link {
  display: block;
  padding: 0.5em 1em; }
  .paging__link.is-active, .paging__link.is-active:hover, .paging__link.is-active:focus, .paging__link.is-active:active {
    color: black; }

/**
 * The `.lede` class is used to make the introductory text (usually a paragraph)
 * of a document slightly larger: http://en.wikipedia.org/wiki/Lede_(news)
 *
 * 1. Sequences of whitespace will collapse into a single whitespace.
 *    Text will wrap when necessary, and on line breaks. This is a fix to
 *    enable line breaks in long string properties in EPiServer.
 */
.lead {
  font-size: 19.2px;
  font-size: 1.2rem;
  line-height: inherit;
  white-space: pre-line;
  /* [1] */ }

/**
 * The `.preline` class is used to create line breaks in EPiServer string properties.
 *
 * 1. Sequences of whitespace will collapse into a single whitespace.
 *    Text will wrap when necessary, and on line breaks. This is a fix to
 *    enable line breaks in long string properties in EPiServer.
 */
.preline {
  white-space: pre-line;
  /* [1] */ }

/**
 * Table object
 */
.table {
  width: 100%; }

/**
     * Add borders around `table` cells.
     */
.table--cells th,
.table--cells td {
  border: 0.0625em solid #dedede; }

/**
 * Tabs object
 *
 * 1. Reset any residual styles (most likely from lists).
 * 2. Tables for layout!
 * 3. Force all `table-cell` children to have equal widths.
 * 4. Force the object to be the full width of its parent. Combined with [2],
 *    this makes the object behave in a quasi-`display: block;` manner.
 */
.tabs {
  display: table;
  /* [2] */
  width: 100%;
  /* [4] */
  margin: 0;
  /* [1] */
  padding: 0;
  /* [1] */
  text-align: center;
  table-layout: fixed;
  /* [3] */
  list-style: none;
  /* [1] */ }

.tabs__item {
  display: table-cell;
  /* [2] */ }

.tabs__link {
  display: block; }

/**
 * Wrapper object
 */
.wrapper {
  width: 100%;
  padding: 1em;
  margin-left: auto;
  margin-right: auto; }
  @media screen and (min-width: 48em) {
    .wrapper {
      width: 47em; } }
  @media screen and (min-width: 64em) {
    .wrapper {
      width: 63em; } }
  @media screen and (min-width: 75em) {
    .wrapper {
      width: 74em; } }

/**
 * Cookie information component
 */
.cookie-information {
  display: none;
  width: 100%;
  font-weight: normal;
  color: white;
  background-color: #3d3d3d;
  border-bottom: 0.0625em solid gray; }

.cookie-information__link, .cookie-information__link:hover, .cookie-information__link:focus, .cookie-information__link:active {
  color: white;
  text-decoration: underline;
  font-weight: normal; }

.cookie-information__button {
  display: block;
  width: 100%;
  white-space: nowrap; }
  @media screen and (min-width: 48em) {
    .cookie-information__button {
      display: inline-block;
      width: auto; } }

@media screen and (min-width: 48em) {
  .cookie-information__flag-body {
    padding-left: 4em;
    padding-right: 4em; } }

.cookie-information__flag-img {
  margin-top: 1em; }

/**
 * EPiServer forms component
 */
.EPiServerForms {
  padding: 1em;
  margin-top: 2em;
  background-color: #dedede;
  border-bottom: 0.125em solid #dedede; }
  @media screen and (min-width: 48em) {
    .EPiServerForms {
      padding-left: 2em;
      padding-right: 2em; } }

/**
 * EPiServer form title
 */
.Form__Title {
  text-align: center; }
  .Form__Title::after {
    display: block;
    width: 50%;
    height: 0.1875em;
    margin: 1em auto;
    background-color: #991f3d;
    border-bottom: 1px solid #dedede;
    content: ""; }

/**
 * EPiServer form warning message
 */
.Form__Warning__Message {
  color: inherit !important;
  background-color: #991f3d !important; }

/**
 * EPiServer form container
 */
.FormStep {
  margin-bottom: 0 !important;
  text-align: center !important; }

/**
 * EPiServer form group
 */
.Form__Element {
  width: 100%;
  margin-bottom: 1em !important;
  text-align: left; }
  @media screen and (min-width: 48em) {
    .Form__Element {
      display: table; } }

/**
 * EPiServer form label
 */
@media screen and (min-width: 48em) {
  .Form__Element__Caption {
    display: table-cell !important;
    width: 7.5em !important;
    max-width: 7.5em;
    padding-right: 1em;
    overflow: hidden;
    text-overflow: ellipsis; } }

/**
 * EPiServer form label for checkbox and radio
 */
.FormChoice label {
  display: block; }

/**
 * EPiServer form input
 */
@media screen and (min-width: 48em) {
  .FormTextbox__Input {
    display: table-cell !important; } }

/**
 * EPiServer form select option
 */
.FormSelection option {
  font-weight: inherit; }

/**
 * EPiServer form button
 */
.FormSubmitButton,
.FormResetButton {
  margin-top: 1em !important;
  text-align: center; }
  @media screen and (min-width: 48em) {
    .FormSubmitButton,
    .FormResetButton {
      display: inline-block;
      width: auto; } }
  .FormSubmitButton:disabled, .FormSubmitButton:disabled:hover, .FormSubmitButton:disabled:focus, .FormSubmitButton:disabled:active,
  .FormResetButton:disabled,
  .FormResetButton:disabled:hover,
  .FormResetButton:disabled:focus,
  .FormResetButton:disabled:active {
    text-decoration: none;
    background-color: #991f3d;
    cursor: not-allowed; }

/**
 * EPiServer form validation error
 */
.Form__Element__ValidationError {
  color: #991f3d !important;
  vertical-align: top; }

/**
 * EPiServer form hide
 */
.EPiServerForms .hide {
  display: none !important; }

/**
 * Main navigation component
 */
.main-nav {
  color: black; }

.main-nav__logo {
  height: 1.875em; }

.main-nav__list {
  float: right; }

.main-nav__item:not(:first-child) {
  margin-left: 1em; }

.main-nav__link {
  text-decoration: none; }

.main-nav__external-link-icon {
  font-size: 14px;
  font-size: 0.875rem;
  line-height: 1.71429; }

/**
 * Owl Carousel component
 *
 * 1. Position relative and z-index fix webkit rendering fonts issue.
 * 2. Fix for flashing background.
 */
.owl-carousel {
  position: relative;
  /* [1] */
  z-index: 1;
  /* [1] */
  display: none;
  width: 100%;
  margin-bottom: 1em;
  overflow: hidden;
  -webkit-tap-highlight-color: transparent; }
  .owl-carousel .owl-stage {
    position: relative;
    -ms-touch-action: pan-Y; }
  .owl-carousel .owl-stage::after {
    clear: both;
    display: block;
    height: 0;
    line-height: 0;
    visibility: hidden;
    content: "."; }
  .owl-carousel .owl-stage-outer {
    position: relative;
    overflow: hidden;
    -webkit-transform: translate3d(0, 0, 0);
    /* [2] */ }
  .owl-carousel .owl-item {
    position: relative;
    float: left;
    min-height: 0.0625em;
    -webkit-backface-visibility: hidden;
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none; }
  .owl-carousel .owl-item img {
    display: block;
    -webkit-transform-style: preserve-3d; }
  .owl-carousel .owl-nav.disabled,
  .owl-carousel .owl-dots.disabled {
    display: none; }
  .owl-carousel .owl-nav .owl-prev,
  .owl-carousel .owl-nav .owl-next,
  .owl-carousel .owl-dot {
    cursor: pointer;
    cursor: hand;
    user-select: none; }
  .owl-carousel.owl-loaded {
    display: block; }
  .owl-carousel.owl-loading {
    display: block;
    opacity: 0; }
  .owl-carousel.owl-hidden {
    opacity: 0; }
  .owl-carousel.owl-refresh .owl-item {
    display: none; }
  .owl-carousel.owl-drag .owl-item {
    user-select: none; }
  .owl-carousel.owl-grab {
    cursor: move;
    cursor: -webkit-grab;
    cursor: -o-grab;
    cursor: -ms-grab;
    cursor: grab; }
  .owl-carousel.owl-rtl {
    direction: rtl; }
  .owl-carousel.owl-rtl .owl-item {
    float: right; }

.owl-carousel .figure {
  margin-bottom: 0; }

.owl-theme .owl-nav {
  position: absolute;
  bottom: 10px;
  width: 100%;
  text-align: center;
  -webkit-tap-highlight-color: transparent; }
  .owl-theme .owl-nav [class*='owl-'] {
    font-size: 14px;
    font-size: 0.875rem;
    display: inline-block;
    width: 2em;
    height: 2em;
    margin: 0 2.5em;
    padding: 0.0625em;
    color: white;
    background: #3d3d3d;
    border-radius: 50%;
    opacity: 0.8;
    cursor: pointer; }
    .owl-theme .owl-nav [class*='owl-']:hover {
      color: white;
      text-decoration: none;
      background: #3d3d3d;
      opacity: 1; }
  .owl-theme .owl-nav .owl-prev {
    padding-right: 0.125em; }
  .owl-theme .owl-nav .owl-next {
    padding-left: 0.125em; }
  .owl-theme .owl-nav .disabled {
    opacity: 0.5;
    cursor: default; }

.owl-theme .owl-nav.disabled + .owl-dots {
  margin-top: 0.625em; }

.owl-theme .owl-dots {
  position: absolute;
  bottom: 0.75em;
  left: 50%;
  width: 5em;
  margin-left: -em(40px);
  text-align: center;
  -webkit-tap-highlight-color: transparent; }
  .owl-theme .owl-dots .owl-dot {
    display: inline-block;
    zoom: 1;
    *display: inline;
    opacity: 0.8; }
    .owl-theme .owl-dots .owl-dot span {
      display: block;
      width: 0.5em;
      height: 0.5em;
      margin: 0 0.1875em;
      background: #3d3d3d;
      -webkit-backface-visibility: visible;
      transition: opacity 200ms ease;
      border-radius: 50%; }
    .owl-theme .owl-dots .owl-dot.active span, .owl-theme .owl-dots .owl-dot:hover span {
      background: #991f3d; }

/**
 * Page footer component
 */
.page-footer {
  padding: 1em;
  color: white;
  background-color: #3d3d3d; }

/**
 * Page header component
 */
.page-header {
  background-color: white; }

/**
 * Micro clearfix
 * http://css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the class with Sass to avoid the `.clearfix` class appearing
 * over and over in your markup.
 */
.clearfix::after,
.box::after,
.media::after {
  clear: both;
  display: table;
  content: ""; }

/**
 * Hide Live Monitor tracking image to remove bottom margin on page
 */
#LiveMonTransparentImage,
body > noscript {
  display: none; }

/**
 * Utility class for hiding elements.
 * Extend the class with Sass to avoid the `.u-hide` class appearing
 * over and over in your markup.
 */

.u-hide {
  display: none !important; }

@media screen and (min-width: 48em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-tablet {
    display: none !important; } }

@media screen and (min-width: 64em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-laptop {
    display: none !important; } }

@media screen and (min-width: 75em) {
  /**
         * Hide elements on certain breakpoints based on your responsive settings.
         * Extend the class with Sass to avoid the `.u-hide-tablet` class or similar
         * appearing over and over in your markup.
         */
  
  .u-hide-desktop {
    display: none !important; } }

/**
 * Only display content to screen readers
 * See: http://a11yproject.com/posts/how-to-hide-content/
 */
.sr-only {
  position: absolute;
  width: 0.0625em;
  height: 0.0625em;
  margin: -em(1px);
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0; }

.u-1\/1 {
  width: 100% !important; }

.u-1\/2 {
  width: 50% !important; }

.u-1\/3 {
  width: 33.33333% !important; }

.u-2\/3 {
  width: 66.66667% !important; }

.u-1\/4 {
  width: 25% !important; }

.u-2\/4 {
  width: 50% !important; }

.u-3\/4 {
  width: 75% !important; }

.u-1\/5 {
  width: 20% !important; }

.u-2\/5 {
  width: 40% !important; }

.u-3\/5 {
  width: 60% !important; }

.u-4\/5 {
  width: 80% !important; }

.u-1\/6 {
  width: 16.66667% !important; }

.u-2\/6 {
  width: 33.33333% !important; }

.u-3\/6 {
  width: 50% !important; }

.u-4\/6 {
  width: 66.66667% !important; }

.u-5\/6 {
  width: 83.33333% !important; }

@media screen and (min-width: 48em) {
  .u-1\/1-tablet {
    width: 100% !important; }
  .u-1\/2-tablet {
    width: 50% !important; }
  .u-1\/3-tablet {
    width: 33.33333% !important; }
  .u-2\/3-tablet {
    width: 66.66667% !important; }
  .u-1\/4-tablet {
    width: 25% !important; }
  .u-2\/4-tablet {
    width: 50% !important; }
  .u-3\/4-tablet {
    width: 75% !important; }
  .u-1\/5-tablet {
    width: 20% !important; }
  .u-2\/5-tablet {
    width: 40% !important; }
  .u-3\/5-tablet {
    width: 60% !important; }
  .u-4\/5-tablet {
    width: 80% !important; }
  .u-1\/6-tablet {
    width: 16.66667% !important; }
  .u-2\/6-tablet {
    width: 33.33333% !important; }
  .u-3\/6-tablet {
    width: 50% !important; }
  .u-4\/6-tablet {
    width: 66.66667% !important; }
  .u-5\/6-tablet {
    width: 83.33333% !important; } }

@media screen and (min-width: 64em) {
  .u-1\/1-laptop {
    width: 100% !important; }
  .u-1\/2-laptop {
    width: 50% !important; }
  .u-1\/3-laptop {
    width: 33.33333% !important; }
  .u-2\/3-laptop {
    width: 66.66667% !important; }
  .u-1\/4-laptop {
    width: 25% !important; }
  .u-2\/4-laptop {
    width: 50% !important; }
  .u-3\/4-laptop {
    width: 75% !important; }
  .u-1\/5-laptop {
    width: 20% !important; }
  .u-2\/5-laptop {
    width: 40% !important; }
  .u-3\/5-laptop {
    width: 60% !important; }
  .u-4\/5-laptop {
    width: 80% !important; }
  .u-1\/6-laptop {
    width: 16.66667% !important; }
  .u-2\/6-laptop {
    width: 33.33333% !important; }
  .u-3\/6-laptop {
    width: 50% !important; }
  .u-4\/6-laptop {
    width: 66.66667% !important; }
  .u-5\/6-laptop {
    width: 83.33333% !important; } }

@media screen and (min-width: 75em) {
  .u-1\/1-desktop {
    width: 100% !important; }
  .u-1\/2-desktop {
    width: 50% !important; }
  .u-1\/3-desktop {
    width: 33.33333% !important; }
  .u-2\/3-desktop {
    width: 66.66667% !important; }
  .u-1\/4-desktop {
    width: 25% !important; }
  .u-2\/4-desktop {
    width: 50% !important; }
  .u-3\/4-desktop {
    width: 75% !important; }
  .u-1\/5-desktop {
    width: 20% !important; }
  .u-2\/5-desktop {
    width: 40% !important; }
  .u-3\/5-desktop {
    width: 60% !important; }
  .u-4\/5-desktop {
    width: 80% !important; }
  .u-1\/6-desktop {
    width: 16.66667% !important; }
  .u-2\/6-desktop {
    width: 33.33333% !important; }
  .u-3\/6-desktop {
    width: 50% !important; }
  .u-4\/6-desktop {
    width: 66.66667% !important; }
  .u-5\/6-desktop {
    width: 83.33333% !important; } }

/**
 * Print styles
 * https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css
 * Inlined to avoid the additional HTTP request: h5bp.com/r
 */
@media print {
  *,
  *::before,
  *::after,
  *::first-letter,
  *::first-line {
    color: #000 !important;
    /* Black prints faster: http://www.sanbeiji.com/archives/953 */
    text-shadow: none !important;
    background: transparent !important;
    box-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]::after {
    content: " (" attr(href) ")"; }
  abbr[title]::after {
    content: " (" attr(title) ")"; }
  /**
     * Don't show links that are fragment identifiers,
     * or use the `javascript:` pseudo protocol
     */
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: ""; }
  pre,
  blockquote {
    border: 0.0625em solid #999;
    page-break-inside: avoid; }
  /**
     * Printing Tables:
     * http://css-discuss.incutio.com/wiki/Printing_Tables
     */
  thead {
    display: table-header-group; }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; }
  /**
     * Project specific print modifications
     */
  .page-header,
  .page-footer,
  #epi-quickNavigator {
    display: none !important; }
  .collapse__target {
    display: block !important; }
  .collapse__control,
  .collapse__content {
    padding-left: 0;
    padding-right: 0; } }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGVzLmNzcyIsInNvdXJjZXMiOlsic3R5bGVzLnNjc3MiLCIyX3Rvb2xzL190b29scy5mdW5jdGlvbnMuc2NzcyIsIjFfc2V0dGluZ3MvX3NldHRpbmdzLmNvbG9ycy5zY3NzIiwiMV9zZXR0aW5ncy9fc2V0dGluZ3MuZm9udHMuc2NzcyIsIjFfc2V0dGluZ3MvX3NldHRpbmdzLmdsb2JhbHMuc2NzcyIsIjFfc2V0dGluZ3MvX3NldHRpbmdzLmhlYWRpbmdzLnNjc3MiLCIxX3NldHRpbmdzL19zZXR0aW5ncy5yZXNwb25zaXZlLnNjc3MiLCIxX3NldHRpbmdzL19zZXR0aW5ncy56LWluZGV4LnNjc3MiLCIyX3Rvb2xzL190b29scy5nbHlwaHMuc2NzcyIsIjJfdG9vbHMvX3Rvb2xzLm1peGlucy5zY3NzIiwiMl90b29scy9fdG9vbHMuc3ByaXRlcy5zY3NzIiwiM19nZW5lcmljL19nZW5lcmljLm5vcm1hbGl6ZS5zY3NzIiwiM19nZW5lcmljL19nZW5lcmljLnJlc2V0LnNjc3MiLCIzX2dlbmVyaWMvX2dlbmVyaWMuYm94LXNpemluZy5zY3NzIiwiM19nZW5lcmljL19nZW5lcmljLnNoYXJlZC5zY3NzIiwiNF9iYXNlL19iYXNlLmJ1dHRvbnMuc2NzcyIsIjRfYmFzZS9fYmFzZS5jb2RlLnNjc3MiLCI0X2Jhc2UvX2Jhc2UuZm9ybXMuc2NzcyIsIjRfYmFzZS9fYmFzZS5oZWFkaW5ncy5zY3NzIiwiNF9iYXNlL19iYXNlLmltYWdlcy5zY3NzIiwiNF9iYXNlL19iYXNlLmxpbmtzLnNjc3MiLCI0X2Jhc2UvX2Jhc2UubGlzdHMuc2NzcyIsIjRfYmFzZS9fYmFzZS5wYWdlLnNjc3MiLCI0X2Jhc2UvX2Jhc2UucXVvdGVzLnNjc3MiLCI0X2Jhc2UvX2Jhc2UudGFibGVzLnNjc3MiLCI0X2Jhc2UvX2Jhc2UudHlwb2dyYXBoeS5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLmJsb2NrLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMuYm94LnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMuYnV0dG9ucy5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLmZsYWcuc2NzcyIsIjVfb2JqZWN0cy9fb2JqZWN0cy5mb3Jtcy5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLmhlYWRpbmdzLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMuaW1hZ2VzLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMubGF5b3V0LnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMubGlzdC1iYXJlLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMubGlzdC1ibG9jay5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLmxpc3QtaW5saW5lLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMubGlzdC11aS5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLm1lZGlhLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMucGFjay5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLnBhZ2luZy5zY3NzIiwiNV9vYmplY3RzL19vYmplY3RzLnBhcmFncmFwaHMuc2NzcyIsIjVfb2JqZWN0cy9fb2JqZWN0cy50YWJsZXMuc2NzcyIsIjVfb2JqZWN0cy9fb2JqZWN0cy50YWJzLnNjc3MiLCI1X29iamVjdHMvX29iamVjdHMud3JhcHBlcnMuc2NzcyIsIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5jb29raWUtaW5mb3JtYXRpb24uc2NzcyIsIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5lcGlzZXJ2ZXItZm9ybXMuc2NzcyIsIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5tYWluLW5hdmlnYXRpb24uc2NzcyIsIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5vd2wtY2Fyb3VzZWwuc2NzcyIsIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5wYWdlLWZvb3Rlci5zY3NzIiwiNl9jb21wb25lbnRzL19jb21wb25lbnRzLnBhZ2UtaGVhZGVyLnNjc3MiLCI3X3RydW1wcy9fdHJ1bXBzLmNsZWFyZml4LnNjc3MiLCI3X3RydW1wcy9fdHJ1bXBzLmVwaXNlcnZlci5zY3NzIiwiN190cnVtcHMvX3RydW1wcy5oaWRlLnNjc3MiLCI3X3RydW1wcy9fdHJ1bXBzLnV0aWxpdGllcy5zY3NzIiwiN190cnVtcHMvX3RydW1wcy53aWR0aHMuc2NzcyIsIjdfdHJ1bXBzL190cnVtcHMucHJpbnQuc2NzcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG4vLyAjU1RZTEVTXG4vL1xuLy8gQnVuZGxlIGZvciBhbGwgc2NzcyBmaWxlcy5cbi8vIE5vIHN0eWxlcyBzaG91bGQgYmUgd3JpdHRlbiBpbiB0aGlzIGZpbGUhXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXG5cblxuXG4vLyBTb21lIG9mIG91ciBmdW5jdGlvbnMgYXJlIHVzZWQgaW4gdGhlIHNldHRpbmdzIGxheWVyLCBhbmQgdGhlcmVmb3JlIHdlIG11c3Rcbi8vIGluY2x1ZGUgdGhlIGZ1bmN0aW9ucyBmaWxlIGZpcnN0LiBUaGlzIGlzIGFnYWluc3QgdGhlIElUQ1NTIGFyY2hpdGVjdHVyZSxcbi8vIGJ1dCBzaW5jZSB0aGUgZnVuY3Rpb25zIGFyZSBub3Qgd3JpdGluZyBhbnl0aGluZyB0byB0aGUgY29tcGlsZWQgY3NzIGZpbGVzLFxuLy8gd2UgY2FuIGxpdmUgd2l0aCB0aGF0LiBUaGUgb3B0aW9uIGlzIHRvIGR1cGxpY2F0ZSB0aGUgZnVuY3Rpb25zIGluIG91clxuLy8gc2V0dGluZ3MgZmlsZXMsIHdoaWNoIGlzIG5vdCBnb29kIGVpdGhlci5cbkBpbXBvcnQgXCIyX3Rvb2xzL190b29scy5mdW5jdGlvbnNcIjtcblxuXG4vLyBTRVRUSU5HU1xuQGltcG9ydCBcIjFfc2V0dGluZ3MvX3NldHRpbmdzLmNvbG9yc1wiO1xuQGltcG9ydCBcIjFfc2V0dGluZ3MvX3NldHRpbmdzLmZvbnRzXCI7XG5AaW1wb3J0IFwiMV9zZXR0aW5ncy9fc2V0dGluZ3MuZ2xvYmFsc1wiO1xuQGltcG9ydCBcIjFfc2V0dGluZ3MvX3NldHRpbmdzLmhlYWRpbmdzXCI7XG5AaW1wb3J0IFwiMV9zZXR0aW5ncy9fc2V0dGluZ3MucmVzcG9uc2l2ZVwiO1xuQGltcG9ydCBcIjFfc2V0dGluZ3MvX3NldHRpbmdzLnotaW5kZXhcIjtcblxuXG4vLyBUT09MU1xuQGltcG9ydCBcIjJfdG9vbHMvX3Rvb2xzLmdseXBoc1wiO1xuQGltcG9ydCBcIjJfdG9vbHMvX3Rvb2xzLm1peGluc1wiO1xuQGltcG9ydCBcIjJfdG9vbHMvX3Rvb2xzLnNwcml0ZXNcIjtcblxuXG4vLyBHRU5FUklDXG5AaW1wb3J0IFwiM19nZW5lcmljL19nZW5lcmljLm5vcm1hbGl6ZVwiO1xuQGltcG9ydCBcIjNfZ2VuZXJpYy9fZ2VuZXJpYy5yZXNldFwiO1xuQGltcG9ydCBcIjNfZ2VuZXJpYy9fZ2VuZXJpYy5ib3gtc2l6aW5nXCI7XG5AaW1wb3J0IFwiM19nZW5lcmljL19nZW5lcmljLnNoYXJlZFwiO1xuXG5cbi8vIEJBU0VcbkBpbXBvcnQgXCI0X2Jhc2UvX2Jhc2UuYnV0dG9uc1wiO1xuQGltcG9ydCBcIjRfYmFzZS9fYmFzZS5jb2RlXCI7XG5AaW1wb3J0IFwiNF9iYXNlL19iYXNlLmZvcm1zXCI7XG5AaW1wb3J0IFwiNF9iYXNlL19iYXNlLmhlYWRpbmdzXCI7XG5AaW1wb3J0IFwiNF9iYXNlL19iYXNlLmltYWdlc1wiO1xuQGltcG9ydCBcIjRfYmFzZS9fYmFzZS5saW5rc1wiO1xuQGltcG9ydCBcIjRfYmFzZS9fYmFzZS5saXN0c1wiO1xuQGltcG9ydCBcIjRfYmFzZS9fYmFzZS5wYWdlXCI7XG5AaW1wb3J0IFwiNF9iYXNlL19iYXNlLnF1b3Rlc1wiO1xuQGltcG9ydCBcIjRfYmFzZS9fYmFzZS50YWJsZXNcIjtcbkBpbXBvcnQgXCI0X2Jhc2UvX2Jhc2UudHlwb2dyYXBoeVwiO1xuXG5cbi8vIE9CSkVDVFNcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMuYmxvY2tcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMuYm94XCI7XG5AaW1wb3J0IFwiNV9vYmplY3RzL19vYmplY3RzLmJ1dHRvbnNcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMuZmxhZ1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy5mb3Jtc1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy5oZWFkaW5nc1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy5pbWFnZXNcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMubGF5b3V0XCI7XG5AaW1wb3J0IFwiNV9vYmplY3RzL19vYmplY3RzLmxpc3QtYmFyZVwiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy5saXN0LWJsb2NrXCI7XG5AaW1wb3J0IFwiNV9vYmplY3RzL19vYmplY3RzLmxpc3QtaW5saW5lXCI7XG5AaW1wb3J0IFwiNV9vYmplY3RzL19vYmplY3RzLmxpc3QtdWlcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMubWVkaWFcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMucGFja1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy5wYWdpbmdcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMucGFyYWdyYXBoc1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy50YWJsZXNcIjtcbkBpbXBvcnQgXCI1X29iamVjdHMvX29iamVjdHMudGFic1wiO1xuQGltcG9ydCBcIjVfb2JqZWN0cy9fb2JqZWN0cy53cmFwcGVyc1wiO1xuXG5cbi8vIENPTVBPTkVOVFNcbkBpbXBvcnQgXCI2X2NvbXBvbmVudHMvX2NvbXBvbmVudHMuY29va2llLWluZm9ybWF0aW9uXCI7XG5AaW1wb3J0IFwiNl9jb21wb25lbnRzL19jb21wb25lbnRzLmVwaXNlcnZlci1mb3Jtc1wiO1xuQGltcG9ydCBcIjZfY29tcG9uZW50cy9fY29tcG9uZW50cy5tYWluLW5hdmlnYXRpb25cIjtcbkBpbXBvcnQgXCI2X2NvbXBvbmVudHMvX2NvbXBvbmVudHMub3dsLWNhcm91c2VsXCI7XG5AaW1wb3J0IFwiNl9jb21wb25lbnRzL19jb21wb25lbnRzLnBhZ2UtZm9vdGVyXCI7XG5AaW1wb3J0IFwiNl9jb21wb25lbnRzL19jb21wb25lbnRzLnBhZ2UtaGVhZGVyXCI7XG5cblxuLy8gVFJVTVBTXG5AaW1wb3J0IFwiN190cnVtcHMvX3RydW1wcy5jbGVhcmZpeFwiO1xuQGltcG9ydCBcIjdfdHJ1bXBzL190cnVtcHMuZXBpc2VydmVyXCI7XG5AaW1wb3J0IFwiN190cnVtcHMvX3RydW1wcy5oaWRlXCI7XG5AaW1wb3J0IFwiN190cnVtcHMvX3RydW1wcy51dGlsaXRpZXNcIjtcbkBpbXBvcnQgXCI3X3RydW1wcy9fdHJ1bXBzLndpZHRoc1wiO1xuQGltcG9ydCBcIjdfdHJ1bXBzL190cnVtcHMucHJpbnRcIjtcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0ZVTkNUSU9OU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vLyBEaXZpZGUgYSBudW1iZXIgYnkgNC5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gJG51bWJlciAtIFRoZSBudW1iZXIgdG8gZGl2aWRlXHJcbi8vLyBAcmV0dXJuIHtudW1iZXJ9IC0gVGhlIHJlc3VsdCBvZiB0aGUgZGl2aXNpb25cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmZvbyB7XHJcbi8vLyAgICAgICAgIHBhZGRpbmc6IHF1YXJ0ZXIoNHB4KTtcclxuLy8vICAgICB9XHJcbi8vL1xyXG4vLy8gICAgIC8vIC5mb28ge1xyXG4vLy8gICAgIC8vICAgIHBhZGRpbmc6IDFweDtcclxuLy8vICAgICAvLyB9XHJcbkBmdW5jdGlvbiBxdWFydGVyKCRudW1iZXIpIHtcclxuICAgIEByZXR1cm4gKCRudW1iZXIgLyA0KTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8gRGl2aWRlIGEgbnVtYmVyIGJ5IDIuXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtudW1iZXJ9ICRudW1iZXIgLSBUaGUgbnVtYmVyIHRvIGRpdmlkZVxyXG4vLy8gQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXN1bHQgb2YgdGhlIGRpdmlzaW9uXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAgIC5mb28ge1xyXG4vLy8gICAgICAgICBwYWRkaW5nOiBoYWx2ZSg0cHgpO1xyXG4vLy8gICAgIH1cclxuLy8vXHJcbi8vLyAgICAgLy8gLmZvbyB7XHJcbi8vLyAgICAgLy8gICAgcGFkZGluZzogMnB4O1xyXG4vLy8gICAgIC8vIH1cclxuQGZ1bmN0aW9uIGhhbHZlKCRudW1iZXIpIHtcclxuICAgIEByZXR1cm4gKCRudW1iZXIgLyAyKTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8gTXVsdGlwbHkgYSBudW1iZXIgYnkgMi5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gJG51bWJlciAtIFRoZSBudW1iZXIgdG8gbXVsdGlwbHlcclxuLy8vIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmVzdWx0IG9mIHRoZSBkaXZpc2lvblxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgcGFkZGluZzogZG91YmxlKDRweCk7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICBwYWRkaW5nOiA4cHg7XHJcbi8vLyAgICAgLy8gfVxyXG5AZnVuY3Rpb24gZG91YmxlKCRudW1iZXIpIHtcclxuICAgIEByZXR1cm4gKCRudW1iZXIgKiAyKTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8gTXVsdGlwbHkgYSBudW1iZXIgYnkgNC5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gJG51bWJlciAtIFRoZSBudW1iZXIgdG8gbXVsdGlwbHlcclxuLy8vIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmVzdWx0IG9mIHRoZSBkaXZpc2lvblxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgcGFkZGluZzogcXVhZHJ1cGxlKDRweCk7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICBwYWRkaW5nOiAxNnB4O1xyXG4vLy8gICAgIC8vIH1cclxuQGZ1bmN0aW9uIHF1YWRydXBsZSgkbnVtYmVyKSB7XHJcbiAgICBAcmV0dXJuICgkbnVtYmVyICogNCk7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vIFN0cmlwIHVuaXQgZnJvbSBhIG51bWJlci5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gbnVtYmVyIC0gVGhlIG51bWJlciB0byBzdHJpcFxyXG4vLy8gQHJldHVybiB7bnVtYmVyfSAtIFRoZSB1bml0bGVzcyBudW1iZXJcclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgc3RyaXAtdW5pdCgzMnB4KTtcclxuLy8vXHJcbi8vLyAgICAgLy8gMzI7XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICBzdHJpcC11bml0KDNlbSk7XHJcbi8vL1xyXG4vLy8gICAgIC8vIDM7XHJcbkBmdW5jdGlvbiBzdHJpcC11bml0KCRudW1iZXIpIHtcclxuICAgIEByZXR1cm4gJG51bWJlciAvICgkbnVtYmVyICogMCArIDEpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBDb252ZXJ0IGEgcGl4ZWwgb3IgcmVtIHZhbHVlIHRvIGVtLlxyXG4vLy9cclxuLy8vIEBwYXJhbSB7bnVtYmVyfSBzaXplIC0gVGhlIHNpemUgdG8gY29udmVydFxyXG4vLy8gQHBhcmFtIHtudW1iZXJ9ICRiYXNlIFskYmFzZS1mb250LXNpemVdIC0gVGhlIGJhc2Ugc2l6ZSB0byBjYWxjdWxhdGUgcmVtIHVuaXQgZnJvbVxyXG4vLy8gQHJldHVybiB7bnVtYmVyfSAtIFRoZSByZXN1bHQgaW4gZW1cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmZvbyB7XHJcbi8vLyAgICAgICAgIHBhZGRpbmc6IGVtKDhweCk7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICBwYWRkaW5nOiAwLjVlbTtcclxuLy8vICAgICAvLyB9XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuYmFyIHtcclxuLy8vICAgICAgICAgcGFkZGluZzogZW0oMjBweCwgMTBweCk7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICBwYWRkaW5nOiAyZW07XHJcbi8vLyAgICAgLy8gfVxyXG5AZnVuY3Rpb24gZW0oJHNpemUsICRiYXNlOiAkYmFzZS1mb250LXNpemUpIHtcclxuXHJcbiAgICAvLyBJZiBhIHVuaXRsZXNzIG51bWJlciBvciBhIHBpeGVsIHZhbHVlIGhhcyBiZWVuIHNlbnQgaW4sXHJcbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHZhbHVlIHdpdGggdGhlIGJhc2UgdG8gZ2V0IHRoZSByZW0gdmFsdWUuXHJcbiAgICBAaWYgdW5pdGxlc3MoJHNpemUpIG9yIHVuaXQoJHNpemUpID09IFwicHhcIiB7XHJcbiAgICAgICAgJHNpemU6ICRzaXplIC8gJGJhc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gU3RyaXAgdW5pdCBmcm9tIHRoZSBzaXplIGFuZCBjb252ZXJ0IHRvIHJlbVxyXG4gICAgQHJldHVybiBzdHJpcC11bml0KCRzaXplKSAqIDFlbTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8gQ29udmVydCBhIHBpeGVsIG9yIGVtIHZhbHVlIHRvIHJlbS5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBzaXplIHRvIGNvbnZlcnRcclxuLy8vIEBwYXJhbSB7bnVtYmVyfSAkYmFzZSBbJGJhc2UtZm9udC1zaXplXSAtIFRoZSBiYXNlIHNpemUgdG8gY2FsY3VsYXRlIHJlbSB1bml0IGZyb21cclxuLy8vIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmVzdWx0IGluIHJlbVxyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgcGFkZGluZzogcmVtKDhweCk7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICBwYWRkaW5nOiAwLjVyZW07XHJcbi8vLyAgICAgLy8gfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmJhciB7XHJcbi8vLyAgICAgICAgIHBhZGRpbmc6IHJlbSgyMHB4LCAxMHB4KTtcclxuLy8vICAgICB9XHJcbi8vL1xyXG4vLy8gICAgIC8vIC5mb28ge1xyXG4vLy8gICAgIC8vICAgIHBhZGRpbmc6IDJyZW07XHJcbi8vLyAgICAgLy8gfVxyXG5AZnVuY3Rpb24gcmVtKCRzaXplLCAkYmFzZTogJGJhc2UtZm9udC1zaXplKSB7XHJcblxyXG4gICAgLy8gSWYgYSB1bml0bGVzcyBudW1iZXIgb3IgYSBwaXhlbCB2YWx1ZSBoYXMgYmVlbiBzZW50IGluLFxyXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB2YWx1ZSB3aXRoIHRoZSBiYXNlIHRvIGdldCB0aGUgcmVtIHZhbHVlLlxyXG4gICAgQGlmIHVuaXRsZXNzKCRzaXplKSBvciB1bml0KCRzaXplKSA9PSBcInB4XCIge1xyXG4gICAgICAgICRzaXplOiAkc2l6ZSAvICRiYXNlO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFN0cmlwIHVuaXQgZnJvbSB0aGUgc2l6ZSBhbmQgY29udmVydCB0byByZW1cclxuICAgIEByZXR1cm4gc3RyaXAtdW5pdCgkc2l6ZSkgKiAxcmVtO1xyXG59XHJcbiIsIu+7vy8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0NPTE9SU1xyXG4vL1xyXG4vLyBDb2xvciBkZWZpbml0aW9ucyBhbmQgZ2xvYmFsIGNvbG9yIHVzaW5ncy5cclxuLy8gVXNlIGh0dHA6Ly9jaGlyLmFnL3Byb2plY3RzL25hbWUtdGhhdC1jb2xvciB0byBuYW1lIGNvbG9ycy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBQYWxldHRlXHJcbiRjb2xvci1ibGFjazogICAgICAgICAgICAgICAgICAgICAgIHJnYigwLCAwLCAwKTtcclxuJGNvbG9yLXdoaXRlOiAgICAgICAgICAgICAgICAgICAgICAgcmdiKDI1NSwgMjU1LCAyNTUpO1xyXG4kY29sb3ItcmVkLW1vbnphOiAgICAgICAgICAgICAgICAgICByZ2IoMTUzLCAzMSwgNjEpO1xyXG4kY29sb3ItcmVkLWNsYXJldDogICAgICAgICAgICAgICAgICByZ2IoMTE4LCAyNSwgNDgpO1xyXG4kY29sb3ItZ3JheS1taW5lLXNoYWZ0OiAgICAgICAgICAgICByZ2IoNjEsIDYxLCA2MSk7XHJcbiRjb2xvci1ncmF5LWFsdG86ICAgICAgICAgICAgICAgICAgIHJnYigyMjIsIDIyMiwgMjIyKTtcclxuJGNvbG9yLXllbGxvdy1wb3J0YWZpbm86ICAgICAgICAgICAgcmdiKDI1NSwgMjU1LCAxNzMpO1xyXG5cclxuXHJcbi8vIEJhc2VcclxuJGNvbG9yLWJhc2UtdGV4dDogICAgICAgICAgICAgICAgICAgJGNvbG9yLWJsYWNrO1xyXG4kY29sb3ItYmFzZS1iYWNrZ3JvdW5kOiAgICAgICAgICAgICAkY29sb3Itd2hpdGU7XHJcblxyXG5cclxuLy8gTGlua3NcclxuJGNvbG9yLWxpbms6ICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yLXJlZC1tb256YTtcclxuJGNvbG9yLWxpbmstaG92ZXI6ICAgICAgICAgICAgICAgICAgJGNvbG9yLXJlZC1jbGFyZXQ7XHJcbiRjb2xvci1saW5rLW91dGxpbmU6ICAgICAgICAgICAgICAgICRjb2xvci1yZWQtbW9uemE7XHJcblxyXG5cclxuLy8gQnV0dG9uc1xyXG4kY29sb3ItYnRuLXByaW1hcnk6ICAgICAgICAgICAgICAgICAkY29sb3Itd2hpdGU7XHJcbiRjb2xvci1idG4tcHJpbWFyeS1iYWNrZ3JvdW5kOiAgICAgICRjb2xvci1yZWQtbW9uemE7XHJcbiRjb2xvci1idG4tcHJpbWFyeS1ib3JkZXI6ICAgICAgICAgICRjb2xvci1yZWQtbW9uemE7XHJcbiRjb2xvci1idG4tc2Vjb25kYXJ5OiAgICAgICAgICAgICAgICRjb2xvci13aGl0ZTtcclxuJGNvbG9yLWJ0bi1zZWNvbmRhcnktYmFja2dyb3VuZDogICAgJGNvbG9yLWdyYXktbWluZS1zaGFmdDtcclxuJGNvbG9yLWJ0bi1zZWNvbmRhcnktYm9yZGVyOiAgICAgICAgJGNvbG9yLWdyYXktbWluZS1zaGFmdDtcclxuXHJcblxyXG4vLyBUeXBvZ3JhcGh5XHJcbiRjb2xvci1tYXJrLWJhY2tncm91bmQ6ICAgICAgICAgICAgICRjb2xvci15ZWxsb3ctcG9ydGFmaW5vO1xyXG4kY29sb3ItaHI6ICAgICAgICAgICAgICAgICAgICAgICAgICAkY29sb3ItZ3JheS1hbHRvO1xyXG5cclxuXHJcbi8vIENvZGVcclxuJGNvbG9yLWNvZGU6ICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yLXJlZC1tb256YTtcclxuJGNvbG9yLWNvZGUtYmFja2dyb3VuZDogICAgICAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuJGNvbG9yLWtiZDogICAgICAgICAgICAgICAgICAgICAgICAgJGNvbG9yLXdoaXRlO1xyXG4kY29sb3Ita2JkLWJhY2tncm91bmQ6ICAgICAgICAgICAgICAkY29sb3ItZ3JheS1taW5lLXNoYWZ0O1xyXG4kY29sb3ItcHJlOiAgICAgICAgICAgICAgICAgICAgICAgICAkY29sb3ItZ3JheS1taW5lLXNoYWZ0O1xyXG4kY29sb3ItcHJlLWJhY2tncm91bmQ6ICAgICAgICAgICAgICAkY29sb3ItZ3JheS1hbHRvO1xyXG4kY29sb3Itc2FtcDogICAgICAgICAgICAgICAgICAgICAgICAkY29sb3ItZ3JheS1taW5lLXNoYWZ0O1xyXG4kY29sb3Itc2FtcC1iYWNrZ3JvdW5kOiAgICAgICAgICAgICAkY29sb3Itd2hpdGU7XHJcbiRjb2xvci12YXI6ICAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvci1ncmF5LW1pbmUtc2hhZnQ7XHJcbiRjb2xvci12YXItYmFja2dyb3VuZDogICAgICAgICAgICAgICRjb2xvci13aGl0ZTtcclxuXHJcblxyXG4vLyBRdW90ZXNcclxuJGNvbG9yLWJsb2NrcXVvdGUtYm9yZGVyOiAgICAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuJGNvbG9yLWJsb2NrcXVvdGUtcXVvdGU6ICAgICAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuJGNvbG9yLWJsb2NrcXVvdGUtYmFja2dyb3VuZDogICAgICAgJGNvbG9yLXdoaXRlO1xyXG4kY29sb3ItYmxvY2txdW90ZS1mb290ZXI6ICAgICAgICAgICAkY29sb3ItZ3JheS1taW5lLXNoYWZ0O1xyXG5cclxuXHJcbi8vIFRhYmxlc1xyXG4kY29sb3ItdGFibGUtYm9yZGVyOiAgICAgICAgICAgICAgICAkY29sb3ItZ3JheS1hbHRvO1xyXG5cclxuXHJcbi8vIEZvcm1zXHJcbiRjb2xvci1mb3JtOiAgICAgICAgICAgICAgICAgICAgICAgICRjb2xvci1ncmF5LW1pbmUtc2hhZnQ7XHJcbiRjb2xvci1mb3JtLWJhY2tncm91bmQ6ICAgICAgICAgICAgICRjb2xvci13aGl0ZTtcclxuJGNvbG9yLWZvcm0tYm9yZGVyOiAgICAgICAgICAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuJGNvbG9yLWZvcm0tYm9yZGVyLWZvY3VzOiAgICAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuJGNvbG9yLWZvcm0tZmllbGRzZXQtYm9yZGVyOiAgICAgICAgJGNvbG9yLWdyYXktYWx0bztcclxuXHJcblxyXG4vLyBQYWdlIGhlYWRlclxyXG4kY29sb3ItcGFnZS1oZWFkZXItYmFja2dyb3VuZDogICAgICAkY29sb3Itd2hpdGU7XHJcblxyXG5cclxuLy8gTmF2aWdhdGlvblxyXG4kY29sb3Itc2l0ZS1uYXZpZ2F0aW9uOiAgICAgICAgICAgICAkY29sb3ItYmFzZS10ZXh0O1xyXG5cclxuXHJcbi8vIFBhZ2UgZm9vdGVyXHJcbiRjb2xvci1wYWdlLWZvb3RlcjogICAgICAgICAgICAgICAgICRjb2xvci13aGl0ZTtcclxuJGNvbG9yLXBhZ2UtZm9vdGVyLWJhY2tncm91bmQ6ICAgICAgJGNvbG9yLWdyYXktbWluZS1zaGFmdDtcclxuIiwi77u/Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjRk9OVFNcclxuLy9cclxuLy8gRm9udCBmYW1pbHkgdmFyaWFibGVzIGFuZCBjdXN0b20gZm9udCBmYWNlcy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBTeXN0ZW0gVUkgZm9udCBmYW1pbHlcclxuLy8gaHR0cDovL3d3dy5zbWFzaGluZ21hZ2F6aW5lLmNvbS8yMDE1LzExL3VzaW5nLXN5c3RlbS11aS1mb250cy1wcmFjdGljYWwtZ3VpZGVcclxuJGZvbnQtc3lzdGVtLXVpOiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsIFwiU2Vnb2UgVUlcIiwgXCJSb2JvdG9cIiwgXCJPeHlnZW5cIiwgXCJVYnVudHVcIiwgXCJDYW50YXJlbGxcIiwgXCJGaXJhIFNhbnNcIiwgXCJEcm9pZCBTYW5zXCIsIFwiSGVsdmV0aWNhIE5ldWVcIiwgc2Fucy1zZXJpZjtcclxuXHJcblxyXG4vLyBNb25vc3BhY2UgZm9udCBmYW1pbHksIHVzZWQgZm9yIGNvZGUgdGFnc1xyXG4kZm9udC1tb25vc3BhY2U6IEluY29uc29sYXRhLCBNb25hY28sIENvbnNvbGFzLCBcIkFuZGFsZSBNb25vXCIsIFwiQml0c3RyZWFtIFZlcmEgU2FucyBNb25vXCIsIFwiQ291cmllciBOZXdcIiwgQ291cmllciwgbW9ub3NwYWNlO1xyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNHTE9CQUxTXHJcbi8vXHJcbi8vIEdsb2JhbCBzZXR0aW5ncyBhbmQgc3BhY2luZyB1bml0cy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBCYXNlIHNldHRpbmdzIChpbiBwaXhlbHMpXHJcbiRiYXNlLWZvbnQtc2l6ZTogICAgICAgICAgICAgICAgMTZweDtcclxuJGJhc2UtbGluZS1oZWlnaHQ6ICAgICAgICAgICAgICAyNHB4O1xyXG4kYmFzZS1yb3VuZDogICAgICAgICAgICAgICAgICAgIDJweDtcclxuXHJcblxyXG4vLyBCYXNlIHNldHRpbmdzIChpbiBlbSlcclxuJGJhc2Utcm91bmQtdW5pdDogICAgICAgICAgICAgICBlbSgkYmFzZS1yb3VuZCk7XHJcblxyXG5cclxuLy8gQmFzZSBzcGFjaW5nIHVuaXRzIChpbiBlbSlcclxuJGJhc2Utc3BhY2luZy11bml0OiAgICAgICAgICAgICBlbSgkYmFzZS1mb250LXNpemUpO1xyXG4kYmFzZS1zcGFjaW5nLXVuaXQtLXRpbnk6ICAgICAgIHF1YXJ0ZXIoJGJhc2Utc3BhY2luZy11bml0KTtcclxuJGJhc2Utc3BhY2luZy11bml0LS1zbWFsbDogICAgICBoYWx2ZSgkYmFzZS1zcGFjaW5nLXVuaXQpO1xyXG4kYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlOiAgICAgIGRvdWJsZSgkYmFzZS1zcGFjaW5nLXVuaXQpO1xyXG4kYmFzZS1zcGFjaW5nLXVuaXQtLWh1Z2U6ICAgICAgIHF1YWRydXBsZSgkYmFzZS1zcGFjaW5nLXVuaXQpO1xyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNIRUFESU5HU1xyXG4vL1xyXG4vLyBIZWFkaW5nIHZhcmlhYmxlcyB0aGF0IGFyZSB1c2VkIGluIF9iYXNlLmhlYWRpbmdzLnNjc3NcclxuLy8gQWRkIG1vcmUgYnJlYWtwb2ludCBzcGVjaWZpYyBzaXplcyBpZiB0aGUgZGVzaWduIHJlcXVpcmVzIGl0LCBvciByZW1vdmVcclxuLy8gdGhlIGV4aXN0aW5nIG9uZXMgaWYgdGhlIHNpemUgc2hvdWxkIGJlIHRoZSBzYW1lIG9uIGFsbCBkZXZpY2VzLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEhlYWRpbmcgc2l6ZSAxIChpbiBwaXhlbHMpXHJcbiRoZWFkaW5nLXNpemUtMTogICAgICAgICAgICAyNnB4O1xyXG4kaGVhZGluZy1zaXplLTEtdGFibGV0OiAgICAgMzZweDtcclxuXHJcblxyXG4vLyBIZWFkaW5nIHNpemUgMiAoaW4gcGl4ZWxzKVxyXG4kaGVhZGluZy1zaXplLTI6ICAgICAgICAgICAgMjBweDtcclxuJGhlYWRpbmctc2l6ZS0yLXRhYmxldDogICAgIDIycHg7XHJcblxyXG5cclxuLy8gSGVhZGluZyBzaXplIDMgKGluIHBpeGVscylcclxuJGhlYWRpbmctc2l6ZS0zOiAgICAgICAgICAgIDE4cHg7XHJcbiRoZWFkaW5nLXNpemUtMy10YWJsZXQ6ICAgICAyMHB4O1xyXG5cclxuXHJcbi8vIEhlYWRpbmcgc2l6ZSA0IChpbiBwaXhlbHMpXHJcbiRoZWFkaW5nLXNpemUtNDogICAgICAgICAgICAxOHB4O1xyXG4kaGVhZGluZy1zaXplLTQtdGFibGV0OiAgICAgMThweDtcclxuXHJcblxyXG4vLyBIZWFkaW5nIHNpemUgNSAoaW4gcGl4ZWxzKVxyXG4kaGVhZGluZy1zaXplLTU6ICAgICAgICAgICAgMTZweDtcclxuJGhlYWRpbmctc2l6ZS01LXRhYmxldDogICAgIDE2cHg7XHJcblxyXG5cclxuLy8gSGVhZGluZyBzaXplIDYgKGluIHBpeGVscylcclxuJGhlYWRpbmctc2l6ZS02OiAgICAgICAgICAgIDE0cHg7XHJcbiRoZWFkaW5nLXNpemUtNi10YWJsZXQ6ICAgICAxNHB4O1xyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNSRVNQT05TSVZFXHJcbi8vXHJcbi8vIEJyZWFrcG9pbnRzLCB3cmFwcGVycyBhbmQgY29sdW1uIHNldHRpbmdzLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEJyZWFrcG9pbnRzIChpbiBwaXhlbHMpXHJcbiRicmVha3BvaW50LXRhYmxldC1zdGFydDogICAgICAgNzY4cHg7XHJcbiRicmVha3BvaW50LWxhcHRvcC1zdGFydDogICAgICAgMTAyNHB4O1xyXG4kYnJlYWtwb2ludC1kZXNrdG9wLXN0YXJ0OiAgICAgIDEyMDBweDtcclxuXHJcblxyXG4vLyBTY3JvbGxiYXIgd2lkdGggKGluIHBpeGVscyAtIHVzZWQgaW4gd3JhcHBlciB3aWR0aCBjYWxjdWxhdGlvbnMpXHJcbiRzY3JvbGxiYXItd2lkdGg6ICAgICAgICAgICAgICAgMTZweDtcclxuXHJcblxyXG4vLyBXcmFwcGVyIHdpZHRoIChpbiBwZXJjZW50cyBvciBlbSlcclxuJHdyYXBwZXItd2lkdGgtbW9iaWxlOiAgICAgICAgICAxMDAlO1xyXG4kd3JhcHBlci13aWR0aC10YWJsZXQ6ICAgICAgICAgIGVtKCRicmVha3BvaW50LXRhYmxldC1zdGFydCAtICRzY3JvbGxiYXItd2lkdGgpO1xyXG4kd3JhcHBlci13aWR0aC1sYXB0b3A6ICAgICAgICAgIGVtKCRicmVha3BvaW50LWxhcHRvcC1zdGFydCAtICRzY3JvbGxiYXItd2lkdGgpO1xyXG4kd3JhcHBlci13aWR0aC1kZXNrdG9wOiAgICAgICAgIGVtKCRicmVha3BvaW50LWRlc2t0b3Atc3RhcnQgLSAkc2Nyb2xsYmFyLXdpZHRoKTtcclxuXHJcblxyXG5cclxuLy8vIEJyZWFrcG9pbnQgYWxpYXNlcyBhbmQgY29uZGl0aW9ucyAoaW4gZW0pLlxyXG4vLy8gVGhlc2UgY2FuIGJlIGludm9rZWQgdmlhIHRoZSBgbWVkaWEtcXVlcnkoKWAgbWl4aW4uIFdlIHVzZSBhIG1vYmlsZSBmaXJzdFxyXG4vLy8gYXBwcm9hY2ggYW5kIHRoZXJlZm9yZSBvbmx5IHVzZSBtaW4td2lkdGggYW5kIG5vdCBtYXgtd2lkdGggaW4gY29uZGl0aW9ucy5cclxuJGJyZWFrcG9pbnRzOiAoXHJcbiAgICBcInRhYmxldFwiICAgICAgICAgICAgICAgICAgICBcInNjcmVlbiBhbmQgKG1pbi13aWR0aDogI3tlbSgkYnJlYWtwb2ludC10YWJsZXQtc3RhcnQpfSlcIixcclxuICAgIFwibGFwdG9wXCIgICAgICAgICAgICAgICAgICAgIFwic2NyZWVuIGFuZCAobWluLXdpZHRoOiAje2VtKCRicmVha3BvaW50LWxhcHRvcC1zdGFydCl9KVwiLFxyXG4gICAgXCJkZXNrdG9wXCIgICAgICAgICAgICAgICAgICAgXCJzY3JlZW4gYW5kIChtaW4td2lkdGg6ICN7ZW0oJGJyZWFrcG9pbnQtZGVza3RvcC1zdGFydCl9KVwiLFxyXG4pO1xyXG5cclxuXHJcblxyXG4vLy8gR3JpZCBzaXplIGZyYWN0aW9ucyBmb3IgbGF5b3V0IGl0ZW1zLlxyXG4vLy8gQWRkIHRoZSBmcmFjdGlvbnMgeW91IHdhbnQgdG8gdXNlIHdoZW4gc2l6aW5nIGdyaWRzLlxyXG4vLy8gRS5nLiBpZiB5b3UgYWRkIDYsIHlvdSBjYW4gdXNlIHUtMS82LCB1LTMvNiwgdS02LzYsIGV0Yy5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAgIDxkaXYgY2xhc3M9XCJsYXlvdXRfX2l0ZW0gIHUtMS82XCI+PC9kaXY+XHJcbiR3aWR0aHMtY29sdW1uczogKFxyXG4gICAgMSxcclxuICAgIDIsXHJcbiAgICAzLFxyXG4gICAgNCxcclxuICAgIDUsXHJcbiAgICA2LFxyXG4pO1xyXG5cclxuXHJcblxyXG4vLy8gUmVzcG9uc2l2ZSBncmlkIHNpemUgZnJhY3Rpb25zIGZvciBsYXlvdXQgaXRlbXMuXHJcbi8vLyBBZGQgdGhlIGZyYWN0aW9ucyB5b3Ugd2FudCB0byB1c2Ugd2hlbiBzaXppbmcgcmVzcG9uc2l2ZSBncmlkcy5cclxuLy8vIFRoZSBmcmFjdGlvbnMgYXJlIHRoZW4gdXNlZCBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSBwcm9qZWN0cyBkZWZpbmVkXHJcbi8vLyBicmVha3BvaW50cy4gRS5nLiBpZiB5b3UgYWRkIDYsIHlvdSBjYW4gdXNlIHUtMS82LXRhYmxldCwgdS0zLzYtbGFwdG9wLCBldGMuXHJcbi8vL1xyXG4vLy8gQHNlZSAkYnJlYWtwb2ludHNcclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgPGRpdiBjbGFzcz1cImxheW91dF9faXRlbSAgdS0xLzYtdGFibGV0XCI+PC9kaXY+XHJcbiR3aWR0aHMtY29sdW1ucy1yZXNwb25zaXZlOiAoXHJcbiAgICAxLFxyXG4gICAgMixcclxuICAgIDMsXHJcbiAgICA0LFxyXG4gICAgNSxcclxuICAgIDYsXHJcbik7XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI1otSU5ERVhcclxuLy9cclxuLy8gR2F0aGVyIGFsbCB6LWluZGV4ZXMgaW4gdGhpcyBmaWxlLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vLyBaLWluZGV4IG1hcCB0aGF0IGNvbnRhaW5zIGFsbCBjdXN0b20gei1pbmRleGVzLlxyXG4vLy8gVGhlIHotaW5kZXhlcyBhcmUgdXNlZCBieSBjYWxsaW5nIHRoZSBgei1pbmRleCgpYCBtaXhpbi5cclxuJHotaW5kZXhlczogKFxyXG4gICAgXCJtb2RhbFwiOiAgICAgICAgICAgIDUwMDAsXHJcbiAgICBcIm5hdmlnYXRpb25cIjogICAgICAgNDAwMCxcclxuICAgIFwiZGVmYXVsdFwiOiAgICAgICAgICAxLFxyXG4pO1xyXG4iLCLvu78vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNHTFlQSFNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4kZ2x5cGgtcXVvdGUtbGVmdC1zaW5nbGU6ICAgXCJcXDIwMThcIjsgICAgLyog4oCYICovXHJcbiRnbHlwaC1xdW90ZS1yaWdodC1zaW5nbGU6ICBcIlxcMjAxOVwiOyAgICAvKiDigJkgKi9cclxuJGdseXBoLXF1b3RlLWxlZnQtZG91YmxlOiAgIFwiXFwyMDFDXCI7ICAgIC8qIOKAnCAqL1xyXG4kZ2x5cGgtcXVvdGUtcmlnaHQtZG91YmxlOiAgXCJcXDIwMURcIjsgICAgLyog4oCdICovXHJcbiRnbHlwaC1lbS1kYXNoOiAgICAgICAgICAgICBcIlxcMjAxNFwiOyAgICAvKiDigJQgKi9cclxuJGdseXBoLWVuLWRhc2g6ICAgICAgICAgICAgIFwiXFwyMDEzXCI7ICAgIC8qIOKAkyAqL1xyXG4kZ2x5cGgtdmVydGljYWwtbGluZTogICAgICAgXCJcXDAwN0NcIjsgICAgLyogfCAqL1xyXG4kZ2x5cGgtbm8tYnJlYWstc3BhY2U6ICAgICAgXCJcXDAwQTBcIjsgICAgLyogICAqL1xyXG4kZ2x5cGgtY3Jvc3M6ICAgICAgICAgICAgICAgXCJcXDI3MTZcIjsgICAgLyog4pyWICovXHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI01JWElOU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vLyBDcmVhdGUgYSBmdWxseSBmb3JtZWQgdHlwZSBzdHlsZSAoc2l6aW5nIGFuZCB2ZXJ0aWNhbCByaHl0aG0pLlxyXG4vLy8gV2lsbCBnZW5lcmF0ZSBhIHJlbS1iYXNlZCBmb250LXNpemUgd2l0aCBpdHMgcGl4ZWwgZmFsbGJhY2suXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtQeH0gJGZvbnQtc2l6ZSAtIFRoZSBmb250IHNpemUgdG8gc2V0LlxyXG4vLy8gQHBhcmFtIHtJbnRlZ2VyfSAkbGluZS1oZWlnaHQgLSBUaGUgbGluZSBoZWlnaHQgdG8gc2V0LiBDYW4gYmUgYW55IGludGVnZXIsIGBpbmhlcml0YCwgYG5vcm1hbGAgb3IgYG5vbmVgLlxyXG4vLy9cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmZvbyB7XHJcbi8vLyAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxMnB4KTtcclxuLy8vICAgICB9XHJcbi8vL1xyXG4vLy8gICAgIC8vIC5mb28ge1xyXG4vLy8gICAgIC8vICAgICBmb250LXNpemU6IDEycHg7XHJcbi8vLyAgICAgLy8gICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcclxuLy8vICAgICAvLyAgICAgbGluZS1oZWlnaHQ6IDI7XHJcbi8vLyAgICAgLy8gfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmZvbyB7XHJcbi8vLyAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxMnB4LCBub25lKTtcclxuLy8vICAgICB9XHJcbi8vL1xyXG4vLy8gICAgIC8vIC5mb28ge1xyXG4vLy8gICAgIC8vICAgICBmb250LXNpemU6IDEycHg7XHJcbi8vLyAgICAgLy8gICAgIGZvbnQtc2l6ZTogMC43NXJlbTtcclxuLy8vICAgICAvLyB9XHJcbkBtaXhpbiBmb250LXNpemUoJGZvbnQtc2l6ZSwgJGxpbmUtaGVpZ2h0OiBhdXRvKSB7XHJcbiAgICBmb250LXNpemU6ICRmb250LXNpemU7XHJcbiAgICBmb250LXNpemU6IHJlbSgkZm9udC1zaXplKTtcclxuXHJcbiAgICBAaWYgJGxpbmUtaGVpZ2h0ID09IGF1dG8ge1xyXG4gICAgICAgIGxpbmUtaGVpZ2h0OiBjZWlsKCRmb250LXNpemUgLyAkYmFzZS1saW5lLWhlaWdodCkgKiAoJGJhc2UtbGluZS1oZWlnaHQgLyAkZm9udC1zaXplKTtcclxuICAgIH1cclxuXHJcbiAgICBAZWxzZSB7XHJcblxyXG4gICAgICAgIEBpZiAodHlwZS1vZigkbGluZS1oZWlnaHQpID09IG51bWJlciBvciAkbGluZS1oZWlnaHQgPT0gaW5oZXJpdCBvciAkbGluZS1oZWlnaHQgPT0gbm9ybWFsKSB7XHJcbiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAZWxzZWlmICgkbGluZS1oZWlnaHQgIT0gbm9uZSBhbmQgJGxpbmUtaGVpZ2h0ICE9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIEB3YXJuIFwiXFxcIiN7JGxpbmUtaGVpZ2h0fVxcXCIgaXMgbm90IGEgdmFsaWQgdmFsdWUgZm9yIFxcXCJsaW5lLWhlaWdodFxcXCIuXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8vLyBBcHBseSBwc2V1ZG8gY2xhc3Mgc3R5bGVzIGZvciBsaW5rcyBhbmQgYnV0dG9ucy5cclxuLy8vXHJcbi8vLyBAcGFyYW0ge0Jvb2xlYW59ICRpbmNsdWRlQmFzZVN0YXRlIC0gSWYgZWxlbWVudCBiYXNlIHN0YXRlIHNob3VsZCBiZSBpbmNsdWRlZCBpbiBydWxlc2V0XHJcbi8vL1xyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4vLy9cclxuLy8vICAgICAgICAgQGluY2x1ZGUgcHNldWRvLWNsYXNzZXMoZmFsc2UpIHtcclxuLy8vICAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4vLy8gICAgICAgICB9XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4vLy8gICAgIC8vIH1cclxuLy8vICAgICAvL1xyXG4vLy8gICAgIC8vIC5mb286aG92ZXIsXHJcbi8vLyAgICAgLy8gLmZvbzpmb2N1cyxcclxuLy8vICAgICAvLyAuZm9vOmhvdmVyLFxyXG4vLy8gICAgIC8vIC5mb286YWN0aXZlIHtcclxuLy8vICAgICAvLyAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbi8vLyAgICAgLy8gfVxyXG4vLy9cclxuLy8vIEBleGFtcGxlXHJcbi8vLyAgICAgLmZvbyB7XHJcbi8vLyAgICAgICAgIEBpbmNsdWRlIHBzZXVkby1jbGFzc2VzKHRydWUpIHtcclxuLy8vICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4vLy8gICAgICAgICB9XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vLFxyXG4vLy8gICAgIC8vIC5mb286aG92ZXIsXHJcbi8vLyAgICAgLy8gLmZvbzpmb2N1cyxcclxuLy8vICAgICAvLyAuZm9vOmhvdmVyLFxyXG4vLy8gICAgIC8vIC5mb286YWN0aXZlIHtcclxuLy8vICAgICAvLyAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbi8vLyAgICAgLy8gfVxyXG5AbWl4aW4gcHNldWRvLWNsYXNzZXMoJGluY2x1ZGUtYmFzZS1zdGF0ZTogZmFsc2UpIHtcclxuXHJcbiAgICBAaWYgKCRpbmNsdWRlLWJhc2Utc3RhdGUgPT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAmLFxyXG4gICAgICAgICY6aG92ZXIsXHJcbiAgICAgICAgJjpmb2N1cyxcclxuICAgICAgICAmOmFjdGl2ZSB7XHJcbiAgICAgICAgICAgIEBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAZWxzZWlmICgkaW5jbHVkZS1iYXNlLXN0YXRlID09IGZhbHNlKSB7XHJcblxyXG4gICAgICAgICY6aG92ZXIsXHJcbiAgICAgICAgJjpmb2N1cyxcclxuICAgICAgICAmOmFjdGl2ZSB7XHJcbiAgICAgICAgICAgIEBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vLy8gUHJvdmlkZSBzaW1wbGUgQVBJIHRvIHNlbGVjdG9yIG5lc3RpbmdcclxuLy8vXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNlbGVjdG9yIC0gU2VsZWN0b3JcclxuLy8vXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAgIC5mb28ge1xyXG4vLy8gICAgICAgICBmb250LXdlaWdodDogbm9ybWFsO1xyXG4vLy9cclxuLy8vICAgICAgICAgQGluY2x1ZGUgd2hlbi1pbnNpZGUoXCIuYmFyXCIpIHtcclxuLy8vICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4vLy8gICAgICAgICB9XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbFxyXG4vLy8gICAgIC8vIH1cclxuLy8vICAgICAvL1xyXG4vLy8gICAgIC8vIC5iYXIgLmZvbyB7XHJcbi8vLyAgICAgLy8gICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4vLy8gICAgIC8vIH1cclxuQG1peGluIHdoZW4taW5zaWRlKCRzZWxlY3Rvcikge1xyXG4gICAgI3skc2VsZWN0b3J9ICYge1xyXG4gICAgICAgIEBjb250ZW50O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8vLyBJbnNlcnQgZWxsaXBzaXMgKOKApikuXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgQGluY2x1ZGUgZWxsaXBzaXM7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcclxuLy8vICAgICAvLyAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbi8vLyAgICAgLy8gICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbi8vLyAgICAgLy8gfVxyXG5AbWl4aW4gZWxsaXBzaXMoKSB7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XHJcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBHZXQgYSB6LWluZGV4IHZhbHVlIGZyb20gYSBsYXllciBuYW1lXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRsYXllciAtIExheWVyJ3MgbmFtZVxyXG4vLy8gQHRocm93IEVycm9yIG1lc3NhZ2UgaWYgbGF5ZXIgbmFtZSBpcyBub3QgZm91bmQgaW4gdGhlIGB6LWluZGV4ZXNgIG1hcC5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAgIC5mb28ge1xyXG4vLy8gICAgICAgICBAaW5jbHVkZSB6LWluZGV4KFwibW9kYWxcIik7XHJcbi8vLyAgICAgfVxyXG4vLy9cclxuLy8vICAgICAvLyAuZm9vIHtcclxuLy8vICAgICAvLyAgICAgei1pbmRleDogNDAwMDtcclxuLy8vICAgICAvLyB9XHJcbkBtaXhpbiB6LWluZGV4KCRsYXllcikge1xyXG4gICAgQGlmIG5vdCBtYXAtaGFzLWtleSgkei1pbmRleGVzLCAkbGF5ZXIpIHtcclxuICAgICAgICBAZXJyb3IgXCJUaGVyZSBpcyBubyBsYXllciBuYW1lZCBgI3skbGF5ZXJ9YCBpbiAkei1pbmRleGVzLiBMYXllciBzaG91bGQgYmUgb25lIG9mICN7bWFwLWtleXMoJHotaW5kZXhlcyl9LiBcIjtcclxuICAgIH1cclxuXHJcbiAgICB6LWluZGV4OiBtYXAtZ2V0KCR6LWluZGV4ZXMsICRsYXllcik7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vIEdlbmVyYXRlIG1lZGlhIHF1ZXJpZXMgZnJvbSB0aGUgYWxpYXNlcyBhbmQgY29uZGl0aW9ucyBkZWZpbmVkIGluIHJlc3BvbnNpdmUgc2V0dGluZ3MuXHJcbi8vL1xyXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRtZWRpYS1xdWVyeSAtIE1lZGlhIHF1ZXJ5IGFsaWFzXHJcbi8vL1xyXG4vLy8gQGV4YW1wbGVcclxuLy8vICAgICAuZm9vIHtcclxuLy8vICAgICAgICAgY29sb3I6IGdyZWVuO1xyXG4vLy9cclxuLy8vICAgICAgICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4vLy8gICAgICAgICAgICAgY29sb3I6IHJlZDtcclxuLy8vICAgICAgICAgfVxyXG4vLy8gICAgIH1cclxuLy8vXHJcbi8vLyAgICAgLy8gLmZvbyB7XHJcbi8vLyAgICAgLy8gICAgIGNvbG9yOiBncmVlbjtcclxuLy8vICAgICAvL1xyXG4vLy8gICAgIC8vICAgICBAbWVkaWEgKHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHggYW5kIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4vLy8gICAgIC8vICAgICAgICAgY29sb3I6IHJlZDtcclxuLy8vICAgICAvLyAgICAgfVxyXG4vLy8gICAgIC8vIH1cclxuQG1peGluIG1lZGlhLXF1ZXJ5KCRtZWRpYS1xdWVyeSkge1xyXG5cclxuICAgICRicmVha3BvaW50LWZvdW5kOiBmYWxzZTtcclxuXHJcbiAgICAvLyBMb29wIHRocm91Z2ggdGhlIGxpc3Qgb2YgYnJlYWtwb2ludHMgd2XigJl2ZSBwcm92aWRlZCBpbiBvdXIgc2V0dGluZ3MgZmlsZS5cclxuICAgIEBlYWNoICRicmVha3BvaW50IGluICRicmVha3BvaW50cyB7XHJcbiAgICAgICAgLy8gR3JhYiB0aGUgYWxpYXMgYW5kIHRoZSBjb25kaXRpb24gZnJvbSB0aGVpciByZXNwZWN0aXZlIGxvY2F0aW9ucyBpblxyXG4gICAgICAgIC8vIHRoZSBsaXN0LlxyXG4gICAgICAgICRhbGlhczogbnRoKCRicmVha3BvaW50LCAxKTtcclxuICAgICAgICAkY29uZGl0aW9uOiBudGgoJGJyZWFrcG9pbnQsIDIpO1xyXG5cclxuICAgICAgICAvLyBJZiB0aGUgbWVkaWEgcXVlcnkgd2XigJl2ZSBzcGVjaWZpZWQgaGFzIGFuIGFsaWFzIGFuZCBhIGNvbmRpdGlvbi4uLlxyXG4gICAgICAgIEBpZiAkbWVkaWEtcXVlcnkgPT0gJGFsaWFzIGFuZCAkY29uZGl0aW9uIHtcclxuICAgICAgICAgICAgLy8gLi4udGVsbCB0aGUgbWl4aW4gdGhhdCB3ZeKAmXZlIGZvdW5kIGl0Li4uXHJcbiAgICAgICAgICAgICRicmVha3BvaW50LWZvdW5kOiB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy8gLi4uYW5kIHNwaXQgaXQgb3V0IGhlcmUuXHJcbiAgICAgICAgICAgIEBtZWRpYSAjeyRjb25kaXRpb259IHtcclxuICAgICAgICAgICAgICAgIEBjb250ZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gSWYgdGhlIHVzZXIgc3BlY2lmaWVzIGEgbm9uLWV4aXRlbnQgYWxpYXMsIHNlbmQgdGhlbSBhIHdhcm5pbmcuXHJcbiAgICBAaWYgJGJyZWFrcG9pbnQtZm91bmQgPT0gZmFsc2Uge1xyXG4gICAgICAgIEB3YXJuIFwiQnJlYWtwb2ludCBcXFwiI3skbWVkaWEtcXVlcnl9XFxcIiBkb2VzIG5vdCBleGlzdC5cIjtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vLy8gR2VuZXJhdGUgZ3JpZCB3aWR0aCBjbGFzc2VzLlxyXG4vLy9cclxuLy8vIEBwYXJhbSB7SW50ZWdlciAoc2VwYXJhdGVkIGJ5IHNwYWNlcyl9ICR3aWR0aC1jb2x1bW5zIC0gVGhlIGNvbHVtbnMgd2Ugd2FudCB0aGUgd2lkdGhzIHRvIGhhdmUuXHJcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHdpZHRoLWJyZWFrcG9pbnQgW251bGxdIC0gT3B0aW9uYWwgc3VmZml4IGZvciB0aGUgd2lkdGggY2xhc3Nlcy5cclxuLy8vXHJcbi8vLyBAZXhhbXBsZVxyXG4vLy8gICAgIEBpbmNsdWRlIHdpZHRocygzIDQsIC10YWJsZXQpO1xyXG4vLy9cclxuLy8vICAgICAvLyBXaWxsIGNyZWF0ZSB0aGlyZHMgYW5kIHF1YXJ0ZXJzIGZvciBhIHRhYmxldCBicmVha3BvaW50LlxyXG5AbWl4aW4gd2lkdGhzKCR3aWR0aHMtY29sdW1ucywgJHdpZHRocy1icmVha3BvaW50OiBudWxsKSB7XHJcblxyXG4gICAgLy8gV2lkdGhzIGRlbGltZXRlclxyXG4gICAgJHdpZHRocy1kZWxpbWl0ZXI6IC1vZi07XHJcblxyXG4gICAgLy8gVXNlIGZyYWN0aW9ucyBgPGRpdiBjbGFzcz1cInUtMS80XCI+YCBpbnN0ZWFkIG9mIGA8ZGl2IGNsYXNzPVwidS0xLW9mLTRcIj5gLlxyXG4gICAgJHdpZHRocy11c2UtZnJhY3Rpb25zOiB0cnVlO1xyXG5cclxuICAgIC8vIERlcGVuZGluZyBvbiB3aGF0IHdlIGNob3NlIGZvciBgJHVzZS1mcmFjdGlvbnNgLCBjcmVhdGUgdGhlIHJlbGV2YW50IGRlbGltaXRlci5cclxuICAgIEBpZiAoJHdpZHRocy11c2UtZnJhY3Rpb25zID09IHRydWUpIHtcclxuICAgICAgICAkd2lkdGhzLWRlbGltaXRlcjogXFwvO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgbnVtYmVyIG9mIGNvbHVtbnMgZm9yIGVhY2ggZGVub21pbmF0b3Igb2Ygb3VyIGZyYWN0aW9ucy5cclxuICAgIEBlYWNoICR3aWR0aHMtZGVub21pbmF0b3IgaW4gJHdpZHRocy1jb2x1bW5zIHtcclxuICAgICAgICAvLyBJZiB3ZeKAmXJlIHRyeWluZyB0byBtYWtlIHdob2xlcywganVzdCBzcGl0IGEgMTAwJSB3aWR0aCB1dGlsaXR5IG91dCBvbmUgdGltZSBvbmx5LlxyXG4gICAgICAgIEBpZiAoJHdpZHRocy1kZW5vbWluYXRvciA9PSAxKSB7XHJcbiAgICAgICAgICAgIC51LTEjeyR3aWR0aHMtZGVsaW1pdGVyfTEjeyR3aWR0aHMtYnJlYWtwb2ludH0ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBAZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEJlZ2luIGNyZWF0aW5nIGEgbnVtYmVyYXRvciBmb3Igb3VyIGZyYWN0aW9uIHVwIHVudGlsIHdlIGhpdCB0aGUgZGVub21pbmF0b3IuXHJcbiAgICAgICAgICAgIEBmb3IgJHdpZHRocy1udW1lcmF0b3IgZnJvbSAxIHRvICR3aWR0aHMtZGVub21pbmF0b3Ige1xyXG4gICAgICAgICAgICAgICAgLy8gQnVpbGQgYSBjbGFzcyBpbiB0aGUgZm9ybWF0IGAudS0zLzRgIG9yIGAudS0zLW9mLTRgLlxyXG4gICAgICAgICAgICAgICAgLnUtI3skd2lkdGhzLW51bWVyYXRvcn0jeyR3aWR0aHMtZGVsaW1pdGVyfSN7JHdpZHRocy1kZW5vbWluYXRvcn0jeyR3aWR0aHMtYnJlYWtwb2ludH0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAoJHdpZHRocy1udW1lcmF0b3IgLyAkd2lkdGhzLWRlbm9taW5hdG9yKSAqIDEwMCUgIWltcG9ydGFudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKlxuU0NTUyB2YXJpYWJsZXMgYXJlIGluZm9ybWF0aW9uIGFib3V0IGljb24ncyBjb21waWxlZCBzdGF0ZSwgc3RvcmVkIHVuZGVyIGl0cyBvcmlnaW5hbCBmaWxlIG5hbWVcblxuLmljb24taG9tZSB7XG4gIHdpZHRoOiAkaWNvbi1ob21lLXdpZHRoO1xufVxuXG5UaGUgbGFyZ2UgYXJyYXktbGlrZSB2YXJpYWJsZXMgY29udGFpbiBhbGwgaW5mb3JtYXRpb24gYWJvdXQgYSBzaW5nbGUgaWNvblxuJGljb24taG9tZTogeCB5IG9mZnNldF94IG9mZnNldF95IHdpZHRoIGhlaWdodCB0b3RhbF93aWR0aCB0b3RhbF9oZWlnaHQgaW1hZ2VfcGF0aDtcblxuQXQgdGhlIGJvdHRvbSBvZiB0aGlzIHNlY3Rpb24sIHdlIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHNwcml0ZXNoZWV0IGl0c2VsZlxuJHNwcml0ZXNoZWV0OiB3aWR0aCBoZWlnaHQgaW1hZ2UgJHNwcml0ZXNoZWV0LXNwcml0ZXM7XG4qL1xuJGljb24tbWludXMtYmx1ZS1uYW1lOiAnaWNvbi1taW51cy1ibHVlJztcbiRpY29uLW1pbnVzLWJsdWUteDogMHB4O1xuJGljb24tbWludXMtYmx1ZS15OiAwcHg7XG4kaWNvbi1taW51cy1ibHVlLW9mZnNldC14OiAwcHg7XG4kaWNvbi1taW51cy1ibHVlLW9mZnNldC15OiAwcHg7XG4kaWNvbi1taW51cy1ibHVlLXdpZHRoOiAxNHB4O1xuJGljb24tbWludXMtYmx1ZS1oZWlnaHQ6IDE0cHg7XG4kaWNvbi1taW51cy1ibHVlLXRvdGFsLXdpZHRoOiAyOHB4O1xuJGljb24tbWludXMtYmx1ZS10b3RhbC1oZWlnaHQ6IDE0cHg7XG4kaWNvbi1taW51cy1ibHVlLWltYWdlOiAnL1N0YXRpYy9pbWFnZXMvaWNvbnMvZGlzdC9zcHJpdGUucG5nJztcbiRpY29uLW1pbnVzLWJsdWU6ICgwcHgsIDBweCwgMHB4LCAwcHgsIDE0cHgsIDE0cHgsIDI4cHgsIDE0cHgsICcvU3RhdGljL2ltYWdlcy9pY29ucy9kaXN0L3Nwcml0ZS5wbmcnLCAnaWNvbi1taW51cy1ibHVlJywgKTtcbiRpY29uLXBsdXMtYmx1ZS1uYW1lOiAnaWNvbi1wbHVzLWJsdWUnO1xuJGljb24tcGx1cy1ibHVlLXg6IDE0cHg7XG4kaWNvbi1wbHVzLWJsdWUteTogMHB4O1xuJGljb24tcGx1cy1ibHVlLW9mZnNldC14OiAtMTRweDtcbiRpY29uLXBsdXMtYmx1ZS1vZmZzZXQteTogMHB4O1xuJGljb24tcGx1cy1ibHVlLXdpZHRoOiAxNHB4O1xuJGljb24tcGx1cy1ibHVlLWhlaWdodDogMTRweDtcbiRpY29uLXBsdXMtYmx1ZS10b3RhbC13aWR0aDogMjhweDtcbiRpY29uLXBsdXMtYmx1ZS10b3RhbC1oZWlnaHQ6IDE0cHg7XG4kaWNvbi1wbHVzLWJsdWUtaW1hZ2U6ICcvU3RhdGljL2ltYWdlcy9pY29ucy9kaXN0L3Nwcml0ZS5wbmcnO1xuJGljb24tcGx1cy1ibHVlOiAoMTRweCwgMHB4LCAtMTRweCwgMHB4LCAxNHB4LCAxNHB4LCAyOHB4LCAxNHB4LCAnL1N0YXRpYy9pbWFnZXMvaWNvbnMvZGlzdC9zcHJpdGUucG5nJywgJ2ljb24tcGx1cy1ibHVlJywgKTtcbiRpY29uLW1pbnVzLWJsdWUtMngtbmFtZTogJ2ljb24tbWludXMtYmx1ZUAyeCc7XG4kaWNvbi1taW51cy1ibHVlLTJ4LXg6IDBweDtcbiRpY29uLW1pbnVzLWJsdWUtMngteTogMHB4O1xuJGljb24tbWludXMtYmx1ZS0yeC1vZmZzZXQteDogMHB4O1xuJGljb24tbWludXMtYmx1ZS0yeC1vZmZzZXQteTogMHB4O1xuJGljb24tbWludXMtYmx1ZS0yeC13aWR0aDogMjhweDtcbiRpY29uLW1pbnVzLWJsdWUtMngtaGVpZ2h0OiAyOHB4O1xuJGljb24tbWludXMtYmx1ZS0yeC10b3RhbC13aWR0aDogNTZweDtcbiRpY29uLW1pbnVzLWJsdWUtMngtdG90YWwtaGVpZ2h0OiAyOHB4O1xuJGljb24tbWludXMtYmx1ZS0yeC1pbWFnZTogJy9TdGF0aWMvaW1hZ2VzL2ljb25zL2Rpc3Qvc3ByaXRlQDJ4LnBuZyc7XG4kaWNvbi1taW51cy1ibHVlLTJ4OiAoMHB4LCAwcHgsIDBweCwgMHB4LCAyOHB4LCAyOHB4LCA1NnB4LCAyOHB4LCAnL1N0YXRpYy9pbWFnZXMvaWNvbnMvZGlzdC9zcHJpdGVAMngucG5nJywgJ2ljb24tbWludXMtYmx1ZUAyeCcsICk7XG4kaWNvbi1wbHVzLWJsdWUtMngtbmFtZTogJ2ljb24tcGx1cy1ibHVlQDJ4JztcbiRpY29uLXBsdXMtYmx1ZS0yeC14OiAyOHB4O1xuJGljb24tcGx1cy1ibHVlLTJ4LXk6IDBweDtcbiRpY29uLXBsdXMtYmx1ZS0yeC1vZmZzZXQteDogLTI4cHg7XG4kaWNvbi1wbHVzLWJsdWUtMngtb2Zmc2V0LXk6IDBweDtcbiRpY29uLXBsdXMtYmx1ZS0yeC13aWR0aDogMjhweDtcbiRpY29uLXBsdXMtYmx1ZS0yeC1oZWlnaHQ6IDI4cHg7XG4kaWNvbi1wbHVzLWJsdWUtMngtdG90YWwtd2lkdGg6IDU2cHg7XG4kaWNvbi1wbHVzLWJsdWUtMngtdG90YWwtaGVpZ2h0OiAyOHB4O1xuJGljb24tcGx1cy1ibHVlLTJ4LWltYWdlOiAnL1N0YXRpYy9pbWFnZXMvaWNvbnMvZGlzdC9zcHJpdGVAMngucG5nJztcbiRpY29uLXBsdXMtYmx1ZS0yeDogKDI4cHgsIDBweCwgLTI4cHgsIDBweCwgMjhweCwgMjhweCwgNTZweCwgMjhweCwgJy9TdGF0aWMvaW1hZ2VzL2ljb25zL2Rpc3Qvc3ByaXRlQDJ4LnBuZycsICdpY29uLXBsdXMtYmx1ZUAyeCcsICk7XG4kc3ByaXRlc2hlZXQtd2lkdGg6IDI4cHg7XG4kc3ByaXRlc2hlZXQtaGVpZ2h0OiAxNHB4O1xuJHNwcml0ZXNoZWV0LWltYWdlOiAnL1N0YXRpYy9pbWFnZXMvaWNvbnMvZGlzdC9zcHJpdGUucG5nJztcbiRzcHJpdGVzaGVldC1zcHJpdGVzOiAoJGljb24tbWludXMtYmx1ZSwgJGljb24tcGx1cy1ibHVlLCApO1xuJHNwcml0ZXNoZWV0OiAoMjhweCwgMTRweCwgJy9TdGF0aWMvaW1hZ2VzL2ljb25zL2Rpc3Qvc3ByaXRlLnBuZycsICRzcHJpdGVzaGVldC1zcHJpdGVzLCApO1xuJHJldGluYS1zcHJpdGVzaGVldC13aWR0aDogNTZweDtcbiRyZXRpbmEtc3ByaXRlc2hlZXQtaGVpZ2h0OiAyOHB4O1xuJHJldGluYS1zcHJpdGVzaGVldC1pbWFnZTogJy9TdGF0aWMvaW1hZ2VzL2ljb25zL2Rpc3Qvc3ByaXRlQDJ4LnBuZyc7XG4kcmV0aW5hLXNwcml0ZXNoZWV0LXNwcml0ZXM6ICgkaWNvbi1taW51cy1ibHVlLTJ4LCAkaWNvbi1wbHVzLWJsdWUtMngsICk7XG4kcmV0aW5hLXNwcml0ZXNoZWV0OiAoNTZweCwgMjhweCwgJy9TdGF0aWMvaW1hZ2VzL2ljb25zL2Rpc3Qvc3ByaXRlQDJ4LnBuZycsICRyZXRpbmEtc3ByaXRlc2hlZXQtc3ByaXRlcywgKTtcblxuLypcblRoZXNlIFwicmV0aW5hIGdyb3VwXCIgdmFyaWFibGVzIGFyZSBtYXBwaW5ncyBmb3IgdGhlIG5hbWluZyBhbmQgcGFpcmluZyBvZiBub3JtYWwgYW5kIHJldGluYSBzcHJpdGVzLlxuXG5UaGUgbGlzdCBmb3JtYXR0ZWQgdmFyaWFibGVzIGFyZSBpbnRlbmRlZCBmb3IgbWl4aW5zIGxpa2UgYHJldGluYS1zcHJpdGVgIGFuZCBgcmV0aW5hLXNwcml0ZXNgLlxuKi9cbiRpY29uLW1pbnVzLWJsdWUtZ3JvdXAtbmFtZTogJ2ljb24tbWludXMtYmx1ZSc7XG4kaWNvbi1taW51cy1ibHVlLWdyb3VwOiAoJ2ljb24tbWludXMtYmx1ZScsICRpY29uLW1pbnVzLWJsdWUsICRpY29uLW1pbnVzLWJsdWUtMngsICk7XG4kaWNvbi1wbHVzLWJsdWUtZ3JvdXAtbmFtZTogJ2ljb24tcGx1cy1ibHVlJztcbiRpY29uLXBsdXMtYmx1ZS1ncm91cDogKCdpY29uLXBsdXMtYmx1ZScsICRpY29uLXBsdXMtYmx1ZSwgJGljb24tcGx1cy1ibHVlLTJ4LCApO1xuJHJldGluYS1ncm91cHM6ICgkaWNvbi1taW51cy1ibHVlLWdyb3VwLCAkaWNvbi1wbHVzLWJsdWUtZ3JvdXAsICk7XG5cbi8qXG5UaGUgcHJvdmlkZWQgbWl4aW5zIGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGggdGhlIGFycmF5LWxpa2UgdmFyaWFibGVzXG5cbi5pY29uLWhvbWUge1xuICBAaW5jbHVkZSBzcHJpdGUtd2lkdGgoJGljb24taG9tZSk7XG59XG5cbi5pY29uLWVtYWlsIHtcbiAgQGluY2x1ZGUgc3ByaXRlKCRpY29uLWVtYWlsKTtcbn1cblxuRXhhbXBsZSB1c2FnZSBpbiBIVE1MOlxuXG5gZGlzcGxheTogYmxvY2tgIHNwcml0ZTpcbjxkaXYgY2xhc3M9XCJpY29uLWhvbWVcIj48L2Rpdj5cblxuVG8gY2hhbmdlIGBkaXNwbGF5YCAoZS5nLiBgZGlzcGxheTogaW5saW5lLWJsb2NrO2ApLCB3ZSBzdWdnZXN0IHVzaW5nIGEgY29tbW9uIENTUyBjbGFzczpcblxuLy8gQ1NTXG4uaWNvbiB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLy8gSFRNTFxuPGkgY2xhc3M9XCJpY29uIGljb24taG9tZVwiPjwvaT5cbiovXG5AbWl4aW4gc3ByaXRlLXdpZHRoKCRzcHJpdGUpIHtcbiAgd2lkdGg6IG50aCgkc3ByaXRlLCA1KTtcbn1cblxuQG1peGluIHNwcml0ZS1oZWlnaHQoJHNwcml0ZSkge1xuICBoZWlnaHQ6IG50aCgkc3ByaXRlLCA2KTtcbn1cblxuQG1peGluIHNwcml0ZS1wb3NpdGlvbigkc3ByaXRlKSB7XG4gICRzcHJpdGUtb2Zmc2V0LXg6IG50aCgkc3ByaXRlLCAzKTtcbiAgJHNwcml0ZS1vZmZzZXQteTogbnRoKCRzcHJpdGUsIDQpO1xuICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiAkc3ByaXRlLW9mZnNldC14ICAkc3ByaXRlLW9mZnNldC15O1xufVxuXG5AbWl4aW4gc3ByaXRlLWltYWdlKCRzcHJpdGUpIHtcbiAgJHNwcml0ZS1pbWFnZTogbnRoKCRzcHJpdGUsIDkpO1xuICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoI3skc3ByaXRlLWltYWdlfSk7XG59XG5cbkBtaXhpbiBzcHJpdGUoJHNwcml0ZSkge1xuICBAaW5jbHVkZSBzcHJpdGUtaW1hZ2UoJHNwcml0ZSk7XG4gIEBpbmNsdWRlIHNwcml0ZS1wb3NpdGlvbigkc3ByaXRlKTtcbiAgQGluY2x1ZGUgc3ByaXRlLXdpZHRoKCRzcHJpdGUpO1xuICBAaW5jbHVkZSBzcHJpdGUtaGVpZ2h0KCRzcHJpdGUpO1xufVxuXG4vKlxuVGhlIGByZXRpbmEtc3ByaXRlYCBtaXhpbiBzZXRzIHVwIHJ1bGVzIGFuZCBhIG1lZGlhIHF1ZXJ5IGZvciBhIHNwcml0ZS9yZXRpbmEgc3ByaXRlLlxuICBJdCBzaG91bGQgYmUgdXNlZCB3aXRoIGEgXCJyZXRpbmEgZ3JvdXBcIiB2YXJpYWJsZS5cblxuVGhlIG1lZGlhIHF1ZXJ5IGlzIGZyb20gQ1NTIFRyaWNrczogaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9zbmlwcGV0cy9jc3MvcmV0aW5hLWRpc3BsYXktbWVkaWEtcXVlcnkvXG5cbiRpY29uLWhvbWUtZ3JvdXA6ICgnaWNvbi1ob21lJywgJGljb24taG9tZSwgJGljb24taG9tZS0yeCwgKTtcblxuLmljb24taG9tZSB7XG4gIEBpbmNsdWRlIHJldGluYS1zcHJpdGUoJGljb24taG9tZS1ncm91cCk7XG59XG4qL1xuQG1peGluIHNwcml0ZS1iYWNrZ3JvdW5kLXNpemUoJHNwcml0ZSkge1xuICAkc3ByaXRlLXRvdGFsLXdpZHRoOiBudGgoJHNwcml0ZSwgNyk7XG4gICRzcHJpdGUtdG90YWwtaGVpZ2h0OiBudGgoJHNwcml0ZSwgOCk7XG4gIGJhY2tncm91bmQtc2l6ZTogJHNwcml0ZS10b3RhbC13aWR0aCAkc3ByaXRlLXRvdGFsLWhlaWdodDtcbn1cblxuQG1peGluIHJldGluYS1zcHJpdGUoJHJldGluYS1ncm91cCkge1xuICAkbm9ybWFsLXNwcml0ZTogbnRoKCRyZXRpbmEtZ3JvdXAsIDIpO1xuICAkcmV0aW5hLXNwcml0ZTogbnRoKCRyZXRpbmEtZ3JvdXAsIDMpO1xuICBAaW5jbHVkZSBzcHJpdGUoJG5vcm1hbC1zcHJpdGUpO1xuXG4gIEBtZWRpYSAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSxcbiAgICAgICAgIChtaW4tcmVzb2x1dGlvbjogMTkyZHBpKSB7XG4gICAgQGluY2x1ZGUgc3ByaXRlLWltYWdlKCRyZXRpbmEtc3ByaXRlKTtcbiAgICBAaW5jbHVkZSBzcHJpdGUtYmFja2dyb3VuZC1zaXplKCRub3JtYWwtc3ByaXRlKTtcbiAgfVxufVxuXG4vKlxuVGhlIGBzcHJpdGVzYCBtaXhpbiBnZW5lcmF0ZXMgaWRlbnRpY2FsIG91dHB1dCB0byB0aGUgQ1NTIHRlbXBsYXRlXG4gIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBpbnNpZGUgb2YgU0NTU1xuXG5AaW5jbHVkZSBzcHJpdGVzKCRzcHJpdGVzaGVldC1zcHJpdGVzKTtcbiovXG5AbWl4aW4gc3ByaXRlcygkc3ByaXRlcykge1xuICBAZWFjaCAkc3ByaXRlIGluICRzcHJpdGVzIHtcbiAgICAkc3ByaXRlLW5hbWU6IG50aCgkc3ByaXRlLCAxMCk7XG4gICAgLiN7JHNwcml0ZS1uYW1lfSB7XG4gICAgICBAaW5jbHVkZSBzcHJpdGUoJHNwcml0ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qXG5UaGUgYHJldGluYS1zcHJpdGVzYCBtaXhpbiBnZW5lcmF0ZXMgYSBDU1MgcnVsZSBhbmQgbWVkaWEgcXVlcnkgZm9yIHJldGluYSBncm91cHNcbiAgVGhpcyB5aWVsZHMgdGhlIHNhbWUgb3V0cHV0IGFzIENTUyByZXRpbmEgdGVtcGxhdGUgYnV0IGNhbiBiZSBvdmVycmlkZGVuIGluIFNDU1NcblxuQGluY2x1ZGUgcmV0aW5hLXNwcml0ZXMoJHJldGluYS1ncm91cHMpO1xuKi9cbkBtaXhpbiByZXRpbmEtc3ByaXRlcygkcmV0aW5hLWdyb3Vwcykge1xuICBAZWFjaCAkcmV0aW5hLWdyb3VwIGluICRyZXRpbmEtZ3JvdXBzIHtcbiAgICAkc3ByaXRlLW5hbWU6IG50aCgkcmV0aW5hLWdyb3VwLCAxKTtcbiAgICAuI3skc3ByaXRlLW5hbWV9IHtcbiAgICAgIEBpbmNsdWRlIHJldGluYS1zcHJpdGUoJHJldGluYS1ncm91cCk7XG4gICAgfVxuICB9XG59XG4iLCIvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vIE5vcm1hbGl6ZS5jc3NcclxuLy9cclxuLy8gdjQuMS4xXHJcbi8vIGh0dHA6Ly9naXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzc1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiAxLiBDaGFuZ2UgdGhlIGRlZmF1bHQgZm9udCBmYW1pbHkgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gSUUgYW5kIGlPUy5cclxuICovXHJcbmh0bWwge1xyXG4gICAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cclxuICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXHJcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgbWFyZ2luIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxyXG4gKi9cclxuYm9keSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbn1cclxuXHJcbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUsIGFuZCBGaXJlZm94LlxyXG4gKiAyLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cclxuICovXHJcbmFydGljbGUsXHJcbmFzaWRlLFxyXG5kZXRhaWxzLCAvKiAxICovXHJcbmZpZ2NhcHRpb24sXHJcbmZpZ3VyZSxcclxuZm9vdGVyLFxyXG5oZWFkZXIsXHJcbm1haW4sIC8qIDIgKi9cclxubWVudSxcclxubmF2LFxyXG5zZWN0aW9uLFxyXG5zdW1tYXJ5IHsgLyogMSAqL1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cclxuICovXHJcbmF1ZGlvLFxyXG5jYW52YXMsXHJcbnByb2dyZXNzLFxyXG52aWRlbyB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxyXG4gKi9cclxuYXVkaW86bm90KFtjb250cm9sc10pIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICBoZWlnaHQ6IDA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxyXG4gKi9cclxucHJvZ3Jlc3Mge1xyXG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAtLlxyXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cclxuICovXHJcbnRlbXBsYXRlLCAvKiAxICovXHJcbltoaWRkZW5dIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbn1cclxuXHJcbi8qIExpbmtzXHJcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gUmVtb3ZlIGdhcHMgaW4gbGlua3MgdW5kZXJsaW5lIGluIGlPUyA4KyBhbmQgU2FmYXJpIDgrLlxyXG4gKiAyLiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXHJcbiAqL1xyXG5hIHtcclxuICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXA6IG9iamVjdHM7IC8qIDEgKi9cclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcclxuICogaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXHJcbiAqL1xyXG5hOmFjdGl2ZSxcclxuYTpob3ZlciB7XHJcbiAgICBvdXRsaW5lLXdpZHRoOiAwO1xyXG59XHJcblxyXG4vKiBUZXh0LWxldmVsIHNlbWFudGljc1xyXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuLyoqXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXHJcbiAqIDIuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBGaXJlZm94IDM5LS5cclxuICovXHJcbmFiYnJbdGl0bGVdIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAxICovXHJcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDEgKi9cclxuICAgIGJvcmRlci1ib3R0b206IG5vbmU7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFByZXZlbnQgdGhlIGR1cGxpY2F0ZSBhcHBsaWNhdGlvbiBvZiBgYm9sZGVyYCBieSB0aGUgbmV4dCBydWxlIGluIFNhZmFyaSA2LlxyXG4gKi9cclxuYixcclxuc3Ryb25nIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cclxuICovXHJcbmIsXHJcbnN0cm9uZyB7XHJcbiAgICBmb250LXdlaWdodDogYm9sZGVyO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc3R5bGUgaW4gQW5kcm9pZCA0LjMtLlxyXG4gKi9cclxuZGZuIHtcclxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIGZvbnQgc2l6ZSBhbmQgbWFyZ2luIG9uIGBoMWAgZWxlbWVudHMgd2l0aGluIGBzZWN0aW9uYCBhbmRcclxuICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cclxuICovXHJcbmgxIHtcclxuICAgIG1hcmdpbjogLjY3ZW0gMDtcclxuICAgIGZvbnQtc2l6ZTogMmVtO1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxyXG4gKi9cclxubWFyayB7XHJcbiAgICBjb2xvcjogIzAwMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cclxuICovXHJcbnNtYWxsIHtcclxuICAgIGZvbnQtc2l6ZTogODAlO1xyXG59XHJcblxyXG4vKipcclxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgZWxlbWVudHMgZnJvbSBhZmZlY3RpbmcgdGhlIGxpbmUgaGVpZ2h0IGluXHJcbiAqIGFsbCBicm93c2Vycy5cclxuICovXHJcbnN1Yixcclxuc3VwIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGZvbnQtc2l6ZTogNzUlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDA7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbn1cclxuXHJcbnN1YiB7XHJcbiAgICBib3R0b206IC0uMjVlbTtcclxufVxyXG5cclxuc3VwIHtcclxuICAgIHRvcDogLS41ZW07XHJcbn1cclxuXHJcbi8qIEVtYmVkZGVkIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cclxuICovXHJcbmltZyB7XHJcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBIaWRlIHRoZSBvdmVyZmxvdyBpbiBJRS5cclxuICovXHJcbnN2Zzpub3QoOnJvb3QpIHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbn1cclxuXHJcbi8qIEdyb3VwaW5nIGNvbnRlbnRcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5jb2RlLFxyXG5rYmQsXHJcbnByZSxcclxuc2FtcCB7XHJcbiAgICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cclxuICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXHJcbiAqL1xyXG5maWd1cmUge1xyXG4gICAgbWFyZ2luOiAxZW0gNDBweDtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXHJcbiAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxyXG4gKi9cclxuaHIge1xyXG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cclxuICAgIGhlaWdodDogMDsgLyogMSAqL1xyXG4gICAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cclxufVxyXG5cclxuLyogRm9ybXNcclxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbi8qKlxyXG4gKiAxLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXHJcbiAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxyXG4gKi9cclxuYnV0dG9uLFxyXG5pbnB1dCxcclxuc2VsZWN0LFxyXG50ZXh0YXJlYSB7XHJcbiAgICBtYXJnaW46IDA7IC8qIDEgKi9cclxuICAgIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlc3RvcmUgdGhlIGZvbnQgd2VpZ2h0IHVuc2V0IGJ5IHRoZSBwcmV2aW91cyBydWxlLlxyXG4gKi9cclxub3B0Z3JvdXAge1xyXG4gICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cclxuICogMS4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZS5cclxuICovXHJcbmJ1dHRvbixcclxuaW5wdXQgeyAvKiAxICovXHJcbiAgICBvdmVyZmxvdzogdmlzaWJsZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgaW5oZXJpdGFuY2Ugb2YgdGV4dCB0cmFuc2Zvcm0gaW4gRWRnZSwgRmlyZWZveCwgYW5kIElFLlxyXG4gKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXHJcbiAqL1xyXG5idXR0b24sXHJcbnNlbGVjdCB7IC8qIDEgKi9cclxuICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gUHJldmVudCBhIFdlYktpdCBidWcgd2hlcmUgKDIpIGRlc3Ryb3lzIG5hdGl2ZSBgYXVkaW9gIGFuZCBgdmlkZW9gXHJcbiAqICAgIGNvbnRyb2xzIGluIEFuZHJvaWQgNC5cclxuICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cclxuICovXHJcbmJ1dHRvbixcclxuaHRtbCBbdHlwZT1cImJ1dHRvblwiXSwgLyogMSAqL1xyXG5bdHlwZT1cInJlc2V0XCJdLFxyXG5bdHlwZT1cInN1Ym1pdFwiXSB7XHJcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cclxuICovXHJcbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcclxuW3R5cGU9XCJidXR0b25cIl06Oi1tb3otZm9jdXMtaW5uZXIsXHJcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXHJcblt0eXBlPVwic3VibWl0XCJdOjotbW96LWZvY3VzLWlubmVyIHtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBib3JkZXItc3R5bGU6IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXHJcbiAqL1xyXG5idXR0b246LW1vei1mb2N1c3JpbmcsXHJcblt0eXBlPVwiYnV0dG9uXCJdOi1tb3otZm9jdXNyaW5nLFxyXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxyXG5bdHlwZT1cInN1Ym1pdFwiXTotbW96LWZvY3VzcmluZyB7XHJcbiAgICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGFuZ2UgdGhlIGJvcmRlciwgbWFyZ2luLCBhbmQgcGFkZGluZyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cclxuICovXHJcbmZpZWxkc2V0IHtcclxuICAgIG1hcmdpbjogMCAycHg7XHJcbiAgICBwYWRkaW5nOiAuMzVlbSAuNjI1ZW0gLjc1ZW07XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgdGV4dCB3cmFwcGluZyBpbiBFZGdlIGFuZCBJRS5cclxuICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxyXG4gKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XHJcbiAqICAgIGBmaWVsZHNldGAgZWxlbWVudHMgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxubGVnZW5kIHtcclxuICAgIGRpc3BsYXk6IHRhYmxlOyAvKiAxICovXHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94OyAvKiAxICovXHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7IC8qIDEgKi9cclxuICAgIHBhZGRpbmc6IDA7IC8qIDMgKi9cclxuICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cclxuICAgIGNvbG9yOiBpbmhlcml0OyAvKiAyICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxyXG4gKi9cclxudGV4dGFyZWEge1xyXG4gICAgb3ZlcmZsb3c6IGF1dG87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC0uXHJcbiAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXHJcbiAqL1xyXG5bdHlwZT1cImNoZWNrYm94XCJdLFxyXG5bdHlwZT1cInJhZGlvXCJdIHtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7IC8qIDEgKi9cclxuICAgIHBhZGRpbmc6IDA7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cclxuICovXHJcblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxyXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XHJcbiAgICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cclxuICogMi4gQ29ycmVjdCB0aGUgb3V0bGluZSBzdHlsZSBpbiBTYWZhcmkuXHJcbiAqL1xyXG5bdHlwZT1cInNlYXJjaFwiXSB7XHJcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDsgLyogMSAqL1xyXG4gICAgb3V0bGluZS1vZmZzZXQ6IC0ycHg7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWC5cclxuICovXHJcblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxyXG5bdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XHJcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3JyZWN0IHRoZSB0ZXh0IHN0eWxlIG9mIHBsYWNlaG9sZGVycyBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXHJcbiAqL1xyXG46Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXIge1xyXG4gICAgY29sb3I6IGluaGVyaXQ7XHJcbiAgICBvcGFjaXR5OiAuNTQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxyXG4gKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXHJcbiAqL1xyXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXHJcbiAgICBmb250OiBpbmhlcml0OyAvKiAyICovXHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjUkVTRVRcclxuLy9cclxuLy8gVGhlIHJlc2V0IG1vZHVsZSBpcyBhIGNvbnNpZGVyZWQgYXBwcm9hY2ggdG8gcmVzZXR0aW5nIGVsZW1lbnRzLiBJdFxyXG4vLyBzZWxlY3RpdmVseSByZW1vdmVzIG1hcmdpbnMgYW5kIHBhZGRpbmdzIGZyb20gY2VydGFpbiBlbGVtZW50cywgYW5kXHJcbi8vIHByb3ZpZGVzIHNvbWUgc2Vuc2libGUgZGVmYXVsdHMgZm9yIHNvbWUgb3RoZXJzLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBBcyB3ZWxsIGFzIHVzaW5nIG5vcm1hbGl6ZS5jc3MsIGl0IGlzIG9mdGVuIGFkdmFudGFnZW91cyB0byByZW1vdmUgYWxsIG1hcmdpbnMgZnJvbSBjZXJ0YWluIGVsZW1lbnRzLlxyXG4gKi9cclxuYm9keSxcclxuaDEsXHJcbmgyLFxyXG5oMyxcclxuaDQsXHJcbmg1LFxyXG5oNixcclxucCxcclxuYmxvY2txdW90ZSxcclxucHJlLFxyXG5kbCxcclxuZGQsXHJcbm9sLFxyXG51bCxcclxuZm9ybSxcclxuZmllbGRzZXQsXHJcbmxlZ2VuZCxcclxuZmlndXJlLFxyXG50YWJsZSxcclxudGgsXHJcbnRkLFxyXG5jYXB0aW9uLFxyXG5ociB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdpdmUgYSBoZWxwIGN1cnNvciB0byBlbGVtZW50cyB0aGF0IGdpdmUgZXh0cmEgaW5mbyBvbiBgOmhvdmVyYC5cclxuICovXHJcbmFiYnJbdGl0bGVdLFxyXG5kZm5bdGl0bGVdIHtcclxuICAgIGN1cnNvcjogaGVscDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgdW5kZXJsaW5lcyBmcm9tIHBvdGVudGlhbGx5IHRyb3VibGVzb21lIGVsZW1lbnRzLlxyXG4gKi9cclxudSxcclxuaW5zIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBBcHBseSBmYXV4IHVuZGVybGluZXMgdG8gaW5zZXJ0ZWQgdGV4dCB2aWEgYGJvcmRlci1ib3R0b21gLlxyXG4gKi9cclxuaW5zIHtcclxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDtcclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNCT1gtU0laSU5HXHJcbi8vXHJcbi8vIFRoZSBib3gtc2l6aW5nIG1vZHVsZSBjYXVzZXMgYWxsIGVsZW1lbnRzIHRvIHVzZSB0aGUgbW9yZSB1c2VmdWxcclxuLy8gYm9yZGVyLWJveCBib3ggbW9kZWwuXHJcbi8vIGh0dHA6Ly9jc3MtdHJpY2tzLmNvbS9pbmhlcml0aW5nLWJveC1zaXppbmctcHJvYmFibHktc2xpZ2h0bHktYmV0dGVyLWJlc3QtcHJhY3RpY2VcclxuLy8gaHR0cDovL3BhdWxpcmlzaC5jb20vMjAxMi9ib3gtc2l6aW5nLWJvcmRlci1ib3gtZnR3XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuaHRtbCB7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG59XHJcblxyXG5cclxuKiB7XHJcbiAgICAmLFxyXG4gICAgJjo6YmVmb3JlLFxyXG4gICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgIGJveC1zaXppbmc6IGluaGVyaXQ7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjU0hBUkVEXHJcbi8vXHJcbi8vIFRoZSBzaGFyZWQgbW9kdWxlIGNvbnRhaW5zIHNldmVyYWwgaGlnaC1sZXZlbCBydWxlc2V0cyB3aGljaFxyXG4vLyBhcHBseSBhIGNvbnNpc3RlbnQsIHNoYXJlZCBkZWNsYXJhdGlvbiAodHlwaWNhbGx5IG1hcmdpbnMpIGFjcm9zcyBhXHJcbi8vIG51bWJlciBvZiBlbGVtZW50cy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogU2V0IGN1c3RvbSBvdXRsaW5lIGNvbG9yIGZvciBhbGwgZWxlbWVudHNcclxuICovXHJcbioge1xyXG4gICAgb3V0bGluZS1jb2xvcjogJGNvbG9yLWxpbmstb3V0bGluZTtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogV2hlcmUgYG1hcmdpbi1ib3R0b21gIGlzIGNvbmNlcm5lZCx0aGlzIHZhbHVlIHdpbGwgYmUgdGhlIHNhbWUgYXMgdGhlXHJcbiAqIGJhc2UgbGluZS1oZWlnaHQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgYSBjb25zaXN0ZW50IHZlcnRpY2FsIHJoeXRobS5cclxuICogaHR0cDovL2Nzc3dpemFyZHJ5LmNvbS8yMDEyLzA2L3NpbmdsZS1kaXJlY3Rpb24tbWFyZ2luLWRlY2xhcmF0aW9uc1xyXG4gKi9cclxuaDEsXHJcbmgyLFxyXG5oMyxcclxuaDQsXHJcbmg1LFxyXG5oNixcclxudWwsXHJcbm9sLFxyXG5kbCxcclxuYmxvY2txdW90ZSxcclxucCxcclxuYWRkcmVzcyxcclxuaHIsXHJcbnRhYmxlLFxyXG5maWVsZHNldCxcclxuZmlndXJlLFxyXG5wcmUsXHJcbiVtYXJnaW4tYm90dG9tIHtcclxuICAgIG1hcmdpbi1ib3R0b206ICRiYXNlLXNwYWNpbmctdW5pdDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogV2hlcmUgYG1hcmdpbi1sZWZ0YCBpcyBjb25jZXJuZWQgd2Ugd2FudCB0byB0cnkgYW5kIGluZGVudCBjZXJ0YWluIGVsZW1lbnRzXHJcbiAqIGJ5IGEgY29uc2lzdGVudCBhbW91bnQuIERlZmluZSB0aGF0IGFtb3VudCBvbmNlLCBoZXJlLlxyXG4gKi9cclxudWwsXHJcbm9sLFxyXG5kZCxcclxuJW1hcmdpbi1sZWZ0IHtcclxuICAgIG1hcmdpbi1sZWZ0OiAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0JVVFRPTlNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKlxyXG4gKiAxLiBQcmV2ZW50IHRvdWNoIGRlbGF5IG9uIHRvdWNoIGRldmljZXMgKGh0dHBzOi8vYWRhY3Rpby5jb20vam91cm5hbC8xMDAxOSlcclxuICovXHJcbmJ1dHRvbixcclxuaW5wdXRbdHlwZT1cImJ1dHRvblwiXSB7XHJcbiAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjsgLyogWzFdICovXHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjQ09ERVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbmNvZGUsXHJcbmtiZCxcclxuc2FtcCxcclxucHJlIHtcclxuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1tb25vc3BhY2U7XHJcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgICBib3JkZXItcmFkaXVzOiAkYmFzZS1yb3VuZC11bml0O1xyXG59XHJcblxyXG5cclxuY29kZSxcclxua2JkIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxNHB4KTtcclxuICAgIHBhZGRpbmc6IGVtKDJweCkgJGJhc2Utc3BhY2luZy11bml0LS10aW55O1xyXG59XHJcblxyXG5cclxuY29kZSB7XHJcbiAgICBjb2xvcjogJGNvbG9yLWNvZGU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItY29kZS1iYWNrZ3JvdW5kO1xyXG59XHJcblxyXG5cclxua2JkIHtcclxuICAgIGNvbG9yOiAkY29sb3Ita2JkO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWtiZC1iYWNrZ3JvdW5kO1xyXG59XHJcblxyXG5cclxucHJlIHtcclxuICAgIHBhZGRpbmc6ICRiYXNlLXNwYWNpbmctdW5pdC0tc21hbGw7XHJcbiAgICBvdmVyZmxvdzogYXV0bztcclxuICAgIGNvbG9yOiAkY29sb3ItcHJlO1xyXG4gICAgd2hpdGUtc3BhY2U6IHByZTtcclxuICAgIHdvcmQtd3JhcDogbm9ybWFsO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLXByZS1iYWNrZ3JvdW5kO1xyXG5cclxuICAgIGNvZGUsXHJcbiAgICBrYmQge1xyXG4gICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5zYW1wIHtcclxuICAgIGNvbG9yOiAkY29sb3Itc2FtcDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1zYW1wLWJhY2tncm91bmQ7XHJcbn1cclxuXHJcblxyXG52YXIge1xyXG4gICAgY29sb3I6ICRjb2xvci12YXI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItdmFyLWJhY2tncm91bmQ7XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjRk9STVNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKlxyXG4gKiAxLiBQcmV2ZW50IHRvdWNoIGRlbGF5IG9uIHRvdWNoIGRldmljZXMgKGh0dHBzOi8vYWRhY3Rpby5jb20vam91cm5hbC8xMDAxOSlcclxuICovXHJcbmlucHV0LFxyXG5zZWxlY3QsXHJcbnRleHRhcmVhLFxyXG5sYWJlbCB7XHJcbiAgICB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbjsgLyogWzFdICovXHJcbn1cclxuXHJcblxyXG5pbnB1dFt0eXBlPXRleHRdLFxyXG5pbnB1dFt0eXBlPXBhc3N3b3JkXSxcclxuaW5wdXRbdHlwZT1zZWxlY3RdLFxyXG5pbnB1dFt0eXBlPWNvbG9yXSxcclxuaW5wdXRbdHlwZT1kYXRlXSxcclxuaW5wdXRbdHlwZT1kYXRldGltZV0sXHJcbmlucHV0W3R5cGU9ZW1haWxdLFxyXG5pbnB1dFt0eXBlPW1vbnRoXSxcclxuaW5wdXRbdHlwZT1udW1iZXJdLFxyXG5pbnB1dFt0eXBlPXJhbmdlXSxcclxuaW5wdXRbdHlwZT1zZWFyY2hdLFxyXG5pbnB1dFt0eXBlPXRlbF0sXHJcbmlucHV0W3R5cGU9dGltZV0sXHJcbmlucHV0W3R5cGU9dXJsXSxcclxuaW5wdXRbdHlwZT13ZWVrXSxcclxudGV4dGFyZWEsXHJcbnNlbGVjdCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogJGJhc2Utc3BhY2luZy11bml0LS10aW55O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogJGJhc2Utc3BhY2luZy11bml0LS1zbWFsbDtcclxuICAgIGNvbG9yOiAkY29sb3ItZm9ybTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1mb3JtLWJhY2tncm91bmQ7XHJcbiAgICBib3JkZXI6IGVtKDFweCkgc29saWQgJGNvbG9yLWZvcm0tYm9yZGVyO1xyXG4gICAgYm9yZGVyLXJhZGl1czogJGJhc2Utcm91bmQtdW5pdDtcclxuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIC4wNzUpO1xyXG4gICAgdHJhbnNpdGlvbjogYm9yZGVyLWNvbG9yIGVhc2UtaW4tb3V0IC4xNXMsIGJveC1zaGFkb3cgZWFzZS1pbi1vdXQgLjE1cztcclxuXHJcbiAgICAmOmZvY3VzIHtcclxuICAgICAgICBib3JkZXItY29sb3I6ICRjb2xvci1mb3JtLWJvcmRlci1mb2N1cztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmlucHV0W3R5cGU9Y2hlY2tib3hdLFxyXG5pbnB1dFt0eXBlPXJhZGlvXSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAkYmFzZS1zcGFjaW5nLXVuaXQtLXNtYWxsO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAkYmFzZS1zcGFjaW5nLXVuaXQtLXRpbnk7XHJcbn1cclxuXHJcblxyXG5sYWJlbCB7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAkYmFzZS1zcGFjaW5nLXVuaXQtLXRpbnk7XHJcbn1cclxuXHJcblxyXG5maWVsZHNldCB7XHJcbiAgICBwYWRkaW5nLXRvcDogJGJhc2Utc3BhY2luZy11bml0LS10aW55O1xyXG4gICAgcGFkZGluZy1sZWZ0OiAkYmFzZS1zcGFjaW5nLXVuaXQtLXNtYWxsO1xyXG4gICAgYm9yZGVyLWNvbG9yOiAkY29sb3ItZm9ybS1maWVsZHNldC1ib3JkZXI7XHJcbiAgICBib3JkZXItcmFkaXVzOiAkYmFzZS1yb3VuZC11bml0O1xyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0hFQURJTkdTXHJcbi8vXHJcbi8vIFNpemVzIGFyZSBkZWZpbmVkIGluIF9zZXR0aW5ncy5oZWFkaW5ncy5zY3NzXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuaDEge1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtMSk7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTEtdGFibGV0KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmgyIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTIpO1xyXG5cclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtMi10YWJsZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuaDMge1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtMyk7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTMtdGFibGV0KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmg0IHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTQpO1xyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS00LXRhYmxldCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5oNSB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS01KTtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtNS10YWJsZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuaDYge1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtNik7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTYtdGFibGV0KTtcclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNJTUFHRVNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogMS4gRmx1aWQgaW1hZ2VzIGZvciByZXNwb25zaXZlIHB1cnBvc2VzLlxyXG4gKiAyLiBPZmZzZXQgYGFsdGAgdGV4dCBmcm9tIHN1cnJvdW5kaW5nIGNvcHkuXHJcbiAqIDMuIFNldHRpbmcgYHZlcnRpY2FsLWFsaWduYCByZW1vdmVzIHRoZSB3aGl0ZXNwYWNlIHRoYXQgYXBwZWFycyB1bmRlciBgaW1nYFxyXG4gKiAgICBlbGVtZW50cyB3aGVuIHRoZXkgYXJlIGRyb3BwZWQgaW50byBhIHBhZ2UgYXMtaXMuIFNhZmVyIGFsdGVybmF0aXZlIHRvXHJcbiAqICAgIHVzaW5nIGBkaXNwbGF5OiBibG9jaztgLlxyXG4gKi9cclxuaW1nIHtcclxuICAgIG1heC13aWR0aDogMTAwJTsgLyogWzFdICovXHJcbiAgICBmb250LXN0eWxlOiBpdGFsaWM7IC8qIFsyXSAqL1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogWzNdICovXHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIDEuIEdvb2dsZSBNYXBzIGJyZWFrcyBpZiBgbWF4LXdpZHRoOiAxMDAlYCBhY3RzIHVwb24gaXQ7IHVzZSB0aGVpciBzZWxlY3RvclxyXG4gKiAgICB0byByZW1vdmUgdGhlIGVmZmVjdHMuXHJcbiAqIDIuIElmIGEgYHdpZHRoYCBhbmQvb3IgYGhlaWdodGAgYXR0cmlidXRlIGhhdmUgYmVlbiBleHBsaWNpdGx5IGRlZmluZWQsIGxldOKAmXNcclxuICogICAgbm90IG1ha2UgdGhlIGltYWdlIGZsdWlkLlxyXG4gKi9cclxuLmdtLXN0eWxlIGltZywgLyogWzFdICovXHJcbmltZ1t3aWR0aF0sIC8qIFsyXSAqL1xyXG5pbWdbaGVpZ2h0XSB7IC8qIFsyXSAqL1xyXG4gICAgbWF4LXdpZHRoOiBub25lO1xyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0xJTktTXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLypcclxuICogMS4gUHJldmVudCB0b3VjaCBkZWxheSBvbiB0b3VjaCBkZXZpY2VzIChodHRwczovL2FkYWN0aW8uY29tL2pvdXJuYWwvMTAwMTkpXHJcbiAqL1xyXG5hIHtcclxuICAgIGNvbG9yOiAkY29sb3ItbGluaztcclxuICAgIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uOyAvKiBbMV0gKi9cclxuXHJcbiAgICBAaW5jbHVkZSBwc2V1ZG8tY2xhc3NlcyhmYWxzZSkge1xyXG4gICAgICAgIGNvbG9yOiAkY29sb3ItbGluay1ob3ZlcjtcclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNMSVNUU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiAxLiBSZW1vdmUgZXh0cmEgdmVydGljYWwgc3BhY2luZyB3aGVuIG5lc3RpbmcgbGlzdHMuXHJcbiAqL1xyXG5saSB7XHJcbiAgICA+IHVsLFxyXG4gICAgPiBvbCB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDsgLyogWzFdICovXHJcbiAgICB9XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjUEFHRVxyXG4vL1xyXG4vLyBUaGUgcGFnZSBtb2R1bGUgaXMgYSB2ZXJ5IGhpZ2gtbGV2ZWwgbW9kdWxlIHdoaWNoIHN0eWxlcyB2ZXJ5IGJhc2ljLCBnbG9iYWwsXHJcbi8vIHBhZ2UtbGV2ZWwgYXNwZWN0cyBzdWNoIGF0IHRoZSBwcm9qZWN04oCZcyBiYXNlIGZvbnQtc2l6ZSBhbmQgbGluZS1oZWlnaHQuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIDEuIFNldCB0aGUgZGVmYXVsdCBgZm9udC1zaXplYCBhbmQgYGxpbmUtaGVpZ2h0YCBmb3IgdGhlIGVudGlyZSBwcm9qZWN0LFxyXG4gKiAgICBzb3VyY2VkIGZyb20gb3VyIGRlZmF1bHQgdmFyaWFibGVzLiBUaGUgYGZvbnQtc2l6ZWAgaXMgY2FsY3VsYXRlZCB0byBleGlzdFxyXG4gKiAgICBpbiBlbXMsIHRoZSBgbGluZS1oZWlnaHRgIGlzIGNhbGN1bGF0ZWQgdG8gZXhpc3QgdW5pdGxlc3NseS5cclxuICogMi4gRm9yY2Ugc2Nyb2xsYmFycyB0byBhbHdheXMgYmUgdmlzaWJsZSB0byBwcmV2ZW50IGF3a3dhcmQg4oCYanVtcHPigJkgd2hlblxyXG4gKiAgICBuYXZpZ2F0aW5nIGJldHdlZW4gcGFnZXMgdGhhdCBkby9kbyBub3QgaGF2ZSBlbm91Z2ggY29udGVudCB0byBwcm9kdWNlXHJcbiAqICAgIHNjcm9sbGJhcnMgbmF0dXJhbGx5LlxyXG4gKiAzLiBFbnN1cmUgdGhlIHBhZ2UgYWx3YXlzIGZpbGxzIGF0IGxlYXN0IHRoZSBlbnRpcmUgaGVpZ2h0IG9mIHRoZSB2aWV3cG9ydC5cclxuICogNC4gUHJldmVudCBjZXJ0YWluIG1vYmlsZSBicm93c2VycyBmcm9tIGF1dG9tYXRpY2FsbHkgem9vbWluZyBmb250cy5cclxuICogNS4gRm9udHMgb24gT1NYIHdpbGwgbG9vayBtb3JlIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBzeXN0ZW1zIHRoYXQgZG8gbm90XHJcbiAqICAgIHJlbmRlciB0ZXh0IHVzaW5nIHN1Yi1waXhlbCBhbnRpLWFsaWFzaW5nLlxyXG4gKi9cclxuaHRtbCB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGJhc2UtZm9udC1zaXplKTsgLyogWzFdICovXHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICBtaW4taGVpZ2h0OiAxMDAlOyAvKiBbM10gKi9cclxuICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcclxuICAgIG92ZXJmbG93LXk6IHNjcm9sbDsgLyogWzJdICovXHJcbiAgICBmb250LWZhbWlseTogJGZvbnQtc3lzdGVtLXVpO1xyXG4gICAgY29sb3I6ICRjb2xvci1iYXNlLXRleHQ7XHJcbiAgICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTsgLyogWzRdICovXHJcbiAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIFs0XSAqL1xyXG4gICAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTsgLyogWzVdICovXHJcbiAgICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDsgLyogWzVdICovXHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItYmFzZS1iYWNrZ3JvdW5kO1xyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI1FVT1RFU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbnEge1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG4gICAgcXVvdGVzOiAkZ2x5cGgtcXVvdGUtbGVmdC1kb3VibGUgJGdseXBoLXF1b3RlLXJpZ2h0LWRvdWJsZTtcclxuXHJcbiAgICAmOjpiZWZvcmUge1xyXG4gICAgICAgIGNvbnRlbnQ6IG9wZW4tcXVvdGU7XHJcbiAgICB9XHJcblxyXG4gICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IGNsb3NlLXF1b3RlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuYmxvY2txdW90ZSB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBtYXJnaW46ICRiYXNlLXNwYWNpbmctdW5pdC0tbGFyZ2UgJGJhc2Utc3BhY2luZy11bml0O1xyXG4gICAgcGFkZGluZzogJGJhc2Utc3BhY2luZy11bml0ICRiYXNlLXNwYWNpbmctdW5pdC0taHVnZTtcclxuICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgIGJhY2tncm91bmQ6ICRjb2xvci1ibG9ja3F1b3RlLWJhY2tncm91bmQ7XHJcbiAgICBib3JkZXItbGVmdDogJGJhc2Utc3BhY2luZy11bml0LS1zbWFsbCBzb2xpZCAkY29sb3ItYmxvY2txdW90ZS1ib3JkZXI7XHJcbiAgICBxdW90ZXM6ICRnbHlwaC1xdW90ZS1sZWZ0LWRvdWJsZSAkZ2x5cGgtcXVvdGUtcmlnaHQtZG91YmxlO1xyXG5cclxuICAgIHAge1xyXG4gICAgICAgICY6OmJlZm9yZSB7XHJcbiAgICAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSg3MnB4KTtcclxuICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgICAgIGxlZnQ6ICRiYXNlLXNwYWNpbmctdW5pdC0tdGlueTtcclxuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICAgICAgICAgICAgY29sb3I6ICRjb2xvci1ibG9ja3F1b3RlLXF1b3RlO1xyXG4gICAgICAgICAgICBjb250ZW50OiBvcGVuLXF1b3RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgICAgICBjb250ZW50OiBuby1jbG9zZS1xdW90ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc21hbGwsXHJcbiAgICBmb290ZXIge1xyXG4gICAgICAgIGNvbG9yOiAkY29sb3ItYmxvY2txdW90ZS1mb290ZXI7XHJcblxyXG4gICAgICAgICY6OmJlZm9yZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICRnbHlwaC1lbS1kYXNoICRnbHlwaC1uby1icmVhay1zcGFjZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5jaXRlIHtcclxuICAgIC8vIFBsYWNlaG9sZGVyXHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjVEFCTEVTXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjVFlQT0dSQVBIWVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbnN0cm9uZyB7XHJcbiAgICAvLyBQbGFjZWhvbGRlclxyXG59XHJcblxyXG5cclxuZW0ge1xyXG4gICAgZm9udC1zdHlsZTogaXRhbGljO1xyXG59XHJcblxyXG5cclxuc21hbGwge1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXplKDE0cHgpO1xyXG59XHJcblxyXG5cclxubWFyayB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItbWFyay1iYWNrZ3JvdW5kO1xyXG59XHJcblxyXG5cclxuYWJiciB7XHJcbiAgICAvLyBQbGFjZWhvbGRlclxyXG59XHJcblxyXG5cclxuZGVsIHtcclxuICAgIC8vIFBsYWNlaG9sZGVyXHJcbn1cclxuXHJcblxyXG5pbnMge1xyXG4gICAgLy8gUGxhY2Vob2xkZXJcclxufVxyXG5cclxuXHJcbnN1YiB7XHJcbiAgICAvLyBQbGFjZWhvbGRlclxyXG59XHJcblxyXG5cclxuc3VwIHtcclxuICAgIC8vIFBsYWNlaG9sZGVyXHJcbn1cclxuXHJcblxyXG5maWd1cmUge1xyXG4gICAgZmlnY2FwdGlvbiB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKDE0cHgpO1xyXG4gICAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmhyIHtcclxuICAgIG1hcmdpbi10b3A6ICRiYXNlLXNwYWNpbmctdW5pdC0tbGFyZ2U7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogZW0oMXB4KSBzb2xpZCAkY29sb3ItaHI7XHJcbn1cclxuXHJcblxyXG5kbCB7XHJcbiAgICBkdCB7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgZGQge1xyXG4gICAgICAgIG1hcmdpbi1sZWZ0OiAkYmFzZS1zcGFjaW5nLXVuaXQ7XHJcblxyXG4gICAgICAgICY6OmJlZm9yZSB7XHJcbiAgICAgICAgICAgIGNvbnRlbnQ6ICRnbHlwaC1lbi1kYXNoICRnbHlwaC1uby1icmVhay1zcGFjZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjQkxPQ0tcclxuLy9cclxuLy8gVGhlIGJsb2NrIG9iamVjdCBzaW1wbHkgc3RhY2tzIGFuIGltYWdlIG9uIHRvcCBvZiBzb21lIHRleHQtbGlrZSBjb250ZW50LlxyXG4vLyBBIHNpbXBsZSBhYnN0cmFjdGlvbiB0byBjb3ZlciBhIHZlcnkgY29tbW9ubHkgb2NjdXJyaW5nIGRlc2lnbiBwYXR0ZXJuLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEd1dHRlclxyXG4kYmxvY2stZ3V0dGVyOiAgICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0O1xyXG4kYmxvY2stZ3V0dGVyLS10aW55OiAgICAgICAgcXVhcnRlcigkYmxvY2stZ3V0dGVyKTtcclxuJGJsb2NrLWd1dHRlci0tc21hbGw6ICAgICAgIGhhbHZlKCRibG9jay1ndXR0ZXIpO1xyXG4kYmxvY2stZ3V0dGVyLS1sYXJnZTogICAgICAgZG91YmxlKCRibG9jay1ndXR0ZXIpO1xyXG4kYmxvY2stZ3V0dGVyLS1odWdlOiAgICAgICAgcXVhZHJ1cGxlKCRibG9jay1ndXR0ZXIpO1xyXG5cclxuXHJcbi8vIE1vZGlmaWVyc1xyXG4kZW5hYmxlLWJsb2NrLS1mbHVzaDogICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYmxvY2stLXRpbnk6ICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1ibG9jay0tc21hbGw6ICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWJsb2NrLS1sYXJnZTogICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYmxvY2stLWh1Z2U6ICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1ibG9jay0tY2VudGVyOiAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWJsb2NrLS1yaWdodDogICAgICAgZmFsc2U7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBCbG9jayBvYmplY3RcclxuICovXHJcbi5ibG9jayxcclxuJWJsb2NrIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiAxLiBFbGltaW5hdGUgd2hpdGVzcGFjZSBhcm91bmQgaW1hZ2VzLlxyXG4gKi9cclxuLmJsb2NrX19pbWcsXHJcbiVibG9ja19faW1nIHtcclxuICAgIG1hcmdpbi1ib3R0b206ICRibG9jay1ndXR0ZXI7XHJcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyAvKiBbMV0gKi9cclxuXHJcbiAgICBAaWYgKCRlbmFibGUtYmxvY2stLWZsdXNoID09IHRydWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBObyBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIHRleHQgY29udGVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICAuYmxvY2stLWZsdXNoID4gJixcclxuICAgICAgICAlYmxvY2stLWZsdXNoID4gJiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBpZiAoJGVuYWJsZS1ibG9jay0tdGlueSA9PSB0cnVlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGlueSBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIHRleHQgY29udGVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICAuYmxvY2stLXRpbnkgPiAmLFxyXG4gICAgICAgICVibG9jay0tdGlueSA+ICYge1xyXG4gICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAkYmxvY2stZ3V0dGVyLS10aW55O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAaWYgKCRlbmFibGUtYmxvY2stLXNtYWxsID09IHRydWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBTbWFsbCBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIHRleHQgY29udGVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICAuYmxvY2stLXNtYWxsID4gJixcclxuICAgICAgICAlYmxvY2stLXNtYWxsID4gJiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRibG9jay1ndXR0ZXItLXNtYWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAaWYgKCRlbmFibGUtYmxvY2stLWxhcmdlID09IHRydWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBMYXJnZSBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGhlIHRleHQgY29udGVudC5cclxuICAgICAgICAgKi9cclxuICAgICAgICAuYmxvY2stLWxhcmdlID4gJixcclxuICAgICAgICAlYmxvY2stLWxhcmdlID4gJiB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRibG9jay1ndXR0ZXItLWxhcmdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAaWYgKCRlbmFibGUtYmxvY2stLWh1Z2UgPT0gdHJ1ZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEh1Z2Ugc3BhY2UgYmV0d2VlbiB0aGUgaW1hZ2UgYW5kIHRoZSB0ZXh0IGNvbnRlbnQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLmJsb2NrLS1odWdlID4gJixcclxuICAgICAgICAlYmxvY2stLWh1Z2UgPiAmIHtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJGJsb2NrLWd1dHRlci0taHVnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRleHQtY29udGVudC5cclxuICovXHJcbi5ibG9ja19fYm9keSxcclxuJWJsb2NrX19ib2R5IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1ibG9jay0tcmlnaHQgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSaWdodC1hbGlnbmVkIGJsb2Nrcy5cclxuICAgICAqL1xyXG4gICAgLmJsb2NrLS1yaWdodCxcclxuICAgICVibG9jay0tcmlnaHQge1xyXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1ibG9jay0tY2VudGVyID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2VudGVyLWFsaWduZWQgYmxvY2tzLlxyXG4gICAgICovXHJcbiAgICAuYmxvY2stLWNlbnRlcixcclxuICAgICVibG9jay0tY2VudGVyIHtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjQkxPQ0tcclxuLy9cclxuLy8gVGhlIGJveCBvYmplY3Qgc2ltcGx5IGJveGVzIG9mZiBjb250ZW50LlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIFBhZGRpbmdcclxuJGJveC1wYWRkaW5nOiAgICAgICAgICAgICAgICRiYXNlLXNwYWNpbmctdW5pdDtcclxuJGJveC1wYWRkaW5nLS10aW55OiAgICAgICAgIHF1YXJ0ZXIoJGJveC1wYWRkaW5nKTtcclxuJGJveC1wYWRkaW5nLS1zbWFsbDogICAgICAgIGhhbHZlKCRib3gtcGFkZGluZyk7XHJcbiRib3gtcGFkZGluZy0tbGFyZ2U6ICAgICAgICBkb3VibGUoJGJveC1wYWRkaW5nKTtcclxuJGJveC1wYWRkaW5nLS1odWdlOiAgICAgICAgIHF1YWRydXBsZSgkYm94LXBhZGRpbmcpO1xyXG5cclxuXHJcbi8vIE1vZGlmaWVyc1xyXG4kZW5hYmxlLWJveC0tZmx1c2g6ICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYm94LS10aW55OiAgICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1ib3gtLXNtYWxsOiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWJveC0tbGFyZ2U6ICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYm94LS1odWdlOiAgICAgICAgICBmYWxzZTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEJveCBvYmplY3RcclxuICpcclxuICogMS4gU28gd2UgY2FuIGFwcGx5IHRoZSBgLmJveGAgY2xhc3MgdG8gbmF0dXJhbGx5LWlubGluZSBlbGVtZW50cy5cclxuICovXHJcbi5ib3gsXHJcbiVib3gge1xyXG4gICAgQGV4dGVuZCAlY2xlYXJmaXg7XHJcbiAgICBkaXNwbGF5OiBibG9jazsgLyogWzFdICovXHJcbiAgICBwYWRkaW5nOiAkYm94LXBhZGRpbmc7XHJcblxyXG4gICAgPiA6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtYm94LS1mbHVzaCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEZsdXNoIChpLmUuIG5vIHBhZGRpbmcpIGJveC5cclxuICAgICAqL1xyXG4gICAgLmJveC0tZmx1c2gsXHJcbiAgICAlYm94LS1mbHVzaCB7XHJcbiAgICAgICAgcGFkZGluZzogMDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtYm94LS10aW55ID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGlueSBib3guXHJcbiAgICAgKi9cclxuICAgIC5ib3gtLXRpbnksXHJcbiAgICAlYm94LS10aW55IHtcclxuICAgICAgICBwYWRkaW5nOiAkYm94LXBhZGRpbmctLXRpbnk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJveC0tc21hbGwgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTbWFsbCBib3guXHJcbiAgICAgKi9cclxuICAgIC5ib3gtLXNtYWxsLFxyXG4gICAgJWJveC0tc21hbGwge1xyXG4gICAgICAgIHBhZGRpbmc6ICRib3gtcGFkZGluZy0tc21hbGw7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJveC0tbGFyZ2UgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXJnZSBib3guXHJcbiAgICAgKi9cclxuICAgIC5ib3gtLWxhcmdlLFxyXG4gICAgJWJveC0tbGFyZ2Uge1xyXG4gICAgICAgIHBhZGRpbmc6ICRib3gtcGFkZGluZy0tbGFyZ2U7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJveC0taHVnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEh1Z2UgYm94LlxyXG4gICAgICovXHJcbiAgICAuYm94LS1odWdlLFxyXG4gICAgJWJveC0taHVnZSB7XHJcbiAgICAgICAgcGFkZGluZzogJGJveC1wYWRkaW5nLS1odWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0JVVFRPTlNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBQYWRkaW5nXHJcbiRidG4tcGFkZGluZzogICAgICAgICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQ7XHJcbiRidG4tcGFkZGluZy0tdGlueTogICAgICAgICBxdWFydGVyKCRidG4tcGFkZGluZyk7XHJcbiRidG4tcGFkZGluZy0tc21hbGw6ICAgICAgICBoYWx2ZSgkYnRuLXBhZGRpbmcpO1xyXG4kYnRuLXBhZGRpbmctLWxhcmdlOiAgICAgICAgZG91YmxlKCRidG4tcGFkZGluZyk7XHJcbiRidG4tcGFkZGluZy0taHVnZTogICAgICAgICBxdWFkcnVwbGUoJGJ0bi1wYWRkaW5nKTtcclxuXHJcblxyXG4vLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtYnRuLS10aW55OiAgICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1idG4tLXNtYWxsOiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWJ0bi0tbGFyZ2U6ICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYnRuLS1odWdlOiAgICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1idG4tLWZ1bGw6ICAgICAgICAgIHRydWU7XHJcbiRlbmFibGUtYnRuLS1waWxsOiAgICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1idG4tLXRyYW5zcGFyZW50OiAgIGZhbHNlO1xyXG4kZW5hYmxlLWJ0bi0tY2VudGVyOiAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtYnRuLS1zZWNvbmRhcnk6ICAgICBmYWxzZTtcclxuJGVuYWJsZS1idG4tLWNsb3NlOiAgICAgICAgIGZhbHNlO1xyXG5cclxuXHJcbi8vIFNldHRpbm5nc1xyXG4kYnRuLWJvcmRlci13aWR0aDogICAgICAgICAgMDtcclxuJGJ0bi1ib3JkZXItc3R5bGU6ICAgICAgICAgIHNvbGlkO1xyXG4kYnRuLWJvcmRlci1yb3VuZDogICAgICAgICAgJGJhc2Utcm91bmQtdW5pdDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEJ1dHRvbiBvYmplY3RcclxuICpcclxuICogMS4gQWxsb3cgdXMgdG8gc3R5bGUgYm94IG1vZGVsIHByb3BlcnRpZXMuXHJcbiAqIDIuIExpbmUgZGlmZmVyZW50IHNpemVkIGJ1dHRvbnMgdXAgYSBsaXR0bGUgbmljZXIuXHJcbiAqIDMuIE1ha2UgYnV0dG9ucyBpbmhlcml0IGZvbnQgc3R5bGVzIChvZnRlbiBuZWNlc3Nhcnkgd2hlbiBzdHlsaW5nIGBpbnB1dGBzIGFzXHJcbiAqICAgIGJ1dHRvbnMpLlxyXG4gKiA0LiBSZXNldC9ub3JtYWxpemUgc29tZSBzdHlsZXMuXHJcbiAqIDUuIEZvcmNlIGFsbCBidXR0b24tc3R5bGVkIGVsZW1lbnRzIHRvIGFwcGVhciBjbGlja2FibGUuXHJcbiAqIDYuIEZpeGVzIG9kZCBpbm5lciBzcGFjaW5nIGluIElFNy5cclxuICogNy4gU3VidHJhY3QgdGhlIGJvcmRlciBzaXplIGZyb20gdGhlIHBhZGRpbmcgdmFsdWUgc28gdGhhdCBidXR0b25zIGRvIG5vdFxyXG4gKiAgICBncm93IGxhcmdlciBhcyB3ZSBhZGQgYm9yZGVycy5cclxuICovXHJcbi5idG4sXHJcbiVidG4ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiBbMV0gKi9cclxuICAgIHBhZGRpbmc6ICgkYnRuLXBhZGRpbmctLXNtYWxsIC0gJGJ0bi1ib3JkZXItd2lkdGgpICgkYnRuLXBhZGRpbmctLWxhcmdlIC0gJGJ0bi1ib3JkZXItd2lkdGgpOyAvKiBbN10gKi9cclxuICAgIG1hcmdpbjogMDsgLyogWzRdICovXHJcbiAgICBvdmVyZmxvdzogdmlzaWJsZTsgLyogWzZdICovXHJcbiAgICBjb2xvcjogJGNvbG9yLWJ0bi1wcmltYXJ5O1xyXG4gICAgZm9udDogaW5oZXJpdDsgLyogWzNdICovXHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7IC8qIFs0XSAqL1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOyAvKiBbNF0gKi9cclxuICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1idG4tcHJpbWFyeS1iYWNrZ3JvdW5kO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogWzJdICovXHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7IC8qIFs1XSAqL1xyXG4gICAgQGlmICgkYnRuLWJvcmRlci13aWR0aCAhPSAwKSB7XHJcbiAgICAgICAgYm9yZGVyOiAkYnRuLWJvcmRlci13aWR0aCAkYnRuLWJvcmRlci1zdHlsZSAkY29sb3ItYnRuLXByaW1hcnktYm9yZGVyO1xyXG4gICAgfVxyXG4gICAgQGVsc2Uge1xyXG4gICAgICAgIGJvcmRlcjogbm9uZTsgLyogWzRdICovXHJcbiAgICB9XHJcblxyXG4gICAgQGlmICgkYnRuLWJvcmRlci1yb3VuZCAhPSAwKSB7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogJGJ0bi1ib3JkZXItcm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgQGluY2x1ZGUgcHNldWRvLWNsYXNzZXMoZmFsc2UpIHtcclxuICAgICAgICBjb2xvcjogJGNvbG9yLWJ0bi1wcmltYXJ5O1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRml4IGEgRmlyZWZveCBidWcgd2hlcmVieSBgaW5wdXQgdHlwZT1cInN1Ym1pdFwiYCBnYWlucyAycHggZXh0cmEgcGFkZGluZy5cclxuICovXHJcbi5idG46Oi1tb3otZm9jdXMtaW5uZXIsXHJcbiVidG46Oi1tb3otZm9jdXMtaW5uZXIge1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGJvcmRlcjogMDtcclxufVxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1idG4tLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaW55IGJ1dHRvblxyXG4gICAgICovXHJcbiAgICAuYnRuLS10aW55LFxyXG4gICAgJWJ0bi0tdGlueSB7XHJcbiAgICAgICAgcGFkZGluZzogKGhhbHZlKCRidG4tcGFkZGluZy0tdGlueSkgLSAkYnRuLWJvcmRlci13aWR0aCkgKCRidG4tcGFkZGluZyAtICRidG4tYm9yZGVyLXdpZHRoKTsgLyogWzddICovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJ0bi0tc21hbGwgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBTbWFsbCBidXR0b25zLlxyXG4gICAgICovXHJcbiAgICAuYnRuLS1zbWFsbCxcclxuICAgICVidG4tLXNtYWxsIHtcclxuICAgICAgICBwYWRkaW5nOiAoJGJ0bi1wYWRkaW5nLS10aW55IC0gJGJ0bi1ib3JkZXItd2lkdGgpICgkYnRuLXBhZGRpbmctLWxhcmdlIC0gJGJ0bi1ib3JkZXItd2lkdGgpOyAvKiBbN10gKi9cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtYnRuLS1sYXJnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIExhcmdlIGJ1dHRvbnMuXHJcbiAgICAgKi9cclxuICAgIC5idG4tLWxhcmdlLFxyXG4gICAgJWJ0bi0tbGFyZ2Uge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxOHB4LCBcIm5vbmVcIik7XHJcbiAgICAgICAgcGFkZGluZzogKCRidG4tcGFkZGluZy0tc21hbGwgLSAkYnRuLWJvcmRlci13aWR0aCkgKCRidG4tcGFkZGluZy0taHVnZSAtICRidG4tYm9yZGVyLXdpZHRoKTsgLyogWzddICovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJ0bi0taHVnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEh1Z2UgYnV0dG9ucy5cclxuICAgICAqL1xyXG4gICAgLmJ0bi0taHVnZSxcclxuICAgICVidG4tLWh1Z2Uge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxOHB4LCBcIm5vbmVcIik7XHJcbiAgICAgICAgcGFkZGluZzogKCRidG4tcGFkZGluZy0tc21hbGwgLSAkYnRuLWJvcmRlci13aWR0aCkgKCRidG4tcGFkZGluZy0taHVnZSAtICRidG4tYm9yZGVyLXdpZHRoKTsgLyogWzddICovXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJ0bi0tZnVsbCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEZ1bGwtd2lkdGggYnV0dG9ucy5cclxuICAgICAqL1xyXG4gICAgLmJ0bi0tZnVsbCxcclxuICAgICVidG4tLWZ1bGwge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1idG4tLXBpbGwgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSb3VuZC1lbmRlZCBidXR0b25zLlxyXG4gICAgICpcclxuICAgICAqIDEuIE92ZXJseS1sYXJnZSB2YWx1ZSB0byBlbnN1cmUgdGhlIHJhZGl1cyByb3VuZHMgdGhlIHdob2xlIGVuZCBvZiB0aGVcclxuICAgICAqICAgIGJ1dHRvbi5cclxuICAgICAqL1xyXG4gICAgLmJ0bi0tcGlsbCxcclxuICAgICVidG4tLXBpbGwge1xyXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwMHB4OyAvKiBbMV0gKi9cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtYnRuLS10cmFuc3BhcmVudCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFRyYW5zcGFyZW50IGJ1dHRvblxyXG4gICAgICovXHJcbiAgICAuYnRuLS10cmFuc3BhcmVudCxcclxuICAgICVidG4tLXRyYW5zcGFyZW50IHtcclxuICAgICAgICBAaW5jbHVkZSBwc2V1ZG8tY2xhc3Nlcyh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkY29sb3ItYmFzZS10ZXh0O1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWJ0bi0tY2VudGVyID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2VudGVyZWQgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIC5idG4tLWNlbnRlcixcclxuICAgICVidG4tLWNlbnRlciB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IGF1dG87XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1idG4tLXNlY29uZGFyeSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFNlY29uZGFyeSBidXR0b25cclxuICAgICAqL1xyXG4gICAgLmJ0bi0tc2Vjb25kYXJ5LFxyXG4gICAgJWJ0bi0tc2Vjb25kYXJ5IHtcclxuICAgICAgICBAaW5jbHVkZSBwc2V1ZG8tY2xhc3Nlcyh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkY29sb3ItYnRuLXNlY29uZGFyeTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWJ0bi1zZWNvbmRhcnktYmFja2dyb3VuZDtcclxuICAgICAgICAgICAgYm9yZGVyLWNvbG9yOiAkY29sb3ItYnRuLXNlY29uZGFyeS1ib3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1idG4tLWNsb3NlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2xvc2UgYnV0dG9uXHJcbiAgICAgKi9cclxuICAgIC5idG4tLWNsb3NlIHtcclxuICAgICAgICBAZXh0ZW5kICVidG47XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKDE0cHgsIFwibm9uZVwiKTtcclxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgdG9wOiAkYmFzZS1zcGFjaW5nLXVuaXQtLXRpbnk7XHJcbiAgICAgICAgcmlnaHQ6ICRiYXNlLXNwYWNpbmctdW5pdC0tdGlueTtcclxuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkYmFzZS1zcGFjaW5nLXVuaXQtLXNtYWxsO1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogJGJhc2Utc3BhY2luZy11bml0LS1zbWFsbDtcclxuXHJcbiAgICAgICAgJjo6YWZ0ZXIge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiBlbSgxMHB4KTtcclxuICAgICAgICAgICAgY29udGVudDogJGdseXBoLWNyb3NzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNGTEFHXHJcbi8vXHJcbi8vIFRoZSBmbGFnIG9iamVjdCBpcyBhIGRlc2lnbiBwYXR0ZXJuIHNpbWlsYXIgdG8gdGhlIG1lZGlhIG9iamVjdCwgaG93ZXZlclxyXG4vLyBpdCB1dGlsaXNlcyBcImRpc3BsYXk6IHRhYmxlWy1jZWxsXVwiIHRvIGdpdmUgdXMgY29udHJvbCBvdmVyIHRoZSB2ZXJ0aWNhbFxyXG4vLyBhbGlnbm1lbnRzIG9mIHRoZSB0ZXh0IGFuZCBpbWFnZS5cclxuLy8gaHR0cDovL2Nzc3dpemFyZHJ5LmNvbS8yMDEzLzA1L3RoZS1mbGFnLW9iamVjdFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEd1dHRlclxyXG4kZmxhZy1ndXR0ZXI6ICAgICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0O1xyXG4kZmxhZy1ndXR0ZXItLXRpbnk6ICAgICAgICAgcXVhcnRlcigkZmxhZy1ndXR0ZXIpO1xyXG4kZmxhZy1ndXR0ZXItLXNtYWxsOiAgICAgICAgaGFsdmUoJGZsYWctZ3V0dGVyKTtcclxuJGZsYWctZ3V0dGVyLS1sYXJnZTogICAgICAgIGRvdWJsZSgkZmxhZy1ndXR0ZXIpO1xyXG4kZmxhZy1ndXR0ZXItLWh1Z2U6ICAgICAgICAgcXVhZHJ1cGxlKCRmbGFnLWd1dHRlcik7XHJcblxyXG5cclxuLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtZmxhZy0tdGlueTogICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1mbGFnLS1zbWFsbDogICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWZsYWctLWxhcmdlOiAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtZmxhZy0taHVnZTogICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1mbGFnLS1yZXY6ICAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWZsYWctLWZsdXNoOiAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtZmxhZy0tdG9wOiAgICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1mbGFnLS1ib3R0b206ICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWZsYWctLXJlc3BvbnNpdmU6ICAgZmFsc2U7XHJcblxyXG5cclxuLy8gU2V0dGluZ3NcclxuJGZsYWctY29sbGFwc2UtYXQ6ICAgICAgICAgICRicmVha3BvaW50LXRhYmxldC1zdGFydDtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEZsYWcgb2JqZWN0XHJcbiAqXHJcbiAqIDEuIEFsbG93cyB1cyB0byBjb250cm9sIHZlcnRpY2FsIGFsaWdubWVudHNcclxuICogMi4gRm9yY2UgdGhlIG9iamVjdCB0byBiZSB0aGUgZnVsbCB3aWR0aCBvZiBpdHMgcGFyZW50LiBDb21iaW5lZCB3aXRoIFsxXSxcclxuICogICAgdGhpcyBtYWtlcyB0aGUgb2JqZWN0IGJlaGF2ZSBpbiBhIHF1YXNpLWBkaXNwbGF5OiBibG9jaztgIG1hbm5lci5cclxuICovXHJcbi5mbGFnLFxyXG4lZmxhZyB7XHJcbiAgICBkaXNwbGF5OiB0YWJsZTsgLyogWzFdICovXHJcbiAgICB3aWR0aDogMTAwJTsgLyogWzJdICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBEZWZhdWx0IHRvIGFsaWduaW5nIGNvbnRlbnQgdG8gdGhlaXIgbWlkZGxlcy5cclxuICovXHJcbi5mbGFnX19pbWcsXHJcbiVmbGFnX19pbWcsXHJcbi5mbGFnX19ib2R5LFxyXG4lZmxhZ19fYm9keSB7XHJcbiAgICBkaXNwbGF5OiB0YWJsZS1jZWxsO1xyXG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgLyogWzFdICovXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBGbGFnIGltYWdlcyBoYXZlIGEgc3BhY2UgYmV0d2VlbiB0aGVtIGFuZCB0aGUgYm9keSBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuLmZsYWdfX2ltZyxcclxuJWZsYWdfX2ltZyB7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiAkZmxhZy1ndXR0ZXI7XHJcblxyXG4gICAgPiBpbWcge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1heC13aWR0aDogbm9uZTtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIEZvcmNlcyB0aGUgYC5mbGFnX19ib2R5YCB0byB0YWtlIHVwIGFsbCByZW1haW5pbmcgc3BhY2UuXHJcbiAqL1xyXG4uZmxhZ19fYm9keSxcclxuJWZsYWdfX2JvZHkge1xyXG4gICAgd2lkdGg6IDEwMCU7IC8qIFsxXSAqL1xyXG4gICAgJixcclxuICAgID4gOmxhc3QtY2hpbGQge1xyXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWZsYWctLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaW55IGZsYWdzLlxyXG4gICAgICovXHJcbiAgICAuZmxhZy0tdGlueSxcclxuICAgICVmbGFnLS10aW55IHtcclxuXHJcbiAgICAgICAgPiAuZmxhZ19faW1nLFxyXG4gICAgICAgID4gJWZsYWdfX2ltZyB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6ICRmbGFnLWd1dHRlci0tdGlueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAoJGVuYWJsZS1mbGFnLS1yZXYgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGlueSByZXZlcnNlZCBmbGFncy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICYuZmxhZy0tcmV2LFxyXG4gICAgICAgICAgICAmJWZsYWctLXJldiB7XHJcblxyXG4gICAgICAgICAgICAgICAgPiAuZmxhZ19faW1nLFxyXG4gICAgICAgICAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJGZsYWctZ3V0dGVyLS10aW55O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1mbGFnLS1zbWFsbCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFNtYWxsIGZsYWdzLlxyXG4gICAgICovXHJcbiAgICAuZmxhZy0tc21hbGwsXHJcbiAgICAlZmxhZy0tc21hbGwge1xyXG5cclxuICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogJGZsYWctZ3V0dGVyLS1zbWFsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAoJGVuYWJsZS1mbGFnLS1yZXYgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogU21hbGwgcmV2ZXJzZWQgZmxhZ3MuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAmLmZsYWctLXJldixcclxuICAgICAgICAgICAgJiVmbGFnLS1yZXYge1xyXG5cclxuICAgICAgICAgICAgICAgID4gLmZsYWdfX2ltZyxcclxuICAgICAgICAgICAgICAgID4gJWZsYWdfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6ICRmbGFnLWd1dHRlci0tc21hbGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWZsYWctLWxhcmdlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogTGFyZ2UgZmxhZ3MuXHJcbiAgICAgKi9cclxuICAgIC5mbGFnLS1sYXJnZSxcclxuICAgICVmbGFnLS1sYXJnZSB7XHJcblxyXG4gICAgICAgID4gLmZsYWdfX2ltZyxcclxuICAgICAgICA+ICVmbGFnX19pbWcge1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAkZmxhZy1ndXR0ZXItLWxhcmdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICgkZW5hYmxlLWZsYWctLXJldiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBMYXJnZSByZXZlcnNlZCBmbGFncy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICYuZmxhZy0tcmV2LFxyXG4gICAgICAgICAgICAmJWZsYWctLXJldiB7XHJcblxyXG4gICAgICAgICAgICAgICAgPiAuZmxhZ19faW1nLFxyXG4gICAgICAgICAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJGZsYWctZ3V0dGVyLS1sYXJnZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtZmxhZy0taHVnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEh1Z2UgZmxhZ3MuXHJcbiAgICAgKi9cclxuICAgIC5mbGFnLS1odWdlLFxyXG4gICAgJWZsYWctLWh1Z2Uge1xyXG5cclxuICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogJGZsYWctZ3V0dGVyLS1odWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICgkZW5hYmxlLWZsYWctLXJldiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBIdWdlIHJldmVyc2VkIGZsYWdzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgJi5mbGFnLS1yZXYsXHJcbiAgICAgICAgICAgICYlZmxhZy0tcmV2IHtcclxuXHJcbiAgICAgICAgICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgICAgICAgICA+ICVmbGFnX19pbWcge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkZmxhZy1ndXR0ZXItLWh1Z2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWZsYWctLXJldiA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldmVyc2VkIGZsYWcgb2JqZWN0cyBoYXZlIHRoZWlyIGltYWdlLWNvbnRlbnQgdG8gdGhlIHJpZ2h0LCBhbmQgdGV4dC1jb250ZW50XHJcbiAgICAgKiB0byB0aGUgbGVmdC5cclxuICAgICAqXHJcbiAgICAgKiAxLiBTd2FwIHRoZSByZW5kZXJlZCBkaXJlY3Rpb24gb2YgdGhlIG9iamVjdOKAplxyXG4gICAgICogMi4g4oCmYW5kIHJlc2V0IGl0LlxyXG4gICAgICogMy4gUmVhc3NpZ24gbWFyZ2lucyB0byB0aGUgY29ycmVjdCBzaWRlcy5cclxuICAgICAqL1xyXG4gICAgLmZsYWctLXJldixcclxuICAgICVmbGFnLS1yZXYge1xyXG4gICAgICAgIGRpcmVjdGlvbjogcnRsOyAvKiBbMV0gKi9cclxuICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgPiAlZmxhZ19faW1nLFxyXG4gICAgICAgID4gLmZsYWdfX2JvZHksXHJcbiAgICAgICAgPiAlZmxhZ19fYm9keSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogbHRyOyAvKiBbMl0gKi9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgID4gLmZsYWdfX2ltZyxcclxuICAgICAgICA+ICVmbGFnX19pbWcge1xyXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwOyAvKiBbM10gKi9cclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkZmxhZy1ndXR0ZXI7IC8qIFszXSAqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtZmxhZy0tZmx1c2ggPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGbHVzaCBmbGFnIG9iamVjdHMgaGF2ZSBubyBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZSBhbmQgdGV4dCBjb250ZW50LlxyXG4gICAgICovXHJcbiAgICAuZmxhZy0tZmx1c2gsXHJcbiAgICAlZmxhZy0tZmx1c2gge1xyXG5cclxuICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtZmxhZy0tdG9wID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVmVydGljYWxseSB0b3AgYWxpZ25lZCBmbGFnIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIC5mbGFnLS10b3AsXHJcbiAgICAlZmxhZy0tdG9wIHtcclxuXHJcbiAgICAgICAgPiAuZmxhZ19faW1nLFxyXG4gICAgICAgID4gJWZsYWdfX2ltZyxcclxuICAgICAgICA+IC5mbGFnX19ib2R5LFxyXG4gICAgICAgID4gJWZsYWdfX2JvZHkge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtZmxhZy0tYm90dG9tID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVmVydGljYWxseSBib3R0b20gYWxpZ25lZCBmbGFnIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIC5mbGFnLS1ib3R0b20sXHJcbiAgICAlZmxhZy0tYm90dG9tIHtcclxuXHJcbiAgICAgICAgPiAuZmxhZ19faW1nLFxyXG4gICAgICAgID4gJWZsYWdfX2ltZyxcclxuICAgICAgICA+IC5mbGFnX19ib2R5LFxyXG4gICAgICAgID4gJWZsYWdfX2JvZHkge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogYm90dG9tO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtZmxhZy0tcmVzcG9uc2l2ZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJlc3BvbnNpdmUgZmxhZyBvYmplY3RzLlxyXG4gICAgICpcclxuICAgICAqIFRoZXJlIGlzIGEgdmVyeSBwcmFnbWF0aWMsIHNpbXBsZSBpbXBsZW1lbnRhdGlvbiBvZiBhIHJlc3BvbnNpdmUgZmxhZ1xyXG4gICAgICogb2JqZWN0LCB3aGljaCBzaW1wbHkgcGxhY2VzIHRoZSB0ZXh0LWNvbnRlbnQgYmVuZWF0aCB0aGUgaW1hZ2UtY29udGVudC5cclxuICAgICAqXHJcbiAgICAgKiBXZSB1c2UgYSBgbWF4LXdpZHRoYCBtZWRpYSBxdWVyeSBiZWNhdXNlOlxyXG4gICAgICpcclxuICAgICAqIGEpIGl0IGlzIHRoZSBsZWFzdCB2ZXJib3NlIG1ldGhvZCBpbiB0ZXJtcyBvZiBhbW91bnQgb2YgY29kZSByZXF1aXJlZC5cclxuICAgICAqIGIpIHRoZSBmbGFnIG9iamVjdOKAmXMgZGVmYXVsdCBzdGF0ZSBpcyBpbWFnZS1uZXh0LXRvLXRleHQsIHNvIGl0cyBzdGFja2VkXHJcbiAgICAgKiAgICBzdGF0ZSBpcyB0aGUgZXhjZXB0aW9uLCByYXRoZXIgdGhhbiB0aGUgcnVsZS5cclxuICAgICAqL1xyXG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJGZsYWctY29sbGFwc2UtYXQpIHtcclxuXHJcbiAgICAgICAgLmZsYWctLXJlc3BvbnNpdmUsXHJcbiAgICAgICAgJWZsYWctLXJlc3BvbnNpdmUge1xyXG5cclxuICAgICAgICAgICAgQGlmICgkZW5hYmxlLWZsYWctLXJldiA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIERpc2FibGUgcmV2ZXJzYWwgb2YgY29udGVudCBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbmNlcHQgb2ZcclxuICAgICAgICAgICAgICAgICAqIOKAmHJldmVyc2Vk4oCZIGluIGEgc3RhY2tlZCBsYXlvdXQuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogbHRyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmLFxyXG4gICAgICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgICAgID4gJWZsYWdfX2ltZyxcclxuICAgICAgICAgICAgPiAuZmxhZ19fYm9keSxcclxuICAgICAgICAgICAgPiAlZmxhZ19fYm9keSB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJld29yayB0aGUgc3BhY2luZ3Mgb24gcmVndWxhciBmbGFnIG9iamVjdHMuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgICAgID4gJWZsYWdfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJGZsYWctZ3V0dGVyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBAaWYgKCRlbmFibGUtZmxhZy0tdGlueSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIFRpbnkgcmVzcG9uc2l2ZSBmbGFncy5cclxuICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgKiBUYWtlIGEgbGl0dGxlIG1vcmUgaGVhdnktaGFuZGVkIGFwcHJvYWNoIHRvIHJld29ya2luZ1xyXG4gICAgICAgICAgICAgICAgICogc3BhY2luZ3Mgb24gZmxhZ3MgdGhhdCBhcmUgYWxzbyB0aW55IGZsYWdzIGluIHRoZWlyIHJlZ3VsYXJcclxuICAgICAgICAgICAgICAgICAqIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAmLmZsYWctLXRpbnksXHJcbiAgICAgICAgICAgICAgICAmJWZsYWctLXRpbnkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgICAgICAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAkZmxhZy1ndXR0ZXItLXRpbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBAaWYgKCRlbmFibGUtZmxhZy0tc21hbGwgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBTbWFsbCByZXNwb25zaXZlIGZsYWdzLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIFRha2UgYSBsaXR0bGUgbW9yZSBoZWF2eS1oYW5kZWQgYXBwcm9hY2ggdG8gcmV3b3JraW5nXHJcbiAgICAgICAgICAgICAgICAgKiBzcGFjaW5ncyBvbiBmbGFncyB0aGF0IGFyZSBhbHNvIHNtYWxsIGZsYWdzIGluIHRoZWlyIHJlZ3VsYXJcclxuICAgICAgICAgICAgICAgICAqIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAmLmZsYWctLXNtYWxsLFxyXG4gICAgICAgICAgICAgICAgJiVmbGFnLS1zbWFsbCB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgID4gLmZsYWdfX2ltZyxcclxuICAgICAgICAgICAgICAgICAgICA+ICVmbGFnX19pbWcge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRmbGFnLWd1dHRlci0tc21hbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBAaWYgKCRlbmFibGUtZmxhZy0tbGFyZ2UgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBMYXJnZSByZXNwb25zaXZlIGZsYWdzLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIFRha2UgYSBsaXR0bGUgbW9yZSBoZWF2eS1oYW5kZWQgYXBwcm9hY2ggdG8gcmV3b3JraW5nXHJcbiAgICAgICAgICAgICAgICAgKiBzcGFjaW5ncyBvbiBmbGFncyB0aGF0IGFyZSBhbHNvIGxhcmdlIGZsYWdzIGluIHRoZWlyIHJlZ3VsYXJcclxuICAgICAgICAgICAgICAgICAqIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAmLmZsYWctLWxhcmdlLFxyXG4gICAgICAgICAgICAgICAgJiVmbGFnLS1sYXJnZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgID4gLmZsYWdfX2ltZyxcclxuICAgICAgICAgICAgICAgICAgICA+ICVmbGFnX19pbWcge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRmbGFnLWd1dHRlci0tbGFyZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBAaWYgKCRlbmFibGUtZmxhZy0taHVnZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICAgICAqIEh1Z2UgcmVzcG9uc2l2ZSBmbGFncy5cclxuICAgICAgICAgICAgICAgICAqXHJcbiAgICAgICAgICAgICAgICAgKiBUYWtlIGEgbGl0dGxlIG1vcmUgaGVhdnktaGFuZGVkIGFwcHJvYWNoIHRvIHJld29ya2luZ1xyXG4gICAgICAgICAgICAgICAgICogc3BhY2luZ3Mgb24gZmxhZ3MgdGhhdCBhcmUgYWxzbyBodWdlIGZsYWdzIGluIHRoZWlyIHJlZ3VsYXJcclxuICAgICAgICAgICAgICAgICAqIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAmLmZsYWctLWh1Z2UsXHJcbiAgICAgICAgICAgICAgICAmJWZsYWctLWh1Z2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICA+IC5mbGFnX19pbWcsXHJcbiAgICAgICAgICAgICAgICAgICAgPiAlZmxhZ19faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAkZmxhZy1ndXR0ZXItLWh1Z2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0ZPUk1TXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEZvcm0gb2JqZWN0XHJcbiAqL1xyXG4uZm9ybSxcclxuJWZvcm0ge1xyXG4gICAgcGFkZGluZzogJGJhc2Utc3BhY2luZy11bml0O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWdyYXktYWx0bztcclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNIRUFESU5HU1xyXG4vL1xyXG4vLyBIZWFkaW5ncyAx4oCTNuKAmXMgY29ycmVzcG9uZGluZyBHcmVlay1hbHBoYWJldCBhYnN0cmFjdCBjbGFzc2VzIGZvclxyXG4vLyBkb3VibGUtc3RyYW5kZWQgaGVhZGluZyBoaWVyYXJjaHk6XHJcbi8vIGh0dHA6Ly9jc3N3aXphcmRyeS5jb20vMjAxMi8wMi9wcmFnbWF0aWMtcHJhY3RpY2FsLWZvbnQtc2l6aW5nLWluLWNzc1xyXG4vL1xyXG4vLyBVc2UgdGhlc2UgaGVscGVyIGNsYXNzZXMgdG8gY2F1c2Ugb3RoZXIgZWxlbWVudHMgdG8gYWRvcHQgdGhlIHN0eWxpbmdcclxuLy8gb2YgdGhlIHJlc3BlY3RpdmUgaGVhZGluZywgZS5nLjpcclxuLy9cclxuLy8gPGgyIGNsYXNzPVwiYWxwaGFcIj5Mb3JlbSBpcHN1bTwvaDI+XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhlYWRpbmcgMSBjb3JyZXNwb25kaW5nIGNsYXNzXHJcbiAqL1xyXG4uYWxwaGEsXHJcbiVhbHBoYSB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS0xKTtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtMS10YWJsZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIZWFkaW5nIDIgY29ycmVzcG9uZGluZyBjbGFzc1xyXG4gKi9cclxuLmJldGEsXHJcbiViZXRhIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTIpO1xyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS0yLXRhYmxldCk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEhlYWRpbmcgMyBjb3JyZXNwb25kaW5nIGNsYXNzXHJcbiAqL1xyXG4uZ2FtbWEsXHJcbiVnYW1tYSB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS0zKTtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtMy10YWJsZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIZWFkaW5nIDQgY29ycmVzcG9uZGluZyBjbGFzc1xyXG4gKi9cclxuLmRlbHRhLFxyXG4lZGVsdGEge1xyXG4gICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtNCk7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTQtdGFibGV0KTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogSGVhZGluZyA1IGNvcnJlc3BvbmRpbmcgY2xhc3NcclxuICovXHJcbi5lcHNpbG9uLFxyXG4lZXBzaWxvbiB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS01KTtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRoZWFkaW5nLXNpemUtNS10YWJsZXQpO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIZWFkaW5nIDYgY29ycmVzcG9uZGluZyBjbGFzc1xyXG4gKi9cclxuLnpldGEsXHJcbiV6ZXRhIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkaGVhZGluZy1zaXplLTYpO1xyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBAaW5jbHVkZSBmb250LXNpemUoJGhlYWRpbmctc2l6ZS02LXRhYmxldCk7XHJcbiAgICB9XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjSU1BR0VTXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjTEFZT1VUXHJcbi8vXHJcbi8vIFRoZSBpbnVpdGNzcyBsYXlvdXQgc3lzdGVtIHVzZXMgYGJveC1zaXppbmc6IGJvcmRlci1ib3hgIGFuZFxyXG4vLyBgZGlzcGxheTogaW5saW5lLWJsb2NrYCB0byBjcmVhdGUgYW4gZXh0cmVtZWx5IHBvd2VyZnVsLCBmbGV4aWJsZVxyXG4vLyBhbHRlcm5hdGl2ZSB0byB0aGUgdHJhZGl0aW9uYWwgZ3JpZCBzeXN0ZW0uXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLy8gR3V0dGVyXHJcbi8vIElmIHRoZSBiYXNlIHNwYWNpbmcgdW5pdCBpcyBpbiBlbSwgd2UgbXVzdCBjb252ZXJ0IGl0IHRvIHJlbS4gVGhpcyBpcyBkdWVcclxuLy8gdG8gYSB3aGl0ZXNwYWNlIGZpeCBgZm9udCBzaXplOiAwYCB0aGF0IHdlIHNldCBvbiBsYXlvdXQgZ3JvdXBzIHRvIHJlbW92ZVxyXG4vLyB3aGl0ZXNwYWNlIGJldHdlZW4gbGF5b3V0IGl0ZW1zLiBJZiB3ZSB3b3VsZCB1c2UgZW0gaW5zdGVhZCwgYWxsIHBhZGRpbmdzXHJcbi8vIGFuZCBtYXJnaW5zIGluIHRoZSBsYXlvdXQgZ3JvdXBzIHdvdWxkIGJlIDAuXHJcbiRsYXlvdXQtZ3V0dGVyOiAgICAgICAgICAgICByZW0oJGJhc2Utc3BhY2luZy11bml0KTtcclxuJGxheW91dC1ndXR0ZXItLXRpbnk6ICAgICAgIHF1YXJ0ZXIoJGxheW91dC1ndXR0ZXIpO1xyXG4kbGF5b3V0LWd1dHRlci0tc21hbGw6ICAgICAgaGFsdmUoJGxheW91dC1ndXR0ZXIpO1xyXG4kbGF5b3V0LWd1dHRlci0tbGFyZ2U6ICAgICAgZG91YmxlKCRsYXlvdXQtZ3V0dGVyKTtcclxuJGxheW91dC1ndXR0ZXItLWh1Z2U6ICAgICAgIHF1YWRydXBsZSgkbGF5b3V0LWd1dHRlcik7XHJcblxyXG5cclxuLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtbGF5b3V0LS10aW55OiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1sYXlvdXQtLXNtYWxsOiAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxheW91dC0tbGFyZ2U6ICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbGF5b3V0LS1odWdlOiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1sYXlvdXQtLWZsdXNoOiAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxheW91dC0tcmV2OiAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbGF5b3V0LS1taWRkbGU6ICAgICBmYWxzZTtcclxuJGVuYWJsZS1sYXlvdXQtLWJvdHRvbTogICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxheW91dC0tcmlnaHQ6ICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbGF5b3V0LS1jZW50ZXI6ICAgICBmYWxzZTtcclxuJGVuYWJsZS1sYXlvdXQtLWF1dG86ICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxheW91dC0tZmxleDogICAgICAgZmFsc2U7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBCZWdpbiBhIGxheW91dCBncm91cC5cclxuICogMS4gUmVtb3ZlIHdoaXRlc3BhY2UgYmV0d2VlbiBjaGlsZCBlbGVtZW50LlxyXG4gKi9cclxuLmxheW91dCxcclxuJWxheW91dCB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0kbGF5b3V0LWd1dHRlcjtcclxuICAgIG1hcmdpbi1ib3R0b206ICRsYXlvdXQtZ3V0dGVyO1xyXG4gICAgZm9udC1zaXplOiAwOyAvKiBbMV0gKi9cclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogMS4gQ2F1c2UgY29sdW1ucyB0byBzdGFjayBzaWRlLWJ5LXNpZGUuXHJcbiAqIDIuIFNwYWNlIGNvbHVtbnMgYXBhcnQuXHJcbiAqIDMuIEFsaWduIGNvbHVtbnMgdG8gdGhlIHRvcHMgb2YgZWFjaCBvdGhlci5cclxuICogNC4gRnVsbC13aWR0aCB1bmxlc3MgdG9sZCB0byBiZWhhdmUgb3RoZXJ3aXNlLlxyXG4gKiA1LiBSZXN0b3JlIGZvbnQtc2l6ZSBmcm9tIDAgdG8gYCRiYXNlLWZvbnQtc2l6ZWAuXHJcbiAqL1xyXG4ubGF5b3V0X19pdGVtLFxyXG4lbGF5b3V0X19pdGVtIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgkYmFzZS1mb250LXNpemUsIG5vbmUpOyAvKiBbNV0gKi9cclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgLyogWzFdICovXHJcbiAgICB3aWR0aDogMTAwJTsgLyogWzRdICovXHJcbiAgICBwYWRkaW5nLWxlZnQ6ICRsYXlvdXQtZ3V0dGVyOyAvKiBbMl0gKi9cclxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7IC8qIFszXSAqL1xyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXlvdXRzIHdpdGggdGlueSBndXR0ZXJzLlxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS10aW55LFxyXG4gICAgJWxheW91dC0tdGlueSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0oJGxheW91dC1ndXR0ZXItLXRpbnkpO1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkbGF5b3V0LWd1dHRlci0tdGlueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxheW91dC0tc21hbGwgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXlvdXRzIHdpdGggc21hbGwgZ3V0dGVycy5cclxuICAgICAqL1xyXG4gICAgLmxheW91dC0tc21hbGwsXHJcbiAgICAlbGF5b3V0LS1zbWFsbCB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0oJGxheW91dC1ndXR0ZXItLXNtYWxsKTtcclxuXHJcbiAgICAgICAgPiAubGF5b3V0X19pdGVtLFxyXG4gICAgICAgID4gJWxheW91dF9faXRlbSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogJGxheW91dC1ndXR0ZXItLXNtYWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbGF5b3V0LS1sYXJnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIExheW91dHMgd2l0aCBsYXJnZSBndXR0ZXJzLlxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS1sYXJnZSxcclxuICAgICVsYXlvdXQtLWxhcmdlIHtcclxuICAgICAgICBtYXJnaW4tbGVmdDogLSgkbGF5b3V0LWd1dHRlci0tbGFyZ2UpO1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkbGF5b3V0LWd1dHRlci0tbGFyZ2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLWh1Z2UgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXlvdXRzIHdpdGggaHVnZSBndXR0ZXJzLlxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS1odWdlLFxyXG4gICAgJWxheW91dC0taHVnZSB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC0oJGxheW91dC1ndXR0ZXItLWh1Z2UpO1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAkbGF5b3V0LWd1dHRlci0taHVnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxheW91dC0tZmx1c2ggPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXlvdXRzIHdpdGggbm8gZ3V0dGVycy5cclxuICAgICAqL1xyXG4gICAgLmxheW91dC0tZmx1c2gsXHJcbiAgICAlbGF5b3V0LS1mbHVzaCB7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcblxyXG4gICAgICAgID4gLmxheW91dF9faXRlbSxcclxuICAgICAgICA+ICVsYXlvdXRfX2l0ZW0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLXJldiA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldmVyc2VkIHJlbmRlcmVkIG9yZGVyIG9mIGxheW91dCBpdGVtcywgZS5nLiBpdGVtcyAxLCAyLCAzLCA0IGluIHlvdXJcclxuICAgICAqIG1hcmt1cCB3aWxsIGRpc3BsYXkgaW4gb3JkZXIgNCwgMywgMiwgMSBvbiB5b3VyIHBhZ2UuXHJcbiAgICAgKi9cclxuICAgIC5sYXlvdXQtLXJldixcclxuICAgICVsYXlvdXQtLXJldiB7XHJcbiAgICAgICAgZGlyZWN0aW9uOiBydGw7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XHJcblxyXG4gICAgICAgID4gLmxheW91dF9faXRlbSxcclxuICAgICAgICA+ICVsYXlvdXRfX2l0ZW0ge1xyXG4gICAgICAgICAgICBkaXJlY3Rpb246IGx0cjtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxheW91dC0tbWlkZGxlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQWxpZ24gbGF5b3V0IGl0ZW1zIHRvIHRoZSB2ZXJ0aWNhbCBjZW50ZXJzIG9mIGVhY2ggb3RoZXIuXHJcbiAgICAgKi9cclxuICAgIC5sYXlvdXQtLW1pZGRsZSxcclxuICAgICVsYXlvdXQtLW1pZGRsZSB7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuXHJcbiAgICAgICAgPiAubGF5b3V0X19pdGVtLFxyXG4gICAgICAgID4gJWxheW91dF9faXRlbSB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLWJvdHRvbSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEFsaWduIGxheW91dCBpdGVtcyB0byB0aGUgdmVydGljYWwgYm90dG9tcyBvZiBlYWNoIG90aGVyLlxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS1ib3R0b20sXHJcbiAgICAlbGF5b3V0LS1ib3R0b20ge1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcclxuXHJcbiAgICAgICAgPiAubGF5b3V0X19pdGVtLFxyXG4gICAgICAgID4gJWxheW91dF9faXRlbSB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLXJpZ2h0ID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogTWFrZSB0aGUgbGF5b3V0IGl0ZW1zIGZpbGwgdXAgZnJvbSB0aGUgcmlnaHQgaGFuZCBzaWRlLlxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS1yaWdodCxcclxuICAgICVsYXlvdXQtLXJpZ2h0IHtcclxuICAgICAgICB0ZXh0LWFsaWduOiByaWdodDtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxheW91dC0tY2VudGVyID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogTWFrZSB0aGUgbGF5b3V0IGl0ZW1zIGZpbGwgdXAgZnJvbSB0aGUgY2VudGVyIG91dHdhcmQuXHJcbiAgICAgKi9cclxuICAgIC5sYXlvdXQtLWNlbnRlcixcclxuICAgICVsYXlvdXQtLWNlbnRlciB7XHJcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxheW91dC0tYXV0byA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIENhdXNlIGxheW91dCBpdGVtcyB0byB0YWtlIHVwIGEgbm9uLWV4cGxpY2l0IGFtb3VudCBvZiB3aWR0aC5cclxuICAgICAqL1xyXG4gICAgLmxheW91dC0tYXV0byxcclxuICAgICVsYXlvdXQtLWF1dG8ge1xyXG5cclxuICAgICAgICA+IC5sYXlvdXRfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGF5b3V0X19pdGVtIHtcclxuICAgICAgICAgICAgd2lkdGg6IGF1dG87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1sYXlvdXQtLWZsZXggPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDYXVzZSBsYXlvdXQgaXRlbXMgdG8gZmlsbCB0aGUgdmVydGljYWwgc3BhY2Ugb2YgcGFyZW50IGxheW91dFxyXG4gICAgICovXHJcbiAgICAubGF5b3V0LS1mbGV4LFxyXG4gICAgJWxheW91dC0tZmxleCB7XHJcbiAgICAgICAgZGlzcGxheTogZmxleDtcclxuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XHJcblxyXG4gICAgICAgID4gLmxheW91dF9faXRlbSxcclxuICAgICAgICA+ICVsYXlvdXRfX2l0ZW0ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNMSVNULUJBUkVcclxuLy9cclxuLy8gVGhlIGxpc3QtYmFyZSBvYmplY3Qgc2ltcGx5IHJlbW92ZXMgYW55IGluZGVudHMgYW5kIGJ1bGxldCBwb2ludHNcclxuLy8gZnJvbSBsaXN0cy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogQmFyZSBsaXN0IG9iamVjdFxyXG4gKi9cclxuLmxpc3QtYmFyZSxcclxuJWxpc3QtYmFyZSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNMSVNULUJMT0NLXHJcbi8vXHJcbi8vIFRoZSBsaXN0LWJsb2NrIG9iamVjdCBjcmVhdGVzIGJsb2NreSBsaXN0IGl0ZW1zIG91dCBvZiBhIGB1bGAgb3IgYG9sYC5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBQYWRkaW5nXHJcbiRsaXN0LWJsb2NrLXBhZGRpbmc6ICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0O1xyXG4kbGlzdC1ibG9jay1wYWRkaW5nLS10aW55OiAgICAgIHF1YXJ0ZXIoJGxpc3QtYmxvY2stcGFkZGluZyk7XHJcbiRsaXN0LWJsb2NrLXBhZGRpbmctLXNtYWxsOiAgICAgaGFsdmUoJGxpc3QtYmxvY2stcGFkZGluZyk7XHJcbiRsaXN0LWJsb2NrLXBhZGRpbmctLWxhcmdlOiAgICAgZG91YmxlKCRsaXN0LWJsb2NrLXBhZGRpbmcpO1xyXG4kbGlzdC1ibG9jay1wYWRkaW5nLS1odWdlOiAgICAgIHF1YWRydXBsZSgkbGlzdC1ibG9jay1wYWRkaW5nKTtcclxuXHJcblxyXG4vLyBNb2RpZmllcnNcclxuJGVuYWJsZS1saXN0LWJsb2NrLS10aW55OiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1saXN0LWJsb2NrLS1zbWFsbDogICAgICBmYWxzZTtcclxuJGVuYWJsZS1saXN0LWJsb2NrLS1sYXJnZTogICAgICBmYWxzZTtcclxuJGVuYWJsZS1saXN0LWJsb2NrLS1odWdlOiAgICAgICBmYWxzZTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIExpc3QtYmxvY2sgb2JqZWN0XHJcbiAqL1xyXG4ubGlzdC1ibG9jayxcclxuJWxpc3QtYmxvY2sge1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XHJcblxyXG4gICAgPiBsaSB7XHJcbiAgICAgICAgQGV4dGVuZCAlbGlzdC1ibG9ja19faXRlbTtcclxuICAgIH1cclxufVxyXG5cclxuLmxpc3QtYmxvY2tfX2l0ZW0sXHJcbiVsaXN0LWJsb2NrX19pdGVtIHtcclxuICAgIHBhZGRpbmc6ICRsaXN0LWJsb2NrLXBhZGRpbmc7XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxpc3QtYmxvY2stLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaW55IGxpc3QtYmxvY2tzLlxyXG4gICAgICovXHJcbiAgICAubGlzdC1ibG9jay0tdGlueSxcclxuICAgICVsaXN0LWJsb2NrLS10aW55IHtcclxuXHJcbiAgICAgICAgPiAubGlzdC1ibG9ja19faXRlbSxcclxuICAgICAgICA+ICVsaXN0LWJsb2NrX19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZzogJGxpc3QtYmxvY2stcGFkZGluZy0tdGlueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBpZiAoJGVuYWJsZS1saXN0LWJsb2NrLS1zbWFsbCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFNtYWxsIGxpc3QtYmxvY2tzLlxyXG4gICAgICovXHJcbiAgICAubGlzdC1ibG9jay0tc21hbGwsXHJcbiAgICAlbGlzdC1ibG9jay0tc21hbGwge1xyXG5cclxuICAgICAgICA+IC5saXN0LWJsb2NrX19pdGVtLFxyXG4gICAgICAgID4gJWxpc3QtYmxvY2tfX2l0ZW0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAkbGlzdC1ibG9jay1wYWRkaW5nLS1zbWFsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBpZiAoJGVuYWJsZS1saXN0LWJsb2NrLS1sYXJnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIExhcmdlIGxpc3QtYmxvY2tzLlxyXG4gICAgICovXHJcbiAgICAubGlzdC1ibG9jay0tbGFyZ2UsXHJcbiAgICAlbGlzdC1ibG9jay0tbGFyZ2Uge1xyXG5cclxuICAgICAgICA+IC5saXN0LWJsb2NrX19pdGVtLFxyXG4gICAgICAgID4gJWxpc3QtYmxvY2tfX2l0ZW0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAkbGlzdC1ibG9jay1wYWRkaW5nLS1sYXJnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBpZiAoJGVuYWJsZS1saXN0LWJsb2NrLS1odWdlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogSHVnZSBsaXN0LWJsb2Nrcy5cclxuICAgICAqL1xyXG4gICAgLmxpc3QtYmxvY2stLWh1Z2UsXHJcbiAgICAlbGlzdC1ibG9jay0taHVnZSB7XHJcblxyXG4gICAgICAgID4gLmxpc3QtYmxvY2tfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGlzdC1ibG9ja19faXRlbSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6ICRsaXN0LWJsb2NrLXBhZGRpbmctLWh1Z2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0xJU1QtSU5MSU5FXHJcbi8vXHJcbi8vIFRoZSBsaXN0LWlubGluZSBvYmplY3Qgc2ltcGx5IGRpc3BsYXlzIGEgbGlzdCBvZiBpdGVtcyBpbiBvbmUgbGluZS5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtbGlzdC1pbmxpbmUtLWRlbGltaXRlZDogICAgIHRydWU7XHJcblxyXG5cclxuLy8gU2V0dGluZ3NcclxuJGxpc3QtaW5saW5lLWRlbGltaXQtY2hhcmFjdGVyOiAgICAgJGdseXBoLW5vLWJyZWFrLXNwYWNlICsgJGdseXBoLXZlcnRpY2FsLWxpbmUgKyAkZ2x5cGgtbm8tYnJlYWstc3BhY2U7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBMaXN0LWlubGluZSBvYmplY3RcclxuICovXHJcbi5saXN0LWlubGluZSxcclxuJWxpc3QtaW5saW5lIHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBsaXN0LXN0eWxlOiBub25lO1xyXG5cclxuICAgID4gbGkge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbGlzdC1pbmxpbmUtLWRlbGltaXRlZCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIENvbW1hIGRlbGltaXRlZCBsaXN0IHRvIHNlbWFudGljYWxseSBtYXJrIHVwIGxpc3RzIG9mIHRhZ3MsIGV0Yy5cclxuICAgICAqXHJcbiAgICAgKiBOLkIuIFRoaXMgY29tcG9uZW50IHJlcXVpcmVzIHRoYXQgeW91IHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBiZXR3ZWVuIExJcy5cclxuICAgICAqICAgICAgVGhlIHNpbXBsZXN0IChhbmQgdmFsaWQpIHdheSB0byBhY2hpZXZlIHRoaXMgaXMgYnkgb21pdHRpbmcgdGhlXHJcbiAgICAgKiAgICAgIGNsb3NpbmcgYDwvbGk+YCB0YWcuXHJcbiAgICAgKi9cclxuICAgIC5saXN0LWlubGluZS0tZGVsaW1pdGVkLFxyXG4gICAgJWxpc3QtaW5saW5lLS1kZWxpbWl0ZWQge1xyXG5cclxuICAgICAgICA+IGxpICsgbGkge1xyXG5cclxuICAgICAgICAgICAgJjo6YmVmb3JlIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFwiI3skbGlzdC1pbmxpbmUtZGVsaW1pdC1jaGFyYWN0ZXJ9XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjTElTVC1VSVxyXG4vL1xyXG4vLyBUaGUgVUkgbGlzdCBvYmplY3QgY3JlYXRlcyBibG9ja3kgbGlzdCBpdGVtcyB3aXRoIGEga2V5bGluZSBzZXBhcmF0b3JcclxuLy8gb3V0IG9mIGEgYHVsYCBvciBgb2xgLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIFBhZGRpbmdcclxuJGxpc3QtdWktcGFkZGluZzogICAgICAgICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQ7XHJcbiRsaXN0LXVpLXBhZGRpbmctLXRpbnk6ICAgICAgICAgcXVhcnRlcigkbGlzdC11aS1wYWRkaW5nKTtcclxuJGxpc3QtdWktcGFkZGluZy0tc21hbGw6ICAgICAgICBoYWx2ZSgkbGlzdC11aS1wYWRkaW5nKTtcclxuJGxpc3QtdWktcGFkZGluZy0tbGFyZ2U6ICAgICAgICBkb3VibGUoJGxpc3QtdWktcGFkZGluZyk7XHJcbiRsaXN0LXVpLXBhZGRpbmctLWh1Z2U6ICAgICAgICAgcXVhZHJ1cGxlKCRsaXN0LXVpLXBhZGRpbmcpO1xyXG5cclxuXHJcbi8vIE1vZGlmaWVyc1xyXG4kZW5hYmxlLWxpc3QtdWktLXRpbnk6ICAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxpc3QtdWktLXNtYWxsOiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxpc3QtdWktLWxhcmdlOiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxpc3QtdWktLWh1Z2U6ICAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLWxpc3QtdWktLWlubmVyOiAgICAgICAgIGZhbHNlO1xyXG5cclxuXHJcbi8vIFNldHRpbmdzXHJcbiRsaXN0LXVpLWJvcmRlci13aWR0aDogICAgICAgICAgZW0oMXB4KTtcclxuJGxpc3QtdWktYm9yZGVyLXN0eWxlOiAgICAgICAgICBzb2xpZDtcclxuJGxpc3QtdWktYm9yZGVyLWNvbG9yOiAgICAgICAgICAkY29sb3ItZ3JheS1hbHRvO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogTGlzdC1VSSBvYmplY3RcclxuICovXHJcbi5saXN0LXVpLFxyXG4lbGlzdC11aSxcclxuLmxpc3QtdWlfX2l0ZW0sXHJcbiVsaXN0LXVpX19pdGVtIHtcclxuICAgIGJvcmRlcjogMCAkbGlzdC11aS1ib3JkZXItc3R5bGUgJGxpc3QtdWktYm9yZGVyLWNvbG9yO1xyXG59XHJcblxyXG5cclxuXHJcbi5saXN0LXVpLFxyXG4lbGlzdC11aSB7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgYm9yZGVyLXRvcC13aWR0aDogJGxpc3QtdWktYm9yZGVyLXdpZHRoO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuXHJcbiAgICA+IGxpIHtcclxuICAgICAgICBAZXh0ZW5kICVsaXN0LXVpX19pdGVtO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbi5saXN0LXVpX19pdGVtLFxyXG4lbGlzdC11aV9faXRlbSB7XHJcbiAgICBwYWRkaW5nOiAkbGlzdC11aS1wYWRkaW5nO1xyXG4gICAgYm9yZGVyLWJvdHRvbS13aWR0aDogJGxpc3QtdWktYm9yZGVyLXdpZHRoO1xyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1saXN0LXVpLS10aW55ID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGlueSBsaXN0LXVpcy5cclxuICAgICAqL1xyXG4gICAgLmxpc3QtdWktLXRpbnksXHJcbiAgICAlbGlzdC11aS0tdGlueSB7XHJcblxyXG4gICAgICAgID4gLmxpc3QtdWlfX2l0ZW0sXHJcbiAgICAgICAgPiAlbGlzdC11aV9faXRlbSB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDAgJGxpc3QtdWktcGFkZGluZy0tc21hbGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1saXN0LXVpLS1zbWFsbCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFNtYWxsIGxpc3QtdWlzLlxyXG4gICAgICovXHJcbiAgICAubGlzdC11aS0tc21hbGwsXHJcbiAgICAlbGlzdC11aS0tc21hbGwge1xyXG5cclxuICAgICAgICA+IC5saXN0LXVpX19pdGVtLFxyXG4gICAgICAgID4gJWxpc3QtdWlfX2l0ZW0ge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAkbGlzdC11aS1wYWRkaW5nLS10aW55ICRsaXN0LXVpLXBhZGRpbmctLXNtYWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbGlzdC11aS0tbGFyZ2UgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXJnZSBsaXN0LXVpcy5cclxuICAgICAqL1xyXG4gICAgLmxpc3QtdWktLWxhcmdlLFxyXG4gICAgJWxpc3QtdWktLWxhcmdlIHtcclxuXHJcbiAgICAgICAgPiAubGlzdC11aV9faXRlbSxcclxuICAgICAgICA+ICVsaXN0LXVpX19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZzogJGxpc3QtdWktcGFkZGluZy0tc21hbGwgJGxpc3QtdWktcGFkZGluZztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLWxpc3QtdWktLWh1Z2UgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBIdWdlIGxpc3QtdWlzLlxyXG4gICAgICovXHJcbiAgICAubGlzdC11aS0taHVnZSxcclxuICAgICVsaXN0LXVpLS1odWdlIHtcclxuXHJcbiAgICAgICAgPiAubGlzdC11aV9faXRlbSxcclxuICAgICAgICA+ICVsaXN0LXVpX19pdGVtIHtcclxuICAgICAgICAgICAgcGFkZGluZzogJGxpc3QtdWktcGFkZGluZyAkbGlzdC11aS1wYWRkaW5nO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbGlzdC11aS0taW5uZXIgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgdG9wIGFuZCBib3R0b20gYm9yZGVyIGZyb20gbGlzdFxyXG4gICAgICovXHJcbiAgICAubGlzdC11aS0taW5uZXIsXHJcbiAgICAlbGlzdC11aS0taW5uZXIge1xyXG4gICAgICAgIGJvcmRlci10b3Atd2lkdGg6IDA7XHJcblxyXG4gICAgICAgID4gLmxpc3QtdWlfX2l0ZW06bGFzdC1jaGlsZCxcclxuICAgICAgICA+ICVsaXN0LXVpX19pdGVtOmxhc3QtY2hpbGQge1xyXG4gICAgICAgICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNNRURJQVxyXG4vL1xyXG4vLyBQbGFjZSBhbnkgaW1hZ2UtIGFuZCB0ZXh0LWxpa2UgY29udGVudCBzaWRlLWJ5LXNpZGUsIGFzIHBlcjpcclxuLy8gaHR0cDovL3N0dWJib3JuZWxsYS5vcmcvY29udGVudC8yMDEwLzA2LzI1L3RoZS1tZWRpYS1vYmplY3Qtc2F2ZXMtaHVuZHJlZHMtb2YtbGluZXMtb2YtY29kZVxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEd1dHRlclxyXG4kbWVkaWEtZ3V0dGVyOiAgICAgICAgICAgICAgICAgICRiYXNlLXNwYWNpbmctdW5pdDtcclxuJG1lZGlhLWd1dHRlci0tdGlueTogICAgICAgICAgICBxdWFydGVyKCRtZWRpYS1ndXR0ZXIpO1xyXG4kbWVkaWEtZ3V0dGVyLS1zbWFsbDogICAgICAgICAgIGhhbHZlKCRtZWRpYS1ndXR0ZXIpO1xyXG4kbWVkaWEtZ3V0dGVyLS1sYXJnZTogICAgICAgICAgIGRvdWJsZSgkbWVkaWEtZ3V0dGVyKTtcclxuJG1lZGlhLWd1dHRlci0taHVnZTogICAgICAgICAgICBxdWFkcnVwbGUoJG1lZGlhLWd1dHRlcik7XHJcblxyXG5cclxuLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtbWVkaWEtLXRpbnk6ICAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLXNtYWxsOiAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLWxhcmdlOiAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLWh1Z2U6ICAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLXJldjogICAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLWZsdXNoOiAgICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtbWVkaWEtLXJlc3BvbnNpdmU6ICAgICAgZmFsc2U7XHJcblxyXG5cclxuLy8gU2V0dGluZ3NcclxuJG1lZGlhLWNvbGxhcHNlLWF0OiAgICAgICAgICAgICAkYnJlYWtwb2ludC10YWJsZXQtc3RhcnQ7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNZWRpYSBvYmplY3RcclxuICovXHJcbi5tZWRpYSxcclxuJW1lZGlhIHtcclxuICAgIEBleHRlbmQgJWNsZWFyZml4O1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcbi5tZWRpYV9faW1nLFxyXG4lbWVkaWFfX2ltZyB7XHJcbiAgICBmbG9hdDogbGVmdDtcclxuICAgIG1hcmdpbi1yaWdodDogJG1lZGlhLWd1dHRlcjtcclxuXHJcbiAgICA+IGltZyB7XHJcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5tZWRpYV9fYm9keSxcclxuJW1lZGlhX19ib2R5IHtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuXHJcbiAgICAmLFxyXG4gICAgPiA6bGFzdC1jaGlsZCB7XHJcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbWVkaWEtLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaW55IG1lZGlhIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIC5tZWRpYS0tdGlueSxcclxuICAgICVtZWRpYS0tdGlueSB7XHJcblxyXG4gICAgICAgID4gLm1lZGlhX19pbWcsXHJcbiAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogJG1lZGlhLWd1dHRlci0tdGlueTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAoJGVuYWJsZS1tZWRpYS0tcmV2ID09IHRydWUpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFRpbnkgcmV2ZXJzZWQgbWVkaWEgb2JqZWN0cy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICYubWVkaWEtLXJldixcclxuICAgICAgICAgICAgJiVtZWRpYS0tcmV2IHtcclxuXHJcbiAgICAgICAgICAgICAgICA+IC5tZWRpYV9faW1nLFxyXG4gICAgICAgICAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAkbWVkaWEtZ3V0dGVyLS10aW55O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5AaWYgKCRlbmFibGUtbWVkaWEtLXNtYWxsID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogU21hbGwgbWVkaWEgb2JqZWN0cy5cclxuICAgICAqL1xyXG4gICAgLm1lZGlhLS1zbWFsbCxcclxuICAgICVtZWRpYS0tc21hbGwge1xyXG5cclxuICAgICAgICA+IC5tZWRpYV9faW1nLFxyXG4gICAgICAgID4gJW1lZGlhX19pbWcge1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6ICRtZWRpYS1ndXR0ZXItLXNtYWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICgkZW5hYmxlLW1lZGlhLS1yZXYgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogU21hbGwgcmV2ZXJzZWQgbWVkaWEgb2JqZWN0cy5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICYubWVkaWEtLXJldixcclxuICAgICAgICAgICAgJiVtZWRpYS0tcmV2IHtcclxuXHJcbiAgICAgICAgICAgICAgICA+IC5tZWRpYV9faW1nLFxyXG4gICAgICAgICAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAkbWVkaWEtZ3V0dGVyLS1zbWFsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQGlmICgkZW5hYmxlLW1lZGlhLS1sYXJnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIExhcmdlIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgKi9cclxuICAgIC5tZWRpYS0tbGFyZ2UsXHJcbiAgICAlbWVkaWEtLWxhcmdlIHtcclxuXHJcbiAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAkbWVkaWEtZ3V0dGVyLS1sYXJnZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEBpZiAoJGVuYWJsZS1tZWRpYS0tcmV2ID09IHRydWUpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIExhcmdlIHJldmVyc2VkIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAmLm1lZGlhLS1yZXYsXHJcbiAgICAgICAgICAgICYlbWVkaWEtLXJldiB7XHJcblxyXG4gICAgICAgICAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICAgICAgICAgID4gJW1lZGlhX19pbWcge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogJG1lZGlhLWd1dHRlci0tbGFyZ2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbkBpZiAoJGVuYWJsZS1tZWRpYS0taHVnZSA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEh1Z2UgbWVkaWEgb2JqZWN0cy5cclxuICAgICAqL1xyXG4gICAgLm1lZGlhLS1odWdlLFxyXG4gICAgJW1lZGlhLS1odWdlIHtcclxuXHJcbiAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAkbWVkaWEtZ3V0dGVyLS1odWdlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQGlmICgkZW5hYmxlLW1lZGlhLS1yZXYgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogSHVnZSByZXZlcnNlZCBtZWRpYSBvYmplY3RzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgJi5tZWRpYS0tcmV2LFxyXG4gICAgICAgICAgICAmJW1lZGlhLS1yZXYge1xyXG5cclxuICAgICAgICAgICAgICAgID4gLm1lZGlhX19pbWcsXHJcbiAgICAgICAgICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6ICRtZWRpYS1ndXR0ZXItLWh1Z2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLW1lZGlhLS1yZXYgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXZlcnNlZCBpbWFnZSBsb2NhdGlvbiAocmlnaHQgaW5zdGVhZCBvZiBsZWZ0KS4gRXh0ZW5kcyBgLm1lZGlhYC5cclxuICAgICAqL1xyXG4gICAgLm1lZGlhLS1yZXYsXHJcbiAgICAlbWVkaWEtLXJldiB7XHJcblxyXG4gICAgICAgID4gLm1lZGlhX19pbWcsXHJcbiAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgIGZsb2F0OiByaWdodDtcclxuICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogJG1lZGlhLWd1dHRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLW1lZGlhLS1mbHVzaCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEZsdXNoIG1lZGlhIG9iamVjdHMgaGF2ZSBubyBzcGFjZSBiZXR3ZWVuIHRoZSBpbWFnZS0gYW5kIHRleHQtY29udGVudC5cclxuICAgICAqL1xyXG4gICAgLm1lZGlhLS1mbHVzaCxcclxuICAgICVtZWRpYS0tZmx1c2gge1xyXG5cclxuICAgICAgICA+IC5tZWRpYV9faW1nLFxyXG4gICAgICAgID4gJW1lZGlhX19pbWcge1xyXG4gICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtbWVkaWEtLXJlc3BvbnNpdmUgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXNwb25zaXZlIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgKlxyXG4gICAgICogVGhlcmUgaXMgYSB2ZXJ5IHByYWdtYXRpYywgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIGEgcmVzcG9uc2l2ZSBtZWRpYVxyXG4gICAgICogb2JqZWN0LCB3aGljaCBzaW1wbHkgcGxhY2VzIHRoZSB0ZXh0LWNvbnRlbnQgYmVuZWF0aCB0aGUgaW1hZ2UtY29udGVudC5cclxuICAgICAqXHJcbiAgICAgKiBXZSB1c2UgYSBgbWF4LXdpZHRoYCBtZWRpYSBxdWVyeSBiZWNhdXNlOlxyXG4gICAgICpcclxuICAgICAqIGEpIGl0IGlzIHRoZSBsZWFzdCB2ZXJib3NlIG1ldGhvZCBpbiB0ZXJtcyBvZiBhbW91bnQgb2YgY29kZSByZXF1aXJlZC5cclxuICAgICAqIGIpIHRoZSBtZWRpYSBvYmplY3TigJlzIGRlZmF1bHQgc3RhdGUgaXMgaW1hZ2UtbmV4dC10by10ZXh0LCBzbyBpdHMgc3RhY2tlZFxyXG4gICAgICogICAgc3RhdGUgaXMgdGhlIGV4Y2VwdGlvbiwgcmF0aGVyIHRoYW4gdGhlIHJ1bGUuXHJcbiAgICAgKi9cclxuICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZWRpYS1jb2xsYXBzZS1hdCkge1xyXG5cclxuICAgICAgICAubWVkaWEtLXJlc3BvbnNpdmUsXHJcbiAgICAgICAgJW1lZGlhLS1yZXNwb25zaXZlIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIFJld29yayB0aGUgc3BhY2luZ3Mgb24gcmVndWxhciBtZWRpYSBvYmplY3RzLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICBmbG9hdDogbm9uZTtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRtZWRpYS1ndXR0ZXI7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQGlmICgkZW5hYmxlLW1lZGlhLS10aW55ID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogVGlueSByZXNwb25zaXZlIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogVGFrZSBhIGxpdHRsZSBtb3JlIGhlYXZ5LWhhbmRlZCBhcHByb2FjaCB0byByZXdvcmtpbmdcclxuICAgICAgICAgICAgICAgICAqIHNwYWNpbmdzIG9uIG1lZGlhIG9iamVjdHMgdGhhdCBhcmUgYWxzbyB0aW55IG1lZGlhIG9iamVjdHNcclxuICAgICAgICAgICAgICAgICAqIGluIHRoZWlyIHJlZ3VsYXIgc3RhdGUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICYubWVkaWEtLXRpbnksXHJcbiAgICAgICAgICAgICAgICAmJW1lZGlhLS10aW55IHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICAgICAgICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1lZGlhLWd1dHRlci0tdGlueTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIEBpZiAoJGVuYWJsZS1tZWRpYS0tc21hbGwgPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAgICAgKiBTbWFsbCByZXNwb25zaXZlIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogVGFrZSBhIGxpdHRsZSBtb3JlIGhlYXZ5LWhhbmRlZCBhcHByb2FjaCB0byByZXdvcmtpbmdcclxuICAgICAgICAgICAgICAgICAqIHNwYWNpbmdzIG9uIG1lZGlhIG9iamVjdHMgdGhhdCBhcmUgYWxzbyBzbWFsbCBtZWRpYSBvYmplY3RzXHJcbiAgICAgICAgICAgICAgICAgKiBpbiB0aGVpciByZWd1bGFyIHN0YXRlLlxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAmLm1lZGlhLS1zbWFsbCxcclxuICAgICAgICAgICAgICAgICYlbWVkaWEtLXNtYWxsIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICAgICAgICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1lZGlhLWd1dHRlci0tc21hbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBAaWYgKCRlbmFibGUtbWVkaWEtLWxhcmdlID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogTGFyZ2UgcmVzcG9uc2l2ZSBtZWRpYSBvYmplY3RzLlxyXG4gICAgICAgICAgICAgICAgICpcclxuICAgICAgICAgICAgICAgICAqIFRha2UgYSBsaXR0bGUgbW9yZSBoZWF2eS1oYW5kZWQgYXBwcm9hY2ggdG8gcmV3b3JraW5nXHJcbiAgICAgICAgICAgICAgICAgKiBzcGFjaW5ncyBvbiBtZWRpYSBvYmplY3RzIHRoYXQgYXJlIGFsc28gbGFyZ2UgbWVkaWEgb2JqZWN0c1xyXG4gICAgICAgICAgICAgICAgICogaW4gdGhlaXIgcmVndWxhciBzdGF0ZS5cclxuICAgICAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICAgICAgJi5tZWRpYS0tbGFyZ2UsXHJcbiAgICAgICAgICAgICAgICAmJW1lZGlhLS1sYXJnZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgID4gLm1lZGlhX19pbWcsXHJcbiAgICAgICAgICAgICAgICAgICAgPiAlbWVkaWFfX2ltZyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRtZWRpYS1ndXR0ZXItLWxhcmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgQGlmICgkZW5hYmxlLW1lZGlhLS1odWdlID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogSHVnZSByZXNwb25zaXZlIG1lZGlhIG9iamVjdHMuXHJcbiAgICAgICAgICAgICAgICAgKlxyXG4gICAgICAgICAgICAgICAgICogVGFrZSBhIGxpdHRsZSBtb3JlIGhlYXZ5LWhhbmRlZCBhcHByb2FjaCB0byByZXdvcmtpbmdcclxuICAgICAgICAgICAgICAgICAqIHNwYWNpbmdzIG9uIG1lZGlhIG9iamVjdHMgdGhhdCBhcmUgYWxzbyBodWdlIG1lZGlhIG9iamVjdHNcclxuICAgICAgICAgICAgICAgICAqIGluIHRoZWlyIHJlZ3VsYXIgc3RhdGUuXHJcbiAgICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgICYubWVkaWEtLWh1Z2UsXHJcbiAgICAgICAgICAgICAgICAmJW1lZGlhLS1odWdlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPiAubWVkaWFfX2ltZyxcclxuICAgICAgICAgICAgICAgICAgICA+ICVtZWRpYV9faW1nIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1lZGlhLWd1dHRlci0taHVnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjUEFDS1xyXG4vL1xyXG4vLyBUaGUgcGFjayBvYmplY3Qgc2ltcGx5IGNhdXNlcyBhbnkgbnVtYmVyIG9mIGVsZW1lbnRzIHBhY2sgdXAgaG9yaXpvbnRhbGx5XHJcbi8vIHRvIGF1dG9tYXRpY2FsbHkgZmlsbCBhbiBlcXVhbCwgZmx1aWQgd2lkdGggb2YgdGhlaXIgcGFyZW50LlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIEd1dHRlclxyXG4kcGFjay1ndXR0ZXI6ICAgICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0O1xyXG4kcGFjay1ndXR0ZXItLXRpbnk6ICAgICAgICAgcXVhcnRlcigkcGFjay1ndXR0ZXIpO1xyXG4kcGFjay1ndXR0ZXItLXNtYWxsOiAgICAgICAgaGFsdmUoJHBhY2stZ3V0dGVyKTtcclxuJHBhY2stZ3V0dGVyLS1sYXJnZTogICAgICAgIGRvdWJsZSgkcGFjay1ndXR0ZXIpO1xyXG4kcGFjay1ndXR0ZXItLWh1Z2U6ICAgICAgICAgcXVhZHJ1cGxlKCRwYWNrLWd1dHRlcik7XHJcblxyXG5cclxuLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtcGFjay0tYXV0bzogICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1wYWNrLS10aW55OiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLXBhY2stLXNtYWxsOiAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtcGFjay0tbGFyZ2U6ICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1wYWNrLS1odWdlOiAgICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLXBhY2stLXJldjogICAgICAgICAgZmFsc2U7XHJcbiRlbmFibGUtcGFjay0tbWlkZGxlOiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS1wYWNrLS1ib3R0b206ICAgICAgIGZhbHNlO1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUGFjayBvYmplY3RcclxuICpcclxuICogMS4gRmlsbCBhbGwgYXZhaWxhYmxlIHNwYWNlLlxyXG4gKiAyLiBDYXVzZSBjaGlsZHJlbiB0byBiZSBhdXRvbWF0aWNhbGx5IGVxdWFsbHkgc2l6ZWQuXHJcbiAqL1xyXG4ucGFjayxcclxuJXBhY2sge1xyXG4gICAgd2lkdGg6IDEwMCU7IC8qIFsxXSAqL1xyXG4gICAgZGlzcGxheTogdGFibGU7XHJcbiAgICB0YWJsZS1sYXlvdXQ6IGZpeGVkOyAvKiBbMl0gKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIENhdXNlIGNoaWxkcmVuIHRvIGFkb3B0IHRhYmxlLWxpa2Ugc3RydWN0dXJlLlxyXG4gKi9cclxuLnBhY2tfX2l0ZW0sXHJcbiVwYWNrX19pdGVtIHtcclxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XHJcblxyXG4gICAgQGlmICgkZW5hYmxlLXBhY2stLW1pZGRsZSA9PSB0cnVlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQWxsIGl0ZW1zIGFyZSBhbGlnbmVkIHRvIHRoZSBtaWRkbGVzIG9mIGVhY2ggb3RoZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLnBhY2stLW1pZGRsZSA+ICYsXHJcbiAgICAgICAgJXBhY2stLW1pZGRsZSA+ICYge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBAaWYgKCRlbmFibGUtcGFjay0tYm90dG9tID09IHRydWUpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbGwgaXRlbXMgYXJlIGFsaWduZWQgdG8gdGhlIGJvdHRvbXMgb2YgZWFjaCBvdGhlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICAucGFjay0tYm90dG9tID4gJixcclxuICAgICAgICAlcGFjay0tYm90dG9tID4gJiB7XHJcbiAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS1wYWNrLS1hdXRvID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2F1c2UgY2hpbGRyZW4gdG8gcGFjayB1cCBpbnRvIGF2YWlsYWJsZSBzcGFjZSwgYnV0IG5vdCBlcXVhbGx5IHNpemVkLlxyXG4gICAgICovXHJcbiAgICAucGFjay0tYXV0byxcclxuICAgICVwYWNrLS1hdXRvIHtcclxuICAgICAgICB0YWJsZS1sYXlvdXQ6IGF1dG87XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLXBhY2stLXRpbnkgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaW55IGd1dHRlcnMgYmV0d2VlbiBpdGVtcy5cclxuICAgICAqL1xyXG4gICAgLnBhY2stLXRpbnksXHJcbiAgICAlcGFjay0tdGlueSB7XHJcbiAgICAgICAgYm9yZGVyLXNwYWNpbmc6ICRwYWNrLWd1dHRlci0tdGlueTtcclxuICAgIH1cclxufVxyXG5cclxuQGlmICgkZW5hYmxlLXBhY2stLXNtYWxsID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogU21hbGwgZ3V0dGVycyBiZXR3ZWVuIGl0ZW1zLlxyXG4gICAgICovXHJcbiAgICAucGFjay0tc21hbGwsXHJcbiAgICAlcGFjay0tc21hbGwge1xyXG4gICAgICAgIGJvcmRlci1zcGFjaW5nOiAkcGFjay1ndXR0ZXItLXNtYWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG5AaWYgKCRlbmFibGUtcGFjay0tbGFyZ2UgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBMYXJnZSBndXR0ZXJzIGJldHdlZW4gaXRlbXMuXHJcbiAgICAgKi9cclxuICAgIC5wYWNrLS1sYXJnZSxcclxuICAgICVwYWNrLS1sYXJnZSB7XHJcbiAgICAgICAgYm9yZGVyLXNwYWNpbmc6ICRwYWNrLWd1dHRlci0tbGFyZ2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBpZiAoJGVuYWJsZS1wYWNrLS1odWdlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogSHVnZSBndXR0ZXJzIGJldHdlZW4gaXRlbXMuXHJcbiAgICAgKi9cclxuICAgIC5wYWNrLS1odWdlLFxyXG4gICAgJXBhY2stLWh1Z2Uge1xyXG4gICAgICAgIGJvcmRlci1zcGFjaW5nOiAkcGFjay1ndXR0ZXItLWh1Z2U7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLXBhY2stLXJldiA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIFJldmVyc2VkIG9yZGVyIHBhY2tzLlxyXG4gICAgICovXHJcbiAgICAucGFjay0tcmV2LFxyXG4gICAgJXBhY2stLXJldiB7XHJcbiAgICAgICAgZGlyZWN0aW9uOiBydGw7XHJcblxyXG4gICAgICAgID4gLnBhY2tfX2l0ZW0sXHJcbiAgICAgICAgPiAlcGFja19faXRlbSB7XHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogbHRyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNQQUdJTkdcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUGFnaW5nIG9iamVjdFxyXG4gKi9cclxuLnBhZ2luZyB7XHJcbiAgICBwYWRkaW5nLXRvcDogJGJhc2Utc3BhY2luZy11bml0LS1sYXJnZTtcclxuICAgIHBhZGRpbmctYm90dG9tOiAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG59XHJcblxyXG5cclxuXHJcbi5wYWdpbmdfX2xpc3Qge1xyXG4gICAgQGV4dGVuZCAlbGlzdC1pbmxpbmU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcblxyXG5cclxuLnBhZ2luZ19fbGluayB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIHBhZGRpbmc6ICRiYXNlLXNwYWNpbmctdW5pdC0tc21hbGwgJGJhc2Utc3BhY2luZy11bml0O1xyXG5cclxuICAgICYuaXMtYWN0aXZlIHtcclxuICAgICAgICBAaW5jbHVkZSBwc2V1ZG8tY2xhc3Nlcyh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAkY29sb3ItYmFzZS10ZXh0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNQQVJBR1JBUEhTXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgLmxlZGVgIGNsYXNzIGlzIHVzZWQgdG8gbWFrZSB0aGUgaW50cm9kdWN0b3J5IHRleHQgKHVzdWFsbHkgYSBwYXJhZ3JhcGgpXHJcbiAqIG9mIGEgZG9jdW1lbnQgc2xpZ2h0bHkgbGFyZ2VyOiBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xlZGVfKG5ld3MpXHJcbiAqXHJcbiAqIDEuIFNlcXVlbmNlcyBvZiB3aGl0ZXNwYWNlIHdpbGwgY29sbGFwc2UgaW50byBhIHNpbmdsZSB3aGl0ZXNwYWNlLlxyXG4gKiAgICBUZXh0IHdpbGwgd3JhcCB3aGVuIG5lY2Vzc2FyeSwgYW5kIG9uIGxpbmUgYnJlYWtzLiBUaGlzIGlzIGEgZml4IHRvXHJcbiAqICAgIGVuYWJsZSBsaW5lIGJyZWFrcyBpbiBsb25nIHN0cmluZyBwcm9wZXJ0aWVzIGluIEVQaVNlcnZlci5cclxuICovXHJcbi5sZWFkLFxyXG4lbGVhZCB7XHJcbiAgICBAaW5jbHVkZSBmb250LXNpemUoJGJhc2UtZm9udC1zaXplICogMS4yLCBpbmhlcml0KTtcclxuICAgIHdoaXRlLXNwYWNlOiBwcmUtbGluZTsgLyogWzFdICovXHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBgLnByZWxpbmVgIGNsYXNzIGlzIHVzZWQgdG8gY3JlYXRlIGxpbmUgYnJlYWtzIGluIEVQaVNlcnZlciBzdHJpbmcgcHJvcGVydGllcy5cclxuICpcclxuICogMS4gU2VxdWVuY2VzIG9mIHdoaXRlc3BhY2Ugd2lsbCBjb2xsYXBzZSBpbnRvIGEgc2luZ2xlIHdoaXRlc3BhY2UuXHJcbiAqICAgIFRleHQgd2lsbCB3cmFwIHdoZW4gbmVjZXNzYXJ5LCBhbmQgb24gbGluZSBicmVha3MuIFRoaXMgaXMgYSBmaXggdG9cclxuICogICAgZW5hYmxlIGxpbmUgYnJlYWtzIGluIGxvbmcgc3RyaW5nIHByb3BlcnRpZXMgaW4gRVBpU2VydmVyLlxyXG4gKi9cclxuLnByZWxpbmUsXHJcbiVwcmVsaW5lIHtcclxuICAgIHdoaXRlLXNwYWNlOiBwcmUtbGluZTsgLyogWzFdICovXHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjVEFCTEVTXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLy8gUGFkZGluZ1xyXG4kdGFibGUtcGFkZGluZzogICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0O1xyXG4kdGFibGUtcGFkZGluZy0tdGlueTogICAgICAgcXVhcnRlcigkdGFibGUtcGFkZGluZyk7XHJcbiR0YWJsZS1wYWRkaW5nLS1zbWFsbDogICAgICBoYWx2ZSgkdGFibGUtcGFkZGluZyk7XHJcblxyXG5cclxuLy8gTW9kaWZpZXJzXHJcbiRlbmFibGUtdGFibGUtLWZpeGVkOiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS10YWJsZS0tdGlueTogICAgICAgIGZhbHNlO1xyXG4kZW5hYmxlLXRhYmxlLS1zbWFsbDogICAgICAgZmFsc2U7XHJcbiRlbmFibGUtdGFibGUtLWxhcmdlOiAgICAgICBmYWxzZTtcclxuJGVuYWJsZS10YWJsZS0tY2VsbHM6ICAgICAgIHRydWU7XHJcbiRlbmFibGUtdGFibGUtLXJvd3M6ICAgICAgICBmYWxzZTtcclxuJGVuYWJsZS10YWJsZS0tY29sdW1uczogICAgIGZhbHNlO1xyXG5cclxuXHJcbi8vIFNldHRpbmdzXHJcbiR0YWJsZS1ib3JkZXItd2lkdGg6ICAgICAgICBlbSgxcHgpO1xyXG4kdGFibGUtYm9yZGVyLXN0eWxlOiAgICAgICAgc29saWQ7XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBUYWJsZSBvYmplY3RcclxuICovXHJcbi50YWJsZSxcclxuJXRhYmxlIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS10YWJsZS0tZml4ZWQgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb3JjZSB0YWJsZXMgaW50byBoYXZpbmcgZXF1YWwtd2lkdGggY29sdW1ucy5cclxuICAgICAqL1xyXG4gICAgLnRhYmxlLS1maXhlZCxcclxuICAgICV0YWJsZS0tZml4ZWQge1xyXG4gICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLXRhYmxlLS10aW55ID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGFibGVzIHdpdGggdmVyeSB0aWdodGx5IHBhY2tlZCBjZWxscy5cclxuICAgICAqL1xyXG4gICAgLnRhYmxlLS10aW55LFxyXG4gICAgJXRhYmxlLS10aW55IHtcclxuXHJcbiAgICAgICAgdGgsXHJcbiAgICAgICAgdGQge1xyXG4gICAgICAgICAgICBwYWRkaW5nOiAkdGFibGUtcGFkZGluZy0tdGlueTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLXRhYmxlLS1zbWFsbCA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIExpZ2h0bHkgcGFja2VkIGNlbGxzLlxyXG4gICAgICovXHJcbiAgICAudGFibGUtLXNtYWxsLFxyXG4gICAgJXRhYmxlLS1zbWFsbCB7XHJcblxyXG4gICAgICAgIHRoLFxyXG4gICAgICAgIHRkIHtcclxuICAgICAgICAgICAgcGFkZGluZzogJHRhYmxlLXBhZGRpbmctLXNtYWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5AaWYgKCRlbmFibGUtdGFibGUtLWxhcmdlID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGFibGVzIHdpdGggdmVyeSB3aWRlbHkgcGFkZGVkIGNlbGxzLlxyXG4gICAgICovXHJcbiAgICAudGFibGUtLWxhcmdlLFxyXG4gICAgJXRhYmxlLS1sYXJnZSB7XHJcblxyXG4gICAgICAgIHRoLFxyXG4gICAgICAgIHRkIHtcclxuICAgICAgICAgICAgcGFkZGluZzogJHRhYmxlLXBhZGRpbmc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS10YWJsZS0tY2VsbHMgPT0gdHJ1ZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYm9yZGVycyBhcm91bmQgYHRhYmxlYCBjZWxscy5cclxuICAgICAqL1xyXG4gICAgLnRhYmxlLS1jZWxscyxcclxuICAgICV0YWJsZS0tY2VsbHMge1xyXG5cclxuICAgICAgICB0aCxcclxuICAgICAgICB0ZCB7XHJcbiAgICAgICAgICAgIGJvcmRlcjogJHRhYmxlLWJvcmRlci13aWR0aCAkdGFibGUtYm9yZGVyLXN0eWxlICRjb2xvci10YWJsZS1ib3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcbkBpZiAoJGVuYWJsZS10YWJsZS0tcm93cyA9PSB0cnVlKSB7XHJcbiAgICAvKipcclxuICAgICAqIEFkZCBib3JkZXJzIG9ubHkgdG8gYHRhYmxlYCByb3dzLlxyXG4gICAgICovXHJcbiAgICAudGFibGUtLXJvd3MsXHJcbiAgICAldGFibGUtLXJvd3Mge1xyXG5cclxuICAgICAgICAmLFxyXG4gICAgICAgIHRoLFxyXG4gICAgICAgIHRkIHtcclxuICAgICAgICAgICAgYm9yZGVyOiAwICR0YWJsZS1ib3JkZXItc3R5bGUgJGNvbG9yLXRhYmxlLWJvcmRlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLnRhYmxlLS1yb3dzLFxyXG4gICAgJXRhYmxlLS1yb3dzIHtcclxuICAgICAgICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xyXG4gICAgICAgIGJvcmRlci10b3Atd2lkdGg6ICR0YWJsZS1ib3JkZXItd2lkdGg7XHJcblxyXG4gICAgICAgIHRoLFxyXG4gICAgICAgIHRkIHtcclxuICAgICAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogJHRhYmxlLWJvcmRlci13aWR0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuQGlmICgkZW5hYmxlLXRhYmxlLS1jb2x1bW5zID09IHRydWUpIHtcclxuICAgIC8qKlxyXG4gICAgICogQWRkIGJvcmRlcnMgb25seSB0byBgdGFibGVgIGNvbHVtbnMuXHJcbiAgICAgKi9cclxuICAgIC50YWJsZS0tY29sdW1ucyxcclxuICAgICV0YWJsZS0tY29sdW1ucyB7XHJcblxyXG4gICAgICAgICYsXHJcbiAgICAgICAgdGgsXHJcbiAgICAgICAgdGQge1xyXG4gICAgICAgICAgICBib3JkZXI6IDAgJHRhYmxlLWJvcmRlci1zdHlsZSAkY29sb3ItdGFibGUtYm9yZGVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAudGFibGUtLWNvbHVtbnMsXHJcbiAgICAldGFibGUtLWNvbHVtbnMge1xyXG4gICAgICAgIGJvcmRlci1sZWZ0LXdpZHRoOiAkdGFibGUtYm9yZGVyLXdpZHRoO1xyXG5cclxuICAgICAgICB0aCxcclxuICAgICAgICB0ZCB7XHJcbiAgICAgICAgICAgIGJvcmRlci1yaWdodC13aWR0aDogJHRhYmxlLWJvcmRlci13aWR0aDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjUEFSQUdSQVBIU1xyXG4vL1xyXG4vLyBBIHNpbXBsZSBhYnN0cmFjdGlvbiBmb3IgbWFraW5nIGVxdWFsLXdpZHRoIG5hdmlnYXRpb24gdGFicy5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVGFicyBvYmplY3RcclxuICpcclxuICogMS4gUmVzZXQgYW55IHJlc2lkdWFsIHN0eWxlcyAobW9zdCBsaWtlbHkgZnJvbSBsaXN0cykuXHJcbiAqIDIuIFRhYmxlcyBmb3IgbGF5b3V0IVxyXG4gKiAzLiBGb3JjZSBhbGwgYHRhYmxlLWNlbGxgIGNoaWxkcmVuIHRvIGhhdmUgZXF1YWwgd2lkdGhzLlxyXG4gKiA0LiBGb3JjZSB0aGUgb2JqZWN0IHRvIGJlIHRoZSBmdWxsIHdpZHRoIG9mIGl0cyBwYXJlbnQuIENvbWJpbmVkIHdpdGggWzJdLFxyXG4gKiAgICB0aGlzIG1ha2VzIHRoZSBvYmplY3QgYmVoYXZlIGluIGEgcXVhc2ktYGRpc3BsYXk6IGJsb2NrO2AgbWFubmVyLlxyXG4gKi9cclxuLnRhYnMsXHJcbiV0YWJzIHtcclxuICAgIGRpc3BsYXk6IHRhYmxlOyAvKiBbMl0gKi9cclxuICAgIHdpZHRoOiAxMDAlOyAvKiBbNF0gKi9cclxuICAgIG1hcmdpbjogMDsgLyogWzFdICovXHJcbiAgICBwYWRkaW5nOiAwOyAvKiBbMV0gKi9cclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIHRhYmxlLWxheW91dDogZml4ZWQ7IC8qIFszXSAqL1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTsgLyogWzFdICovXHJcbn1cclxuXHJcblxyXG5cclxuLnRhYnNfX2l0ZW0sXHJcbiV0YWJzX19pdGVtIHtcclxuICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7IC8qIFsyXSAqL1xyXG59XHJcblxyXG5cclxuXHJcbi50YWJzX19saW5rLFxyXG4ldGFic19fbGluayB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNXUkFQUEVSU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBXcmFwcGVyIG9iamVjdFxyXG4gKi9cclxuLndyYXBwZXIge1xyXG4gICAgd2lkdGg6ICR3cmFwcGVyLXdpZHRoLW1vYmlsZTtcclxuICAgIHBhZGRpbmc6ICRiYXNlLXNwYWNpbmctdW5pdDtcclxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICB3aWR0aDogJHdyYXBwZXItd2lkdGgtdGFibGV0O1xyXG4gICAgfVxyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwibGFwdG9wXCIpIHtcclxuICAgICAgICB3aWR0aDogJHdyYXBwZXItd2lkdGgtbGFwdG9wO1xyXG4gICAgfVxyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwiZGVza3RvcFwiKSB7XHJcbiAgICAgICAgd2lkdGg6ICR3cmFwcGVyLXdpZHRoLWRlc2t0b3A7XHJcbiAgICB9XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjQ09PS0lFLUlORk9STUFUSU9OXHJcbi8vXHJcbi8vIFNlY3Rpb24gdGhhdCBkaXNwbGF5cyBjb29raWUgaW5mb3JtYXRpb24uXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIENvb2tpZSBpbmZvcm1hdGlvbiBjb21wb25lbnRcclxuICovXHJcbi5jb29raWUtaW5mb3JtYXRpb24ge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICAgIGNvbG9yOiAkY29sb3Itd2hpdGU7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItZ3JheS1taW5lLXNoYWZ0O1xyXG4gICAgYm9yZGVyLWJvdHRvbTogZW0oMXB4KSBzb2xpZCBncmF5O1xyXG59XHJcblxyXG5cclxuXHJcbi5jb29raWUtaW5mb3JtYXRpb25fX2xpbmsge1xyXG4gICAgQGluY2x1ZGUgcHNldWRvLWNsYXNzZXModHJ1ZSkge1xyXG4gICAgICAgIGNvbG9yOiAkY29sb3Itd2hpdGU7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XHJcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4uY29va2llLWluZm9ybWF0aW9uX19idXR0b24ge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICB3aWR0aDogYXV0bztcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4uY29va2llLWluZm9ybWF0aW9uX19mbGFnLWJvZHkge1xyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoXCJ0YWJsZXRcIikge1xyXG4gICAgICAgIHBhZGRpbmctbGVmdDogJGJhc2Utc3BhY2luZy11bml0LS1odWdlO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRiYXNlLXNwYWNpbmctdW5pdC0taHVnZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4uY29va2llLWluZm9ybWF0aW9uX19mbGFnLWltZyB7XHJcbiAgICBtYXJnaW4tdG9wOiAkYmFzZS1zcGFjaW5nLXVuaXQ7XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjRVBJU0VSVkVSLUZPUk1TXHJcbi8vXHJcbi8vIEVQaVNlcnZlciBkb2VzIG5vdCBvZmZlciBhIHNpbXBsZSB3YXkgdG8gb3ZlcnJpZGUgbWFya3VwIGFuZCBjc3MgaW4gdGhlaXJcclxuLy8gRm9ybXMgbW9kdWxlLiBUaGVyZWZvcmUsIHdlIG11c3QgdXNlIHRoZWlyIHByZWRlZmluZWQgaW5jb3JyZWN0IEJFTSBzeW50YXhcclxuLy8gKGdyYW5kY2hpbGQgZWxlbWVudHMpIGFuZCAvLyBsb3RzIG9mICFpbXBvcnRhbnQuIFRoaXMgc2hvdWxkIGJlIHJlZmFjdG9yZWRcclxuLy8gaW4gdGhlIGZ1dHVyZSBpZiBFUGlTZXJ2ZXIgbWFrZXMgaXQgZWFzaWVyIHRvIG92ZXJyaWRlIHRoZWlyIG1hcmt1cCBhbmQgY3NzLlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8vIFNldHRpbmdzXHJcbiRmb3Jtcy1sYWJlbC13aWR0aDogICAgIGVtKDEyMHB4KTtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEVQaVNlcnZlciBmb3JtcyBjb21wb25lbnRcclxuICovXHJcbi5FUGlTZXJ2ZXJGb3JtcyB7XHJcbiAgICBwYWRkaW5nOiAkYmFzZS1zcGFjaW5nLXVuaXQ7XHJcbiAgICBtYXJnaW4tdG9wOiAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWdyYXktYWx0bztcclxuICAgIGJvcmRlci1ib3R0b206IGVtKDJweCkgc29saWQgJGNvbG9yLWdyYXktYWx0bztcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRiYXNlLXNwYWNpbmctdW5pdC0tbGFyZ2U7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEVQaVNlcnZlciBmb3JtIHRpdGxlXHJcbiAqL1xyXG4uRm9ybV9fVGl0bGUge1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG5cclxuICAgICY6OmFmdGVyIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICB3aWR0aDogNTAlO1xyXG4gICAgICAgIGhlaWdodDogZW0oM3B4KTtcclxuICAgICAgICBtYXJnaW46ICRiYXNlLXNwYWNpbmctdW5pdCBhdXRvO1xyXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1yZWQtbW9uemE7XHJcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICRjb2xvci1ncmF5LWFsdG87XHJcbiAgICAgICAgY29udGVudDogXCJcIjtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gd2FybmluZyBtZXNzYWdlXHJcbiAqL1xyXG4uRm9ybV9fV2FybmluZ19fTWVzc2FnZSB7XHJcbiAgICBjb2xvcjogaW5oZXJpdCAhaW1wb3J0YW50O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLXJlZC1tb256YSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBFUGlTZXJ2ZXIgZm9ybSBjb250YWluZXJcclxuICovXHJcbi5Gb3JtU3RlcCB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXIgIWltcG9ydGFudDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gZ3JvdXBcclxuICovXHJcbi5Gb3JtX19FbGVtZW50IHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogJGJhc2Utc3BhY2luZy11bml0ICFpbXBvcnRhbnQ7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG5cclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gbGFiZWxcclxuICovXHJcbi5Gb3JtX19FbGVtZW50X19DYXB0aW9uIHtcclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgd2lkdGg6ICRmb3Jtcy1sYWJlbC13aWR0aCAhaW1wb3J0YW50O1xyXG4gICAgICAgIG1heC13aWR0aDogJGZvcm1zLWxhYmVsLXdpZHRoO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6ICRiYXNlLXNwYWNpbmctdW5pdDtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gbGFiZWwgZm9yIGNoZWNrYm94IGFuZCByYWRpb1xyXG4gKi9cclxuLkZvcm1DaG9pY2UgbGFiZWwge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEVQaVNlcnZlciBmb3JtIGlucHV0XHJcbiAqL1xyXG4uRm9ybVRleHRib3hfX0lucHV0IHtcclxuICAgIEBpbmNsdWRlIG1lZGlhLXF1ZXJ5KFwidGFibGV0XCIpIHtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZS1jZWxsICFpbXBvcnRhbnQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIEVQaVNlcnZlciBmb3JtIHNlbGVjdCBvcHRpb25cclxuICovXHJcbi5Gb3JtU2VsZWN0aW9uIG9wdGlvbiB7XHJcbiAgICBmb250LXdlaWdodDogaW5oZXJpdDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gYnV0dG9uXHJcbiAqL1xyXG4uRm9ybVN1Ym1pdEJ1dHRvbixcclxuLkZvcm1SZXNldEJ1dHRvbiB7XHJcbiAgICBAZXh0ZW5kICVidG47XHJcbiAgICBtYXJnaW4tdG9wOiAkYmFzZS1zcGFjaW5nLXVuaXQgIWltcG9ydGFudDtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeShcInRhYmxldFwiKSB7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgfVxyXG5cclxuICAgICY6ZGlzYWJsZWQge1xyXG4gICAgICAgIEBpbmNsdWRlIHBzZXVkby1jbGFzc2VzKHRydWUpIHtcclxuICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItcmVkLW1vbnphO1xyXG4gICAgICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gdmFsaWRhdGlvbiBlcnJvclxyXG4gKi9cclxuLkZvcm1fX0VsZW1lbnRfX1ZhbGlkYXRpb25FcnJvciB7XHJcbiAgICBjb2xvcjogJGNvbG9yLXJlZC1tb256YSAhaW1wb3J0YW50O1xyXG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcclxufVxyXG5cclxuXHJcblxyXG4vKipcclxuICogRVBpU2VydmVyIGZvcm0gaGlkZVxyXG4gKi9cclxuLkVQaVNlcnZlckZvcm1zIC5oaWRlIHtcclxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNNQUlOLU5BVklHQVRJT05cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogTWFpbiBuYXZpZ2F0aW9uIGNvbXBvbmVudFxyXG4gKi9cclxuLm1haW4tbmF2IHtcclxuICAgIGNvbG9yOiAkY29sb3Itc2l0ZS1uYXZpZ2F0aW9uO1xyXG59XHJcblxyXG5cclxuXHJcbi5tYWluLW5hdl9fbG9nbyB7XHJcbiAgICBoZWlnaHQ6IGVtKDMwcHgpO1xyXG59XHJcblxyXG5cclxuXHJcbi5tYWluLW5hdl9fbGlzdCB7XHJcbiAgICBAZXh0ZW5kICVsaXN0LWlubGluZTtcclxuICAgIGZsb2F0OiByaWdodDtcclxufVxyXG5cclxuXHJcblxyXG4ubWFpbi1uYXZfX2l0ZW06bm90KDpmaXJzdC1jaGlsZCkge1xyXG4gICAgbWFyZ2luLWxlZnQ6ICRiYXNlLXNwYWNpbmctdW5pdDtcclxufVxyXG5cclxuXHJcblxyXG4ubWFpbi1uYXZfX2xpbmsge1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59XHJcblxyXG5cclxuXHJcbi5tYWluLW5hdl9fZXh0ZXJuYWwtbGluay1pY29uIHtcclxuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxNHB4KTtcclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNPV0wtQ0FST1VTRUxcclxuLy9cclxuLy8gaHR0cDovL3d3dy5vd2xjYXJvdXNlbC5vd2xncmFwaGljLmNvbS9cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBTZXR0aW5nc1xyXG4kbmF2LWNvbG9yOiAgICAgICAgICAgICAgICAgJGNvbG9yLXdoaXRlO1xyXG4kbmF2LWNvbG9yLWhvdmVyOiAgICAgICAgICAgJGNvbG9yLXdoaXRlO1xyXG4kbmF2LWJhY2tncm91bmQ6ICAgICAgICAgICAgJGNvbG9yLWdyYXktbWluZS1zaGFmdDtcclxuJG5hdi1iYWNrZ3JvdW5kLWhvdmVyOiAgICAgICRjb2xvci1ncmF5LW1pbmUtc2hhZnQ7XHJcbiRuYXYtd2lkdGg6ICAgICAgICAgICAgICAgICAkYmFzZS1zcGFjaW5nLXVuaXQtLWxhcmdlO1xyXG4kbmF2LWhlaWdodDogICAgICAgICAgICAgICAgJGJhc2Utc3BhY2luZy11bml0LS1sYXJnZTtcclxuJG5hdi1mb250LXNpemU6ICAgICAgICAgICAgIDE0cHg7XHJcbiRuYXYtcm91bmRlZDogICAgICAgICAgICAgICA1MCU7XHJcbiRuYXYtbWFyZ2luOiAgICAgICAgICAgICAgICAwIGVtKDQwcHgpO1xyXG4kbmF2LXBhZGRpbmc6ICAgICAgICAgICAgICAgZW0oMXB4KTtcclxuJG5hdi1vcGFjaXR5OiAgICAgICAgICAgICAgIC44O1xyXG4kbmF2LW9wYWNpdHktaG92ZXI6ICAgICAgICAgMTtcclxuJG5hdi1kaXNhYmxlZC1vcGFjaXR5OiAgICAgIC41O1xyXG5cclxuJGRvdC1iYWNrZ3JvdW5kOiAgICAgICAgICAgICRjb2xvci1ncmF5LW1pbmUtc2hhZnQ7XHJcbiRkb3QtYmFja2dyb3VuZC1hY3RpdmU6ICAgICAkY29sb3ItcmVkLW1vbnphO1xyXG4kZG90LXdpZHRoOiAgICAgICAgICAgICAgICAgZW0oOHB4KTtcclxuJGRvdC1oZWlnaHQ6ICAgICAgICAgICAgICAgIGVtKDhweCk7XHJcbiRkb3Qtcm91bmRlZDogICAgICAgICAgICAgICA1MCU7XHJcbiRkb3QtbWFyZ2luOiAgICAgICAgICAgICAgICAwIGVtKDNweCk7XHJcbiRkb3Qtb3BhY2l0eTogICAgICAgICAgICAgICAuODtcclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIE93bCBDYXJvdXNlbCBjb21wb25lbnRcclxuICpcclxuICogMS4gUG9zaXRpb24gcmVsYXRpdmUgYW5kIHotaW5kZXggZml4IHdlYmtpdCByZW5kZXJpbmcgZm9udHMgaXNzdWUuXHJcbiAqIDIuIEZpeCBmb3IgZmxhc2hpbmcgYmFja2dyb3VuZC5cclxuICovXHJcbi5vd2wtY2Fyb3VzZWwge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyAvKiBbMV0gKi9cclxuICAgIHotaW5kZXg6IDE7IC8qIFsxXSAqL1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogJGJhc2Utc3BhY2luZy11bml0O1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcblxyXG4gICAgLm93bC1zdGFnZSB7XHJcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgIC1tcy10b3VjaC1hY3Rpb246IHBhbi1ZO1xyXG4gICAgfVxyXG5cclxuICAgIC5vd2wtc3RhZ2U6OmFmdGVyIHtcclxuICAgICAgICBjbGVhcjogYm90aDtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBoZWlnaHQ6IDA7XHJcbiAgICAgICAgbGluZS1oZWlnaHQ6IDA7XHJcbiAgICAgICAgdmlzaWJpbGl0eTogaGlkZGVuO1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiLlwiO1xyXG4gICAgfVxyXG5cclxuICAgIC5vd2wtc3RhZ2Utb3V0ZXIge1xyXG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCAwLCAwKTsgLyogWzJdICovXHJcbiAgICB9XHJcblxyXG4gICAgLm93bC1pdGVtIHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgbWluLWhlaWdodDogZW0oMXB4KTtcclxuICAgICAgICAtd2Via2l0LWJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICAgICAgICAtd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgIC13ZWJraXQtdG91Y2gtY2FsbG91dDogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAub3dsLWl0ZW0gaW1nIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XHJcbiAgICB9XHJcblxyXG4gICAgLm93bC1uYXYuZGlzYWJsZWQsXHJcbiAgICAub3dsLWRvdHMuZGlzYWJsZWQge1xyXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgLm93bC1uYXYgLm93bC1wcmV2LFxyXG4gICAgLm93bC1uYXYgLm93bC1uZXh0LFxyXG4gICAgLm93bC1kb3Qge1xyXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICBjdXJzb3I6IGhhbmQ7XHJcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgJi5vd2wtbG9hZGVkIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIH1cclxuXHJcbiAgICAmLm93bC1sb2FkaW5nIHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jaztcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG5cclxuICAgICYub3dsLWhpZGRlbiB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuXHJcbiAgICAmLm93bC1yZWZyZXNoIC5vd2wtaXRlbSB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgIH1cclxuXHJcbiAgICAmLm93bC1kcmFnIC5vd2wtaXRlbSB7XHJcbiAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICB9XHJcblxyXG4gICAgJi5vd2wtZ3JhYiB7XHJcbiAgICAgICAgY3Vyc29yOiBtb3ZlO1xyXG4gICAgICAgIGN1cnNvcjogLXdlYmtpdC1ncmFiO1xyXG4gICAgICAgIGN1cnNvcjogLW8tZ3JhYjtcclxuICAgICAgICBjdXJzb3I6IC1tcy1ncmFiO1xyXG4gICAgICAgIGN1cnNvcjogZ3JhYjtcclxuICAgIH1cclxuXHJcbiAgICAmLm93bC1ydGwge1xyXG4gICAgICAgIGRpcmVjdGlvbjogcnRsO1xyXG4gICAgfVxyXG5cclxuICAgICYub3dsLXJ0bCAub3dsLWl0ZW0ge1xyXG4gICAgICAgIGZsb2F0OiByaWdodDtcclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG4ub3dsLWNhcm91c2VsIC5maWd1cmUge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMDtcclxufVxyXG5cclxuXHJcblxyXG4ub3dsLXRoZW1lIHtcclxuICAgIC8vIFN0eWxpbmcgTmV4dCBhbmQgUHJldiBidXR0b25zXHJcbiAgICAub3dsLW5hdiB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGJvdHRvbTogMTBweDtcclxuICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcclxuXHJcbiAgICAgICAgW2NsYXNzKj0nb3dsLSddIHtcclxuICAgICAgICAgICAgQGluY2x1ZGUgZm9udC1zaXplKCRuYXYtZm9udC1zaXplLCBcIm5vbmVcIik7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgICAgICAgICAgd2lkdGg6ICRuYXYtd2lkdGg7XHJcbiAgICAgICAgICAgIGhlaWdodDogJG5hdi1oZWlnaHQ7XHJcbiAgICAgICAgICAgIG1hcmdpbjogJG5hdi1tYXJnaW47XHJcbiAgICAgICAgICAgIHBhZGRpbmc6ICRuYXYtcGFkZGluZztcclxuICAgICAgICAgICAgY29sb3I6ICRuYXYtY29sb3I7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICRuYXYtYmFja2dyb3VuZDtcclxuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJG5hdi1yb3VuZGVkO1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAkbmF2LW9wYWNpdHk7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuXHJcbiAgICAgICAgICAgICY6aG92ZXIge1xyXG4gICAgICAgICAgICAgICAgY29sb3I6ICRuYXYtY29sb3ItaG92ZXI7XHJcbiAgICAgICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkbmF2LWJhY2tncm91bmQtaG92ZXI7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAkbmF2LW9wYWNpdHktaG92ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5vd2wtcHJldiB7XHJcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IGVtKDJweCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAub3dsLW5leHQge1xyXG4gICAgICAgICAgICBwYWRkaW5nLWxlZnQ6IGVtKDJweCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZGlzYWJsZWQge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAkbmF2LWRpc2FibGVkLW9wYWNpdHk7XHJcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBTdHlsaW5nIGRvdHNcclxuICAgIC5vd2wtbmF2LmRpc2FibGVkICsgLm93bC1kb3RzIHtcclxuICAgICAgICBtYXJnaW4tdG9wOiBlbSgxMHB4KTtcclxuICAgIH1cclxuXHJcbiAgICAub3dsLWRvdHMge1xyXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgICAgICBib3R0b206IGVtKDEycHgpO1xyXG4gICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICB3aWR0aDogZW0oODBweCk7XHJcbiAgICAgICAgbWFyZ2luLWxlZnQ6IC1lbSg0MHB4KTtcclxuICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICAgICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcclxuXHJcbiAgICAgICAgLm93bC1kb3Qge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICAgICAgICAgIHpvb206IDE7XHJcbiAgICAgICAgICAgICpkaXNwbGF5OiBpbmxpbmU7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6ICRkb3Qtb3BhY2l0eTtcclxuXHJcbiAgICAgICAgICAgIHNwYW4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJGRvdC13aWR0aDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogJGRvdC1oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46ICRkb3QtbWFyZ2luO1xyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZDogJGRvdC1iYWNrZ3JvdW5kO1xyXG4gICAgICAgICAgICAgICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiB2aXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAyMDBtcyBlYXNlO1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogJGRvdC1yb3VuZGVkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAmLmFjdGl2ZSxcclxuICAgICAgICAgICAgJjpob3ZlciB7XHJcbiAgICAgICAgICAgICAgICBzcGFuIHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAkZG90LWJhY2tncm91bmQtYWN0aXZlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI1BBR0UtRk9PVEVSXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuXHJcblxyXG5cclxuLyoqXHJcbiAqIFBhZ2UgZm9vdGVyIGNvbXBvbmVudFxyXG4gKi9cclxuLnBhZ2UtZm9vdGVyIHtcclxuICAgIHBhZGRpbmc6ICRiYXNlLXNwYWNpbmctdW5pdDtcclxuICAgIGNvbG9yOiAkY29sb3ItcGFnZS1mb290ZXI7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItcGFnZS1mb290ZXItYmFja2dyb3VuZDtcclxufVxyXG4iLCLvu78vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNQQUdFLUhFQURFUlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBQYWdlIGhlYWRlciBjb21wb25lbnRcclxuICovXHJcbi5wYWdlLWhlYWRlciB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkY29sb3ItcGFnZS1oZWFkZXItYmFja2dyb3VuZDtcclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNDTEVBUkZJWFxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBNaWNybyBjbGVhcmZpeFxyXG4gKiBodHRwOi8vY3NzLTEwMS5vcmcvYXJ0aWNsZXMvY2xlYXJmaXgvbGF0ZXN0LW5ldy1jbGVhcmZpeC1zby1mYXIucGhwXHJcbiAqIEV4dGVuZCB0aGUgY2xhc3Mgd2l0aCBTYXNzIHRvIGF2b2lkIHRoZSBgLmNsZWFyZml4YCBjbGFzcyBhcHBlYXJpbmdcclxuICogb3ZlciBhbmQgb3ZlciBpbiB5b3VyIG1hcmt1cC5cclxuICovXHJcbi5jbGVhcmZpeCxcclxuJWNsZWFyZml4IHtcclxuICAgICY6OmFmdGVyIHtcclxuICAgICAgICBjbGVhcjogYm90aDtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZTtcclxuICAgICAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgfVxyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0VQSVNFUlZFUlxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBIaWRlIExpdmUgTW9uaXRvciB0cmFja2luZyBpbWFnZSB0byByZW1vdmUgYm90dG9tIG1hcmdpbiBvbiBwYWdlXHJcbiAqL1xyXG4jTGl2ZU1vblRyYW5zcGFyZW50SW1hZ2UsXHJcbmJvZHkgPiBub3NjcmlwdCB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI0hJREVcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogVXRpbGl0eSBjbGFzcyBmb3IgaGlkaW5nIGVsZW1lbnRzLlxyXG4gKiBFeHRlbmQgdGhlIGNsYXNzIHdpdGggU2FzcyB0byBhdm9pZCB0aGUgYC51LWhpZGVgIGNsYXNzIGFwcGVhcmluZ1xyXG4gKiBvdmVyIGFuZCBvdmVyIGluIHlvdXIgbWFya3VwLlxyXG4gKi9cclxuJXUtaGlkZSxcclxuLnUtaGlkZSB7XHJcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcblxyXG4vLyBMb29wIG92ZXIgb3VyIGJyZWFrcG9pbnRzIGRlZmluZWQgaW4gX3NldHRpbmdzLmdyaWQuc2NzcyBhbmQgZ2VuZXJhdGVcclxuLy8gaGlkZSB1dGlsaXR5IGNsYXNzZXMgZm9yIGVhY2ggYnJlYWtwb2ludC5cclxuQGVhY2ggJGJyZWFrcG9pbnQgaW4gJGJyZWFrcG9pbnRzIHtcclxuXHJcbiAgICAvLyBHZXQgdGhlIG5hbWUgb2YgdGhlIGJyZWFrcG9pbnQuXHJcbiAgICAkYWxpYXM6IG50aCgkYnJlYWtwb2ludCwgMSk7XHJcblxyXG4gICAgQGluY2x1ZGUgbWVkaWEtcXVlcnkoJGFsaWFzKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSGlkZSBlbGVtZW50cyBvbiBjZXJ0YWluIGJyZWFrcG9pbnRzIGJhc2VkIG9uIHlvdXIgcmVzcG9uc2l2ZSBzZXR0aW5ncy5cclxuICAgICAgICAgKiBFeHRlbmQgdGhlIGNsYXNzIHdpdGggU2FzcyB0byBhdm9pZCB0aGUgYC51LWhpZGUtdGFibGV0YCBjbGFzcyBvciBzaW1pbGFyXHJcbiAgICAgICAgICogYXBwZWFyaW5nIG92ZXIgYW5kIG92ZXIgaW4geW91ciBtYXJrdXAuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgJXUtaGlkZS0jeyRhbGlhc30sXHJcbiAgICAgICAgLnUtaGlkZS0jeyRhbGlhc30ge1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIu+7vy8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9fcmVmZXJlbmNlcy5zY3NzXCIgLz5cclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gLy9cclxuLy8gI1VUSUxJVElFU1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcblxyXG5cclxuXHJcbi8qKlxyXG4gKiBPbmx5IGRpc3BsYXkgY29udGVudCB0byBzY3JlZW4gcmVhZGVyc1xyXG4gKiBTZWU6IGh0dHA6Ly9hMTF5cHJvamVjdC5jb20vcG9zdHMvaG93LXRvLWhpZGUtY29udGVudC9cclxuICovXHJcbi5zci1vbmx5IHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHdpZHRoOiBlbSgxcHgpO1xyXG4gICAgaGVpZ2h0OiBlbSgxcHgpO1xyXG4gICAgbWFyZ2luOiAtZW0oMXB4KTtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcclxuICAgIGJvcmRlcjogMDtcclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vX3JlZmVyZW5jZXMuc2Nzc1wiIC8+XHJcblxyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIC8vXHJcbi8vICNXSURUSFNcclxuLy9cclxuLy8gQ3JlYXRlIHdpZHRoIGhlbHBlciBjbGFzc2VzIHRoYXQgeW91IGNhbiB1c2UgdG8gc2l6ZSB0aGluZ3MgbGlrZSBncmlkIHN5c3RlbXMuXHJcbi8vIENsYXNzZXMgY2FuIHRha2UgYSBmcmFjdGlvbi1saWtlIGZvcm1hdCAoZS5nLiBgLnUtMi8zYCkgb3IgYSBzcG9rZW4td29yZFxyXG4vLyBmb3JtYXQgKGUuZy4gYC51LTItb2YtM2ApLiBVc2UgdGhlc2UgaW4geW91ciBtYXJrdXA6IDxkaXYgY2xhc3M9XCJ1LTcvMTJcIj5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vLyBHZW5lcmF0ZSB3aWR0aCBjbGFzc2VzXHJcbkBpbmNsdWRlIHdpZHRocygkd2lkdGhzLWNvbHVtbnMpO1xyXG5cclxuXHJcblxyXG4vLyBMb29wIG92ZXIgb3VyIGJyZWFrcG9pbnRzIGRlZmluZWQgaW4gX3NldHRpbmdzLmdyaWQuc2NzcyBhbmQgZ2VuZXJhdGVcclxuLy8gcmVzcG9uc2l2ZSB3aWR0aCBjbGFzc2VzLlxyXG5AZWFjaCAkYnJlYWtwb2ludCBpbiAkYnJlYWtwb2ludHMge1xyXG5cclxuICAgIC8vIEdldCB0aGUgbmFtZSBvZiB0aGUgYnJlYWtwb2ludC5cclxuICAgICRhbGlhczogbnRoKCRicmVha3BvaW50LCAxKTtcclxuXHJcbiAgICBAaW5jbHVkZSBtZWRpYS1xdWVyeSgkYWxpYXMpIHtcclxuXHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGVhY2ggb2Ygb3VyIGNvbHVtbiBzaXplcyBhbmQgZ2VuZXJhdGUgaXRzIHJlc3BvbnNpdmUgd2lkdGggY2xhc3Nlcy5cclxuICAgICAgICBAZWFjaCAkd2lkdGhzLWNvbHVtbiBpbiAkd2lkdGhzLWNvbHVtbnMtcmVzcG9uc2l2ZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgcmVzcG9uc2l2ZSB3aWR0aCBoZWxwZXIgY2xhc3NlcyB0aGF0IHlvdSBjYW4gdXNlIHRvIHNpemUgdGhpbmdzIGxpa2UgZ3JpZFxyXG4gICAgICAgICAgICAvLyBzeXN0ZW1zLiBDbGFzc2VzIGNhbiB0YWtlIGEgZnJhY3Rpb24tbGlrZSBmb3JtYXQgKGUuZy4gYC51LTIvM2ApIG9yIGEgc3Bva2VuLXdvcmRcclxuICAgICAgICAgICAgLy8gZm9ybWF0IChlLmcuIGAudS0yLW9mLTNgKS4gVXNlIHRoZXNlIGluIHlvdXIgbWFya3VwOiA8ZGl2IGNsYXNzPVwidS03LzEyLWxhcHRvcC1hbmQtdXBcIj5cclxuICAgICAgICAgICAgQGluY2x1ZGUgd2lkdGhzKCR3aWR0aHMtY29sdW1uLCAtI3skYWxpYXN9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwi77u/Ly8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL19yZWZlcmVuY2VzLnNjc3NcIiAvPlxyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG4vLyAjUFJJTlRcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAvL1xyXG5cclxuXHJcblxyXG4vKipcclxuICogUHJpbnQgc3R5bGVzXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2h0bWw1LWJvaWxlcnBsYXRlL2Jsb2IvbWFzdGVyL3NyYy9jc3MvbWFpbi5jc3NcclxuICogSW5saW5lZCB0byBhdm9pZCB0aGUgYWRkaXRpb25hbCBIVFRQIHJlcXVlc3Q6IGg1YnAuY29tL3JcclxuICovXHJcbkBtZWRpYSBwcmludCB7XHJcbiAgICAqLFxyXG4gICAgKjo6YmVmb3JlLFxyXG4gICAgKjo6YWZ0ZXIsXHJcbiAgICAqOjpmaXJzdC1sZXR0ZXIsXHJcbiAgICAqOjpmaXJzdC1saW5lIHtcclxuICAgICAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50OyAvKiBCbGFjayBwcmludHMgZmFzdGVyOiBodHRwOi8vd3d3LnNhbmJlaWppLmNvbS9hcmNoaXZlcy85NTMgKi9cclxuICAgICAgICB0ZXh0LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50ICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIGEsXHJcbiAgICBhOnZpc2l0ZWQge1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gICAgfVxyXG5cclxuICAgIGFbaHJlZl06OmFmdGVyIHtcclxuICAgICAgICBjb250ZW50OiBcIiAoXCIgYXR0cihocmVmKSBcIilcIjtcclxuICAgIH1cclxuXHJcbiAgICBhYmJyW3RpdGxlXTo6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiIChcIiBhdHRyKHRpdGxlKSBcIilcIjtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIERvbid0IHNob3cgbGlua3MgdGhhdCBhcmUgZnJhZ21lbnQgaWRlbnRpZmllcnMsXHJcbiAgICAgKiBvciB1c2UgdGhlIGBqYXZhc2NyaXB0OmAgcHNldWRvIHByb3RvY29sXHJcbiAgICAgKi9cclxuICAgIGFbaHJlZl49XCIjXCJdOjphZnRlcixcclxuICAgIGFbaHJlZl49XCJqYXZhc2NyaXB0OlwiXTo6YWZ0ZXIge1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlLFxyXG4gICAgYmxvY2txdW90ZSB7XHJcbiAgICAgICAgYm9yZGVyOiBlbSgxcHgpIHNvbGlkICM5OTk7XHJcbiAgICAgICAgcGFnZS1icmVhay1pbnNpZGU6IGF2b2lkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJpbnRpbmcgVGFibGVzOlxyXG4gICAgICogaHR0cDovL2Nzcy1kaXNjdXNzLmluY3V0aW8uY29tL3dpa2kvUHJpbnRpbmdfVGFibGVzXHJcbiAgICAgKi9cclxuICAgIHRoZWFkIHtcclxuICAgICAgICBkaXNwbGF5OiB0YWJsZS1oZWFkZXItZ3JvdXA7XHJcbiAgICB9XHJcblxyXG4gICAgdHIsXHJcbiAgICBpbWcge1xyXG4gICAgICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDtcclxuICAgIH1cclxuXHJcbiAgICBpbWcge1xyXG4gICAgICAgIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIHAsXHJcbiAgICBoMixcclxuICAgIGgzIHtcclxuICAgICAgICBvcnBoYW5zOiAzO1xyXG4gICAgICAgIHdpZG93czogMztcclxuICAgIH1cclxuXHJcbiAgICBoMixcclxuICAgIGgzIHtcclxuICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhdm9pZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9qZWN0IHNwZWNpZmljIHByaW50IG1vZGlmaWNhdGlvbnNcclxuICAgICAqL1xyXG4gICAgLnBhZ2UtaGVhZGVyLFxyXG4gICAgLnBhZ2UtZm9vdGVyLFxyXG4gICAgI2VwaS1xdWlja05hdmlnYXRvciB7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIC5jb2xsYXBzZV9fdGFyZ2V0IHtcclxuICAgICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xyXG4gICAgfVxyXG5cclxuICAgIC5jb2xsYXBzZV9fY29udHJvbCxcclxuICAgIC5jb2xsYXBzZV9fY29udGVudCB7XHJcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xyXG4gICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XHJcbiAgICB9XHJcbn1cclxuIl0sIm1hcHBpbmdzIjoiO0FRTXdDLFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULFNBQVM7QUFDVCxTQUFTO0FBQ1QsU0FBUztBQUNULE9BQU87QUFDUCxPQUFPO0FBQ1AsU0FBUztBRWRqRDs7Ozs7Ozs7Ozs7O0VBWUU7QUF3REY7Ozs7RUFJRTtBQU9GOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBeUJFO0FBMkJGOzs7Ozs7Ozs7OztFQVdFO0FBbUJGOzs7OztFQUtFO0FBVUY7Ozs7O0VBS0U7QUM1S0Y7OztHQUdHO0FBQ0gsQUFBQSxJQUFJLENBQUM7RUFDRCxXQUFXLEVBQUUsVUFBVztFQUFFLE9BQU87RUFDakMsb0JBQW9CLEVBQUUsSUFBSztFQUFFLE9BQU87RUFDcEMsd0JBQXdCLEVBQUUsSUFBSztFQUFFLE9BQU8sRUFDM0M7O0FBRUQ7O0dBRUc7QUFDSCxBQUFBLElBQUksQ0FBQztFQUNELE1BQU0sRUFBRSxDQUFFLEdBQ2I7O0FBRUQ7Z0ZBQ2dGO0FBRWhGOzs7O0dBSUc7QUFDSCxBQUFBLE9BQU87QUFDUCxBQUFBLEtBQUs7QUFDTCxBQUFBLE9BQU87QUFDUCxBQUFBLFVBQVU7QUFDVixBQUFBLE1BQU07QUFDTixBQUFBLE1BQU07QUFDTixBQUFBLE1BQU07QUFDTixBQUFBLElBQUk7QUFDSixBQUFBLElBQUk7QUFDSixBQUFBLEdBQUc7QUFDSCxBQUFBLE9BQU87QUFDUCxBQUFBLE9BQU8sQ0FBQztFQUFFLE9BQU87RUFDYixPQUFPLEVBQUUsS0FBTSxHQUNsQjs7QUFFRDs7R0FFRztBQUNILEFBQUEs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 */
